// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/interfaces.go -destination=internal/repository/mocks/mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	record "MamangRust/paymentgatewaygrpc/internal/domain/record"
	requests "MamangRust/paymentgatewaygrpc/internal/domain/requests"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(request *requests.CreateUserRequest) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", request)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), request)
}

// DeleteAllUserPermanent mocks base method.
func (m *MockUserRepository) DeleteAllUserPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUserPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllUserPermanent indicates an expected call of DeleteAllUserPermanent.
func (mr *MockUserRepositoryMockRecorder) DeleteAllUserPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUserPermanent", reflect.TypeOf((*MockUserRepository)(nil).DeleteAllUserPermanent))
}

// DeleteUserPermanent mocks base method.
func (m *MockUserRepository) DeleteUserPermanent(user_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPermanent", user_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserPermanent indicates an expected call of DeleteUserPermanent.
func (mr *MockUserRepositoryMockRecorder) DeleteUserPermanent(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPermanent", reflect.TypeOf((*MockUserRepository)(nil).DeleteUserPermanent), user_id)
}

// FindAllUsers mocks base method.
func (m *MockUserRepository) FindAllUsers(search string, page, pageSize int) ([]*record.UserRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUsers", search, page, pageSize)
	ret0, _ := ret[0].([]*record.UserRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllUsers indicates an expected call of FindAllUsers.
func (mr *MockUserRepositoryMockRecorder) FindAllUsers(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUsers", reflect.TypeOf((*MockUserRepository)(nil).FindAllUsers), search, page, pageSize)
}

// FindByActive mocks base method.
func (m *MockUserRepository) FindByActive(search string, page, pageSize int) ([]*record.UserRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", search, page, pageSize)
	ret0, _ := ret[0].([]*record.UserRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockUserRepositoryMockRecorder) FindByActive(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockUserRepository)(nil).FindByActive), search, page, pageSize)
}

// FindByEmail mocks base method.
func (m *MockUserRepository) FindByEmail(email string) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryMockRecorder) FindByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindByEmail), email)
}

// FindById mocks base method.
func (m *MockUserRepository) FindById(user_id int) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", user_id)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserRepositoryMockRecorder) FindById(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepository)(nil).FindById), user_id)
}

// FindByTrashed mocks base method.
func (m *MockUserRepository) FindByTrashed(search string, page, pageSize int) ([]*record.UserRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", search, page, pageSize)
	ret0, _ := ret[0].([]*record.UserRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockUserRepositoryMockRecorder) FindByTrashed(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockUserRepository)(nil).FindByTrashed), search, page, pageSize)
}

// RestoreAllUser mocks base method.
func (m *MockUserRepository) RestoreAllUser() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllUser")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllUser indicates an expected call of RestoreAllUser.
func (mr *MockUserRepositoryMockRecorder) RestoreAllUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllUser", reflect.TypeOf((*MockUserRepository)(nil).RestoreAllUser))
}

// RestoreUser mocks base method.
func (m *MockUserRepository) RestoreUser(user_id int) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreUser", user_id)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreUser indicates an expected call of RestoreUser.
func (mr *MockUserRepositoryMockRecorder) RestoreUser(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreUser", reflect.TypeOf((*MockUserRepository)(nil).RestoreUser), user_id)
}

// TrashedUser mocks base method.
func (m *MockUserRepository) TrashedUser(user_id int) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedUser", user_id)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedUser indicates an expected call of TrashedUser.
func (mr *MockUserRepositoryMockRecorder) TrashedUser(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedUser", reflect.TypeOf((*MockUserRepository)(nil).TrashedUser), user_id)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(request *requests.UpdateUserRequest) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", request)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), request)
}

// MockRoleRepository is a mock of RoleRepository interface.
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
	isgomock struct{}
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository.
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance.
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleRepository) CreateRole(request *requests.CreateRoleRequest) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", request)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleRepositoryMockRecorder) CreateRole(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleRepository)(nil).CreateRole), request)
}

// DeleteAllRolePermanent mocks base method.
func (m *MockRoleRepository) DeleteAllRolePermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllRolePermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllRolePermanent indicates an expected call of DeleteAllRolePermanent.
func (mr *MockRoleRepositoryMockRecorder) DeleteAllRolePermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllRolePermanent", reflect.TypeOf((*MockRoleRepository)(nil).DeleteAllRolePermanent))
}

// DeleteRolePermanent mocks base method.
func (m *MockRoleRepository) DeleteRolePermanent(role_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRolePermanent", role_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRolePermanent indicates an expected call of DeleteRolePermanent.
func (mr *MockRoleRepositoryMockRecorder) DeleteRolePermanent(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolePermanent", reflect.TypeOf((*MockRoleRepository)(nil).DeleteRolePermanent), role_id)
}

// FindAllRoles mocks base method.
func (m *MockRoleRepository) FindAllRoles(page, pageSize int, search string) ([]*record.RoleRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRoles", page, pageSize, search)
	ret0, _ := ret[0].([]*record.RoleRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllRoles indicates an expected call of FindAllRoles.
func (mr *MockRoleRepositoryMockRecorder) FindAllRoles(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRoles", reflect.TypeOf((*MockRoleRepository)(nil).FindAllRoles), page, pageSize, search)
}

// FindByActiveRole mocks base method.
func (m *MockRoleRepository) FindByActiveRole(page, pageSize int, search string) ([]*record.RoleRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActiveRole", page, pageSize, search)
	ret0, _ := ret[0].([]*record.RoleRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActiveRole indicates an expected call of FindByActiveRole.
func (mr *MockRoleRepositoryMockRecorder) FindByActiveRole(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActiveRole", reflect.TypeOf((*MockRoleRepository)(nil).FindByActiveRole), page, pageSize, search)
}

// FindById mocks base method.
func (m *MockRoleRepository) FindById(role_id int) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", role_id)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRoleRepositoryMockRecorder) FindById(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRoleRepository)(nil).FindById), role_id)
}

// FindByName mocks base method.
func (m *MockRoleRepository) FindByName(name string) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockRoleRepositoryMockRecorder) FindByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockRoleRepository)(nil).FindByName), name)
}

// FindByTrashedRole mocks base method.
func (m *MockRoleRepository) FindByTrashedRole(page, pageSize int, search string) ([]*record.RoleRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashedRole", page, pageSize, search)
	ret0, _ := ret[0].([]*record.RoleRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashedRole indicates an expected call of FindByTrashedRole.
func (mr *MockRoleRepositoryMockRecorder) FindByTrashedRole(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashedRole", reflect.TypeOf((*MockRoleRepository)(nil).FindByTrashedRole), page, pageSize, search)
}

// FindByUserId mocks base method.
func (m *MockRoleRepository) FindByUserId(user_id int) ([]*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", user_id)
	ret0, _ := ret[0].([]*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockRoleRepositoryMockRecorder) FindByUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockRoleRepository)(nil).FindByUserId), user_id)
}

// RestoreAllRole mocks base method.
func (m *MockRoleRepository) RestoreAllRole() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllRole")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllRole indicates an expected call of RestoreAllRole.
func (mr *MockRoleRepositoryMockRecorder) RestoreAllRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllRole", reflect.TypeOf((*MockRoleRepository)(nil).RestoreAllRole))
}

// RestoreRole mocks base method.
func (m *MockRoleRepository) RestoreRole(role_id int) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreRole", role_id)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreRole indicates an expected call of RestoreRole.
func (mr *MockRoleRepositoryMockRecorder) RestoreRole(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreRole", reflect.TypeOf((*MockRoleRepository)(nil).RestoreRole), role_id)
}

// TrashedRole mocks base method.
func (m *MockRoleRepository) TrashedRole(role_id int) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedRole", role_id)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedRole indicates an expected call of TrashedRole.
func (mr *MockRoleRepositoryMockRecorder) TrashedRole(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedRole", reflect.TypeOf((*MockRoleRepository)(nil).TrashedRole), role_id)
}

// UpdateRole mocks base method.
func (m *MockRoleRepository) UpdateRole(request *requests.UpdateRoleRequest) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", request)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRoleRepositoryMockRecorder) UpdateRole(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleRepository)(nil).UpdateRole), request)
}

// MockRefreshTokenRepository is a mock of RefreshTokenRepository interface.
type MockRefreshTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenRepositoryMockRecorder
	isgomock struct{}
}

// MockRefreshTokenRepositoryMockRecorder is the mock recorder for MockRefreshTokenRepository.
type MockRefreshTokenRepositoryMockRecorder struct {
	mock *MockRefreshTokenRepository
}

// NewMockRefreshTokenRepository creates a new mock instance.
func NewMockRefreshTokenRepository(ctrl *gomock.Controller) *MockRefreshTokenRepository {
	mock := &MockRefreshTokenRepository{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenRepository) EXPECT() *MockRefreshTokenRepositoryMockRecorder {
	return m.recorder
}

// CreateRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) CreateRefreshToken(req *requests.CreateRefreshToken) (*record.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", req)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) CreateRefreshToken(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).CreateRefreshToken), req)
}

// DeleteRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) DeleteRefreshToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) DeleteRefreshToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).DeleteRefreshToken), token)
}

// DeleteRefreshTokenByUserId mocks base method.
func (m *MockRefreshTokenRepository) DeleteRefreshTokenByUserId(user_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshTokenByUserId", user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshTokenByUserId indicates an expected call of DeleteRefreshTokenByUserId.
func (mr *MockRefreshTokenRepositoryMockRecorder) DeleteRefreshTokenByUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshTokenByUserId", reflect.TypeOf((*MockRefreshTokenRepository)(nil).DeleteRefreshTokenByUserId), user_id)
}

// FindByToken mocks base method.
func (m *MockRefreshTokenRepository) FindByToken(token string) (*record.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", token)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) FindByToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).FindByToken), token)
}

// FindByUserId mocks base method.
func (m *MockRefreshTokenRepository) FindByUserId(user_id int) (*record.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", user_id)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockRefreshTokenRepositoryMockRecorder) FindByUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockRefreshTokenRepository)(nil).FindByUserId), user_id)
}

// UpdateRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) UpdateRefreshToken(req *requests.UpdateRefreshToken) (*record.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshToken", req)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRefreshToken indicates an expected call of UpdateRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) UpdateRefreshToken(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).UpdateRefreshToken), req)
}

// MockUserRoleRepository is a mock of UserRoleRepository interface.
type MockUserRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoleRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRoleRepositoryMockRecorder is the mock recorder for MockUserRoleRepository.
type MockUserRoleRepositoryMockRecorder struct {
	mock *MockUserRoleRepository
}

// NewMockUserRoleRepository creates a new mock instance.
func NewMockUserRoleRepository(ctrl *gomock.Controller) *MockUserRoleRepository {
	mock := &MockUserRoleRepository{ctrl: ctrl}
	mock.recorder = &MockUserRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRoleRepository) EXPECT() *MockUserRoleRepositoryMockRecorder {
	return m.recorder
}

// AssignRoleToUser mocks base method.
func (m *MockUserRoleRepository) AssignRoleToUser(req *requests.CreateUserRoleRequest) (*record.UserRoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUser", req)
	ret0, _ := ret[0].(*record.UserRoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignRoleToUser indicates an expected call of AssignRoleToUser.
func (mr *MockUserRoleRepositoryMockRecorder) AssignRoleToUser(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUser", reflect.TypeOf((*MockUserRoleRepository)(nil).AssignRoleToUser), req)
}

// RemoveRoleFromUser mocks base method.
func (m *MockUserRoleRepository) RemoveRoleFromUser(req *requests.RemoveUserRoleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoleFromUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRoleFromUser indicates an expected call of RemoveRoleFromUser.
func (mr *MockUserRoleRepositoryMockRecorder) RemoveRoleFromUser(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleFromUser", reflect.TypeOf((*MockUserRoleRepository)(nil).RemoveRoleFromUser), req)
}

// MockCardRepository is a mock of CardRepository interface.
type MockCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardRepositoryMockRecorder
	isgomock struct{}
}

// MockCardRepositoryMockRecorder is the mock recorder for MockCardRepository.
type MockCardRepositoryMockRecorder struct {
	mock *MockCardRepository
}

// NewMockCardRepository creates a new mock instance.
func NewMockCardRepository(ctrl *gomock.Controller) *MockCardRepository {
	mock := &MockCardRepository{ctrl: ctrl}
	mock.recorder = &MockCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRepository) EXPECT() *MockCardRepositoryMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardRepository) CreateCard(request *requests.CreateCardRequest) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", request)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardRepositoryMockRecorder) CreateCard(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardRepository)(nil).CreateCard), request)
}

// DeleteAllCardPermanent mocks base method.
func (m *MockCardRepository) DeleteAllCardPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllCardPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllCardPermanent indicates an expected call of DeleteAllCardPermanent.
func (mr *MockCardRepositoryMockRecorder) DeleteAllCardPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCardPermanent", reflect.TypeOf((*MockCardRepository)(nil).DeleteAllCardPermanent))
}

// DeleteCardPermanent mocks base method.
func (m *MockCardRepository) DeleteCardPermanent(card_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCardPermanent", card_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCardPermanent indicates an expected call of DeleteCardPermanent.
func (mr *MockCardRepositoryMockRecorder) DeleteCardPermanent(card_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCardPermanent", reflect.TypeOf((*MockCardRepository)(nil).DeleteCardPermanent), card_id)
}

// FindAllCards mocks base method.
func (m *MockCardRepository) FindAllCards(search string, page, pageSize int) ([]*record.CardRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCards", search, page, pageSize)
	ret0, _ := ret[0].([]*record.CardRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllCards indicates an expected call of FindAllCards.
func (mr *MockCardRepositoryMockRecorder) FindAllCards(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCards", reflect.TypeOf((*MockCardRepository)(nil).FindAllCards), search, page, pageSize)
}

// FindByActive mocks base method.
func (m *MockCardRepository) FindByActive(search string, page, pageSize int) ([]*record.CardRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", search, page, pageSize)
	ret0, _ := ret[0].([]*record.CardRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockCardRepositoryMockRecorder) FindByActive(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockCardRepository)(nil).FindByActive), search, page, pageSize)
}

// FindById mocks base method.
func (m *MockCardRepository) FindById(card_id int) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", card_id)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCardRepositoryMockRecorder) FindById(card_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCardRepository)(nil).FindById), card_id)
}

// FindByTrashed mocks base method.
func (m *MockCardRepository) FindByTrashed(search string, page, pageSize int) ([]*record.CardRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", search, page, pageSize)
	ret0, _ := ret[0].([]*record.CardRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockCardRepositoryMockRecorder) FindByTrashed(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockCardRepository)(nil).FindByTrashed), search, page, pageSize)
}

// FindCardByCardNumber mocks base method.
func (m *MockCardRepository) FindCardByCardNumber(card_number string) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCardByCardNumber", card_number)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCardByCardNumber indicates an expected call of FindCardByCardNumber.
func (mr *MockCardRepositoryMockRecorder) FindCardByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCardByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).FindCardByCardNumber), card_number)
}

// FindCardByUserId mocks base method.
func (m *MockCardRepository) FindCardByUserId(user_id int) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCardByUserId", user_id)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCardByUserId indicates an expected call of FindCardByUserId.
func (mr *MockCardRepositoryMockRecorder) FindCardByUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCardByUserId", reflect.TypeOf((*MockCardRepository)(nil).FindCardByUserId), user_id)
}

// GetMonthlyBalance mocks base method.
func (m *MockCardRepository) GetMonthlyBalance(year int) ([]*record.CardMonthBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyBalance", year)
	ret0, _ := ret[0].([]*record.CardMonthBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyBalance indicates an expected call of GetMonthlyBalance.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyBalance(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyBalance", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyBalance), year)
}

// GetYearlyBalance mocks base method.
func (m *MockCardRepository) GetYearlyBalance(year int) ([]*record.CardYearlyBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyBalance", year)
	ret0, _ := ret[0].([]*record.CardYearlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyBalance indicates an expected call of GetYearlyBalance.
func (mr *MockCardRepositoryMockRecorder) GetYearlyBalance(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyBalance", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyBalance), year)
}

// RestoreAllCard mocks base method.
func (m *MockCardRepository) RestoreAllCard() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllCard")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllCard indicates an expected call of RestoreAllCard.
func (mr *MockCardRepositoryMockRecorder) RestoreAllCard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllCard", reflect.TypeOf((*MockCardRepository)(nil).RestoreAllCard))
}

// RestoreCard mocks base method.
func (m *MockCardRepository) RestoreCard(cardId int) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCard", cardId)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCard indicates an expected call of RestoreCard.
func (mr *MockCardRepositoryMockRecorder) RestoreCard(cardId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCard", reflect.TypeOf((*MockCardRepository)(nil).RestoreCard), cardId)
}

// TrashedCard mocks base method.
func (m *MockCardRepository) TrashedCard(cardId int) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedCard", cardId)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedCard indicates an expected call of TrashedCard.
func (mr *MockCardRepositoryMockRecorder) TrashedCard(cardId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedCard", reflect.TypeOf((*MockCardRepository)(nil).TrashedCard), cardId)
}

// UpdateCard mocks base method.
func (m *MockCardRepository) UpdateCard(request *requests.UpdateCardRequest) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", request)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockCardRepositoryMockRecorder) UpdateCard(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockCardRepository)(nil).UpdateCard), request)
}

// MockMerchantRepository is a mock of MerchantRepository interface.
type MockMerchantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantRepositoryMockRecorder
	isgomock struct{}
}

// MockMerchantRepositoryMockRecorder is the mock recorder for MockMerchantRepository.
type MockMerchantRepositoryMockRecorder struct {
	mock *MockMerchantRepository
}

// NewMockMerchantRepository creates a new mock instance.
func NewMockMerchantRepository(ctrl *gomock.Controller) *MockMerchantRepository {
	mock := &MockMerchantRepository{ctrl: ctrl}
	mock.recorder = &MockMerchantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantRepository) EXPECT() *MockMerchantRepositoryMockRecorder {
	return m.recorder
}

// CreateMerchant mocks base method.
func (m *MockMerchantRepository) CreateMerchant(request *requests.CreateMerchantRequest) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMerchant", request)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMerchant indicates an expected call of CreateMerchant.
func (mr *MockMerchantRepositoryMockRecorder) CreateMerchant(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).CreateMerchant), request)
}

// DeleteAllMerchantPermanent mocks base method.
func (m *MockMerchantRepository) DeleteAllMerchantPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllMerchantPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllMerchantPermanent indicates an expected call of DeleteAllMerchantPermanent.
func (mr *MockMerchantRepositoryMockRecorder) DeleteAllMerchantPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllMerchantPermanent", reflect.TypeOf((*MockMerchantRepository)(nil).DeleteAllMerchantPermanent))
}

// DeleteMerchantPermanent mocks base method.
func (m *MockMerchantRepository) DeleteMerchantPermanent(merchant_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMerchantPermanent", merchant_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMerchantPermanent indicates an expected call of DeleteMerchantPermanent.
func (mr *MockMerchantRepositoryMockRecorder) DeleteMerchantPermanent(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMerchantPermanent", reflect.TypeOf((*MockMerchantRepository)(nil).DeleteMerchantPermanent), merchant_id)
}

// FindAllMerchants mocks base method.
func (m *MockMerchantRepository) FindAllMerchants(search string, page, pageSize int) ([]*record.MerchantRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMerchants", search, page, pageSize)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllMerchants indicates an expected call of FindAllMerchants.
func (mr *MockMerchantRepositoryMockRecorder) FindAllMerchants(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMerchants", reflect.TypeOf((*MockMerchantRepository)(nil).FindAllMerchants), search, page, pageSize)
}

// FindByActive mocks base method.
func (m *MockMerchantRepository) FindByActive(search string, page, pageSize int) ([]*record.MerchantRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", search, page, pageSize)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockMerchantRepositoryMockRecorder) FindByActive(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockMerchantRepository)(nil).FindByActive), search, page, pageSize)
}

// FindByApiKey mocks base method.
func (m *MockMerchantRepository) FindByApiKey(api_key string) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByApiKey", api_key)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByApiKey indicates an expected call of FindByApiKey.
func (mr *MockMerchantRepositoryMockRecorder) FindByApiKey(api_key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByApiKey", reflect.TypeOf((*MockMerchantRepository)(nil).FindByApiKey), api_key)
}

// FindById mocks base method.
func (m *MockMerchantRepository) FindById(merchant_id int) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", merchant_id)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockMerchantRepositoryMockRecorder) FindById(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockMerchantRepository)(nil).FindById), merchant_id)
}

// FindByMerchantUserId mocks base method.
func (m *MockMerchantRepository) FindByMerchantUserId(user_id int) ([]*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMerchantUserId", user_id)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMerchantUserId indicates an expected call of FindByMerchantUserId.
func (mr *MockMerchantRepositoryMockRecorder) FindByMerchantUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMerchantUserId", reflect.TypeOf((*MockMerchantRepository)(nil).FindByMerchantUserId), user_id)
}

// FindByName mocks base method.
func (m *MockMerchantRepository) FindByName(name string) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockMerchantRepositoryMockRecorder) FindByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockMerchantRepository)(nil).FindByName), name)
}

// FindByTrashed mocks base method.
func (m *MockMerchantRepository) FindByTrashed(search string, page, pageSize int) ([]*record.MerchantRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", search, page, pageSize)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockMerchantRepositoryMockRecorder) FindByTrashed(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockMerchantRepository)(nil).FindByTrashed), search, page, pageSize)
}

// RestoreAllMerchant mocks base method.
func (m *MockMerchantRepository) RestoreAllMerchant() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllMerchant")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllMerchant indicates an expected call of RestoreAllMerchant.
func (mr *MockMerchantRepositoryMockRecorder) RestoreAllMerchant() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).RestoreAllMerchant))
}

// RestoreMerchant mocks base method.
func (m *MockMerchantRepository) RestoreMerchant(merchant_id int) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreMerchant", merchant_id)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreMerchant indicates an expected call of RestoreMerchant.
func (mr *MockMerchantRepositoryMockRecorder) RestoreMerchant(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).RestoreMerchant), merchant_id)
}

// TrashedMerchant mocks base method.
func (m *MockMerchantRepository) TrashedMerchant(merchantId int) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedMerchant", merchantId)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedMerchant indicates an expected call of TrashedMerchant.
func (mr *MockMerchantRepositoryMockRecorder) TrashedMerchant(merchantId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).TrashedMerchant), merchantId)
}

// UpdateMerchant mocks base method.
func (m *MockMerchantRepository) UpdateMerchant(request *requests.UpdateMerchantRequest) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMerchant", request)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMerchant indicates an expected call of UpdateMerchant.
func (mr *MockMerchantRepositoryMockRecorder) UpdateMerchant(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).UpdateMerchant), request)
}

// MockSaldoRepository is a mock of SaldoRepository interface.
type MockSaldoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSaldoRepositoryMockRecorder
	isgomock struct{}
}

// MockSaldoRepositoryMockRecorder is the mock recorder for MockSaldoRepository.
type MockSaldoRepositoryMockRecorder struct {
	mock *MockSaldoRepository
}

// NewMockSaldoRepository creates a new mock instance.
func NewMockSaldoRepository(ctrl *gomock.Controller) *MockSaldoRepository {
	mock := &MockSaldoRepository{ctrl: ctrl}
	mock.recorder = &MockSaldoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaldoRepository) EXPECT() *MockSaldoRepositoryMockRecorder {
	return m.recorder
}

// CreateSaldo mocks base method.
func (m *MockSaldoRepository) CreateSaldo(request *requests.CreateSaldoRequest) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSaldo", request)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSaldo indicates an expected call of CreateSaldo.
func (mr *MockSaldoRepositoryMockRecorder) CreateSaldo(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSaldo", reflect.TypeOf((*MockSaldoRepository)(nil).CreateSaldo), request)
}

// DeleteAllSaldoPermanent mocks base method.
func (m *MockSaldoRepository) DeleteAllSaldoPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSaldoPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSaldoPermanent indicates an expected call of DeleteAllSaldoPermanent.
func (mr *MockSaldoRepositoryMockRecorder) DeleteAllSaldoPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSaldoPermanent", reflect.TypeOf((*MockSaldoRepository)(nil).DeleteAllSaldoPermanent))
}

// DeleteSaldoPermanent mocks base method.
func (m *MockSaldoRepository) DeleteSaldoPermanent(saldo_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSaldoPermanent", saldo_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSaldoPermanent indicates an expected call of DeleteSaldoPermanent.
func (mr *MockSaldoRepositoryMockRecorder) DeleteSaldoPermanent(saldo_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSaldoPermanent", reflect.TypeOf((*MockSaldoRepository)(nil).DeleteSaldoPermanent), saldo_id)
}

// FindAllSaldos mocks base method.
func (m *MockSaldoRepository) FindAllSaldos(search string, page, pageSize int) ([]*record.SaldoRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllSaldos", search, page, pageSize)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllSaldos indicates an expected call of FindAllSaldos.
func (mr *MockSaldoRepositoryMockRecorder) FindAllSaldos(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllSaldos", reflect.TypeOf((*MockSaldoRepository)(nil).FindAllSaldos), search, page, pageSize)
}

// FindByActive mocks base method.
func (m *MockSaldoRepository) FindByActive(search string, page, pageSize int) ([]*record.SaldoRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", search, page, pageSize)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockSaldoRepositoryMockRecorder) FindByActive(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockSaldoRepository)(nil).FindByActive), search, page, pageSize)
}

// FindByCardNumber mocks base method.
func (m *MockSaldoRepository) FindByCardNumber(card_number string) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumber", card_number)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockSaldoRepositoryMockRecorder) FindByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockSaldoRepository)(nil).FindByCardNumber), card_number)
}

// FindById mocks base method.
func (m *MockSaldoRepository) FindById(saldo_id int) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", saldo_id)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockSaldoRepositoryMockRecorder) FindById(saldo_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockSaldoRepository)(nil).FindById), saldo_id)
}

// FindByTrashed mocks base method.
func (m *MockSaldoRepository) FindByTrashed(search string, page, pageSize int) ([]*record.SaldoRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", search, page, pageSize)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockSaldoRepositoryMockRecorder) FindByTrashed(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockSaldoRepository)(nil).FindByTrashed), search, page, pageSize)
}

// RestoreAllSaldo mocks base method.
func (m *MockSaldoRepository) RestoreAllSaldo() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllSaldo")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllSaldo indicates an expected call of RestoreAllSaldo.
func (mr *MockSaldoRepositoryMockRecorder) RestoreAllSaldo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllSaldo", reflect.TypeOf((*MockSaldoRepository)(nil).RestoreAllSaldo))
}

// RestoreSaldo mocks base method.
func (m *MockSaldoRepository) RestoreSaldo(saldoID int) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSaldo", saldoID)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreSaldo indicates an expected call of RestoreSaldo.
func (mr *MockSaldoRepositoryMockRecorder) RestoreSaldo(saldoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSaldo", reflect.TypeOf((*MockSaldoRepository)(nil).RestoreSaldo), saldoID)
}

// TrashedSaldo mocks base method.
func (m *MockSaldoRepository) TrashedSaldo(saldoID int) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedSaldo", saldoID)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedSaldo indicates an expected call of TrashedSaldo.
func (mr *MockSaldoRepositoryMockRecorder) TrashedSaldo(saldoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedSaldo", reflect.TypeOf((*MockSaldoRepository)(nil).TrashedSaldo), saldoID)
}

// UpdateSaldo mocks base method.
func (m *MockSaldoRepository) UpdateSaldo(request *requests.UpdateSaldoRequest) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSaldo", request)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSaldo indicates an expected call of UpdateSaldo.
func (mr *MockSaldoRepositoryMockRecorder) UpdateSaldo(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSaldo", reflect.TypeOf((*MockSaldoRepository)(nil).UpdateSaldo), request)
}

// UpdateSaldoBalance mocks base method.
func (m *MockSaldoRepository) UpdateSaldoBalance(request *requests.UpdateSaldoBalance) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSaldoBalance", request)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSaldoBalance indicates an expected call of UpdateSaldoBalance.
func (mr *MockSaldoRepositoryMockRecorder) UpdateSaldoBalance(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSaldoBalance", reflect.TypeOf((*MockSaldoRepository)(nil).UpdateSaldoBalance), request)
}

// UpdateSaldoWithdraw mocks base method.
func (m *MockSaldoRepository) UpdateSaldoWithdraw(request *requests.UpdateSaldoWithdraw) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSaldoWithdraw", request)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSaldoWithdraw indicates an expected call of UpdateSaldoWithdraw.
func (mr *MockSaldoRepositoryMockRecorder) UpdateSaldoWithdraw(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSaldoWithdraw", reflect.TypeOf((*MockSaldoRepository)(nil).UpdateSaldoWithdraw), request)
}

// MockTopupRepository is a mock of TopupRepository interface.
type MockTopupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTopupRepositoryMockRecorder
	isgomock struct{}
}

// MockTopupRepositoryMockRecorder is the mock recorder for MockTopupRepository.
type MockTopupRepositoryMockRecorder struct {
	mock *MockTopupRepository
}

// NewMockTopupRepository creates a new mock instance.
func NewMockTopupRepository(ctrl *gomock.Controller) *MockTopupRepository {
	mock := &MockTopupRepository{ctrl: ctrl}
	mock.recorder = &MockTopupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopupRepository) EXPECT() *MockTopupRepositoryMockRecorder {
	return m.recorder
}

// CountAllTopups mocks base method.
func (m *MockTopupRepository) CountAllTopups() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllTopups")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllTopups indicates an expected call of CountAllTopups.
func (mr *MockTopupRepositoryMockRecorder) CountAllTopups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllTopups", reflect.TypeOf((*MockTopupRepository)(nil).CountAllTopups))
}

// CountTopupsByDate mocks base method.
func (m *MockTopupRepository) CountTopupsByDate(date string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTopupsByDate", date)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTopupsByDate indicates an expected call of CountTopupsByDate.
func (mr *MockTopupRepositoryMockRecorder) CountTopupsByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTopupsByDate", reflect.TypeOf((*MockTopupRepository)(nil).CountTopupsByDate), date)
}

// CreateTopup mocks base method.
func (m *MockTopupRepository) CreateTopup(request *requests.CreateTopupRequest) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopup", request)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopup indicates an expected call of CreateTopup.
func (mr *MockTopupRepositoryMockRecorder) CreateTopup(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopup", reflect.TypeOf((*MockTopupRepository)(nil).CreateTopup), request)
}

// DeleteAllTopupPermanent mocks base method.
func (m *MockTopupRepository) DeleteAllTopupPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTopupPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTopupPermanent indicates an expected call of DeleteAllTopupPermanent.
func (mr *MockTopupRepositoryMockRecorder) DeleteAllTopupPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTopupPermanent", reflect.TypeOf((*MockTopupRepository)(nil).DeleteAllTopupPermanent))
}

// DeleteTopupPermanent mocks base method.
func (m *MockTopupRepository) DeleteTopupPermanent(topup_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopupPermanent", topup_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopupPermanent indicates an expected call of DeleteTopupPermanent.
func (mr *MockTopupRepositoryMockRecorder) DeleteTopupPermanent(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopupPermanent", reflect.TypeOf((*MockTopupRepository)(nil).DeleteTopupPermanent), topup_id)
}

// FindAllTopups mocks base method.
func (m *MockTopupRepository) FindAllTopups(search string, page, pageSize int) ([]*record.TopupRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTopups", search, page, pageSize)
	ret0, _ := ret[0].([]*record.TopupRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllTopups indicates an expected call of FindAllTopups.
func (mr *MockTopupRepositoryMockRecorder) FindAllTopups(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTopups", reflect.TypeOf((*MockTopupRepository)(nil).FindAllTopups), search, page, pageSize)
}

// FindByActive mocks base method.
func (m *MockTopupRepository) FindByActive(search string, page, pageSize int) ([]*record.TopupRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", search, page, pageSize)
	ret0, _ := ret[0].([]*record.TopupRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockTopupRepositoryMockRecorder) FindByActive(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockTopupRepository)(nil).FindByActive), search, page, pageSize)
}

// FindByCardNumber mocks base method.
func (m *MockTopupRepository) FindByCardNumber(card_number string) ([]*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumber", card_number)
	ret0, _ := ret[0].([]*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockTopupRepositoryMockRecorder) FindByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockTopupRepository)(nil).FindByCardNumber), card_number)
}

// FindById mocks base method.
func (m *MockTopupRepository) FindById(topup_id int) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", topup_id)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTopupRepositoryMockRecorder) FindById(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTopupRepository)(nil).FindById), topup_id)
}

// FindByTrashed mocks base method.
func (m *MockTopupRepository) FindByTrashed(search string, page, pageSize int) ([]*record.TopupRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", search, page, pageSize)
	ret0, _ := ret[0].([]*record.TopupRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockTopupRepositoryMockRecorder) FindByTrashed(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockTopupRepository)(nil).FindByTrashed), search, page, pageSize)
}

// RestoreAllTopup mocks base method.
func (m *MockTopupRepository) RestoreAllTopup() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllTopup")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllTopup indicates an expected call of RestoreAllTopup.
func (mr *MockTopupRepositoryMockRecorder) RestoreAllTopup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllTopup", reflect.TypeOf((*MockTopupRepository)(nil).RestoreAllTopup))
}

// RestoreTopup mocks base method.
func (m *MockTopupRepository) RestoreTopup(topup_id int) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTopup", topup_id)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTopup indicates an expected call of RestoreTopup.
func (mr *MockTopupRepositoryMockRecorder) RestoreTopup(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTopup", reflect.TypeOf((*MockTopupRepository)(nil).RestoreTopup), topup_id)
}

// TrashedTopup mocks base method.
func (m *MockTopupRepository) TrashedTopup(topup_id int) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTopup", topup_id)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTopup indicates an expected call of TrashedTopup.
func (mr *MockTopupRepositoryMockRecorder) TrashedTopup(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTopup", reflect.TypeOf((*MockTopupRepository)(nil).TrashedTopup), topup_id)
}

// UpdateTopup mocks base method.
func (m *MockTopupRepository) UpdateTopup(request *requests.UpdateTopupRequest) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopup", request)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTopup indicates an expected call of UpdateTopup.
func (mr *MockTopupRepositoryMockRecorder) UpdateTopup(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopup", reflect.TypeOf((*MockTopupRepository)(nil).UpdateTopup), request)
}

// UpdateTopupAmount mocks base method.
func (m *MockTopupRepository) UpdateTopupAmount(request *requests.UpdateTopupAmount) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopupAmount", request)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTopupAmount indicates an expected call of UpdateTopupAmount.
func (mr *MockTopupRepositoryMockRecorder) UpdateTopupAmount(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopupAmount", reflect.TypeOf((*MockTopupRepository)(nil).UpdateTopupAmount), request)
}

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
	isgomock struct{}
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// CountAllTransactions mocks base method.
func (m *MockTransactionRepository) CountAllTransactions() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllTransactions")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllTransactions indicates an expected call of CountAllTransactions.
func (mr *MockTransactionRepositoryMockRecorder) CountAllTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllTransactions", reflect.TypeOf((*MockTransactionRepository)(nil).CountAllTransactions))
}

// CountTransactionsByDate mocks base method.
func (m *MockTransactionRepository) CountTransactionsByDate(date string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTransactionsByDate", date)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTransactionsByDate indicates an expected call of CountTransactionsByDate.
func (mr *MockTransactionRepositoryMockRecorder) CountTransactionsByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTransactionsByDate", reflect.TypeOf((*MockTransactionRepository)(nil).CountTransactionsByDate), date)
}

// CreateTransaction mocks base method.
func (m *MockTransactionRepository) CreateTransaction(request *requests.CreateTransactionRequest) (*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", request)
	ret0, _ := ret[0].(*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionRepositoryMockRecorder) CreateTransaction(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).CreateTransaction), request)
}

// DeleteAllTransactionPermanent mocks base method.
func (m *MockTransactionRepository) DeleteAllTransactionPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTransactionPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTransactionPermanent indicates an expected call of DeleteAllTransactionPermanent.
func (mr *MockTransactionRepositoryMockRecorder) DeleteAllTransactionPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTransactionPermanent", reflect.TypeOf((*MockTransactionRepository)(nil).DeleteAllTransactionPermanent))
}

// DeleteTransactionPermanent mocks base method.
func (m *MockTransactionRepository) DeleteTransactionPermanent(topup_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransactionPermanent", topup_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransactionPermanent indicates an expected call of DeleteTransactionPermanent.
func (mr *MockTransactionRepositoryMockRecorder) DeleteTransactionPermanent(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionPermanent", reflect.TypeOf((*MockTransactionRepository)(nil).DeleteTransactionPermanent), topup_id)
}

// FindAllTransactions mocks base method.
func (m *MockTransactionRepository) FindAllTransactions(search string, page, pageSize int) ([]*record.TransactionRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransactions", search, page, pageSize)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllTransactions indicates an expected call of FindAllTransactions.
func (mr *MockTransactionRepositoryMockRecorder) FindAllTransactions(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactions", reflect.TypeOf((*MockTransactionRepository)(nil).FindAllTransactions), search, page, pageSize)
}

// FindByActive mocks base method.
func (m *MockTransactionRepository) FindByActive(search string, page, pageSize int) ([]*record.TransactionRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", search, page, pageSize)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockTransactionRepositoryMockRecorder) FindByActive(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockTransactionRepository)(nil).FindByActive), search, page, pageSize)
}

// FindByCardNumber mocks base method.
func (m *MockTransactionRepository) FindByCardNumber(card_number string) ([]*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumber", card_number)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockTransactionRepositoryMockRecorder) FindByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockTransactionRepository)(nil).FindByCardNumber), card_number)
}

// FindById mocks base method.
func (m *MockTransactionRepository) FindById(transaction_id int) (*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", transaction_id)
	ret0, _ := ret[0].(*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTransactionRepositoryMockRecorder) FindById(transaction_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTransactionRepository)(nil).FindById), transaction_id)
}

// FindByTrashed mocks base method.
func (m *MockTransactionRepository) FindByTrashed(search string, page, pageSize int) ([]*record.TransactionRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", search, page, pageSize)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockTransactionRepositoryMockRecorder) FindByTrashed(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockTransactionRepository)(nil).FindByTrashed), search, page, pageSize)
}

// FindTransactionByMerchantId mocks base method.
func (m *MockTransactionRepository) FindTransactionByMerchantId(merchant_id int) ([]*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransactionByMerchantId", merchant_id)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransactionByMerchantId indicates an expected call of FindTransactionByMerchantId.
func (mr *MockTransactionRepositoryMockRecorder) FindTransactionByMerchantId(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransactionByMerchantId", reflect.TypeOf((*MockTransactionRepository)(nil).FindTransactionByMerchantId), merchant_id)
}

// RestoreAllTransaction mocks base method.
func (m *MockTransactionRepository) RestoreAllTransaction() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllTransaction")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllTransaction indicates an expected call of RestoreAllTransaction.
func (mr *MockTransactionRepositoryMockRecorder) RestoreAllTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).RestoreAllTransaction))
}

// RestoreTransaction mocks base method.
func (m *MockTransactionRepository) RestoreTransaction(topup_id int) (*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTransaction", topup_id)
	ret0, _ := ret[0].(*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTransaction indicates an expected call of RestoreTransaction.
func (mr *MockTransactionRepositoryMockRecorder) RestoreTransaction(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).RestoreTransaction), topup_id)
}

// TrashedTransaction mocks base method.
func (m *MockTransactionRepository) TrashedTransaction(transaction_id int) (*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTransaction", transaction_id)
	ret0, _ := ret[0].(*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTransaction indicates an expected call of TrashedTransaction.
func (mr *MockTransactionRepositoryMockRecorder) TrashedTransaction(transaction_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).TrashedTransaction), transaction_id)
}

// UpdateTransaction mocks base method.
func (m *MockTransactionRepository) UpdateTransaction(request *requests.UpdateTransactionRequest) (*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", request)
	ret0, _ := ret[0].(*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockTransactionRepositoryMockRecorder) UpdateTransaction(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).UpdateTransaction), request)
}

// MockTransferRepository is a mock of TransferRepository interface.
type MockTransferRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransferRepositoryMockRecorder
	isgomock struct{}
}

// MockTransferRepositoryMockRecorder is the mock recorder for MockTransferRepository.
type MockTransferRepositoryMockRecorder struct {
	mock *MockTransferRepository
}

// NewMockTransferRepository creates a new mock instance.
func NewMockTransferRepository(ctrl *gomock.Controller) *MockTransferRepository {
	mock := &MockTransferRepository{ctrl: ctrl}
	mock.recorder = &MockTransferRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferRepository) EXPECT() *MockTransferRepositoryMockRecorder {
	return m.recorder
}

// CountAllTransfers mocks base method.
func (m *MockTransferRepository) CountAllTransfers() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllTransfers")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllTransfers indicates an expected call of CountAllTransfers.
func (mr *MockTransferRepositoryMockRecorder) CountAllTransfers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllTransfers", reflect.TypeOf((*MockTransferRepository)(nil).CountAllTransfers))
}

// CountTransfersByDate mocks base method.
func (m *MockTransferRepository) CountTransfersByDate(date string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTransfersByDate", date)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTransfersByDate indicates an expected call of CountTransfersByDate.
func (mr *MockTransferRepositoryMockRecorder) CountTransfersByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTransfersByDate", reflect.TypeOf((*MockTransferRepository)(nil).CountTransfersByDate), date)
}

// CreateTransfer mocks base method.
func (m *MockTransferRepository) CreateTransfer(request *requests.CreateTransferRequest) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", request)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockTransferRepositoryMockRecorder) CreateTransfer(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockTransferRepository)(nil).CreateTransfer), request)
}

// DeleteAllTransferPermanent mocks base method.
func (m *MockTransferRepository) DeleteAllTransferPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTransferPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTransferPermanent indicates an expected call of DeleteAllTransferPermanent.
func (mr *MockTransferRepositoryMockRecorder) DeleteAllTransferPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTransferPermanent", reflect.TypeOf((*MockTransferRepository)(nil).DeleteAllTransferPermanent))
}

// DeleteTransferPermanent mocks base method.
func (m *MockTransferRepository) DeleteTransferPermanent(topup_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransferPermanent", topup_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransferPermanent indicates an expected call of DeleteTransferPermanent.
func (mr *MockTransferRepositoryMockRecorder) DeleteTransferPermanent(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferPermanent", reflect.TypeOf((*MockTransferRepository)(nil).DeleteTransferPermanent), topup_id)
}

// FindAll mocks base method.
func (m *MockTransferRepository) FindAll(search string, page, pageSize int) ([]*record.TransferRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", search, page, pageSize)
	ret0, _ := ret[0].([]*record.TransferRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTransferRepositoryMockRecorder) FindAll(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTransferRepository)(nil).FindAll), search, page, pageSize)
}

// FindByActive mocks base method.
func (m *MockTransferRepository) FindByActive(search string, page, pageSize int) ([]*record.TransferRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", search, page, pageSize)
	ret0, _ := ret[0].([]*record.TransferRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockTransferRepositoryMockRecorder) FindByActive(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockTransferRepository)(nil).FindByActive), search, page, pageSize)
}

// FindById mocks base method.
func (m *MockTransferRepository) FindById(id int) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTransferRepositoryMockRecorder) FindById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTransferRepository)(nil).FindById), id)
}

// FindByTrashed mocks base method.
func (m *MockTransferRepository) FindByTrashed(search string, page, pageSize int) ([]*record.TransferRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", search, page, pageSize)
	ret0, _ := ret[0].([]*record.TransferRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockTransferRepositoryMockRecorder) FindByTrashed(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockTransferRepository)(nil).FindByTrashed), search, page, pageSize)
}

// FindTransferByTransferFrom mocks base method.
func (m *MockTransferRepository) FindTransferByTransferFrom(transfer_from string) ([]*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransferByTransferFrom", transfer_from)
	ret0, _ := ret[0].([]*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransferByTransferFrom indicates an expected call of FindTransferByTransferFrom.
func (mr *MockTransferRepositoryMockRecorder) FindTransferByTransferFrom(transfer_from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferFrom", reflect.TypeOf((*MockTransferRepository)(nil).FindTransferByTransferFrom), transfer_from)
}

// FindTransferByTransferTo mocks base method.
func (m *MockTransferRepository) FindTransferByTransferTo(transfer_to string) ([]*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransferByTransferTo", transfer_to)
	ret0, _ := ret[0].([]*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransferByTransferTo indicates an expected call of FindTransferByTransferTo.
func (mr *MockTransferRepositoryMockRecorder) FindTransferByTransferTo(transfer_to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferTo", reflect.TypeOf((*MockTransferRepository)(nil).FindTransferByTransferTo), transfer_to)
}

// RestoreAllTransfer mocks base method.
func (m *MockTransferRepository) RestoreAllTransfer() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllTransfer")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllTransfer indicates an expected call of RestoreAllTransfer.
func (mr *MockTransferRepositoryMockRecorder) RestoreAllTransfer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllTransfer", reflect.TypeOf((*MockTransferRepository)(nil).RestoreAllTransfer))
}

// RestoreTransfer mocks base method.
func (m *MockTransferRepository) RestoreTransfer(transfer_id int) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTransfer", transfer_id)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTransfer indicates an expected call of RestoreTransfer.
func (mr *MockTransferRepositoryMockRecorder) RestoreTransfer(transfer_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTransfer", reflect.TypeOf((*MockTransferRepository)(nil).RestoreTransfer), transfer_id)
}

// TrashedTransfer mocks base method.
func (m *MockTransferRepository) TrashedTransfer(transfer_id int) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTransfer", transfer_id)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTransfer indicates an expected call of TrashedTransfer.
func (mr *MockTransferRepositoryMockRecorder) TrashedTransfer(transfer_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTransfer", reflect.TypeOf((*MockTransferRepository)(nil).TrashedTransfer), transfer_id)
}

// UpdateTransfer mocks base method.
func (m *MockTransferRepository) UpdateTransfer(request *requests.UpdateTransferRequest) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransfer", request)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransfer indicates an expected call of UpdateTransfer.
func (mr *MockTransferRepositoryMockRecorder) UpdateTransfer(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransfer", reflect.TypeOf((*MockTransferRepository)(nil).UpdateTransfer), request)
}

// UpdateTransferAmount mocks base method.
func (m *MockTransferRepository) UpdateTransferAmount(request *requests.UpdateTransferAmountRequest) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransferAmount", request)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransferAmount indicates an expected call of UpdateTransferAmount.
func (mr *MockTransferRepositoryMockRecorder) UpdateTransferAmount(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransferAmount", reflect.TypeOf((*MockTransferRepository)(nil).UpdateTransferAmount), request)
}

// MockWithdrawRepository is a mock of WithdrawRepository interface.
type MockWithdrawRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawRepositoryMockRecorder
	isgomock struct{}
}

// MockWithdrawRepositoryMockRecorder is the mock recorder for MockWithdrawRepository.
type MockWithdrawRepositoryMockRecorder struct {
	mock *MockWithdrawRepository
}

// NewMockWithdrawRepository creates a new mock instance.
func NewMockWithdrawRepository(ctrl *gomock.Controller) *MockWithdrawRepository {
	mock := &MockWithdrawRepository{ctrl: ctrl}
	mock.recorder = &MockWithdrawRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawRepository) EXPECT() *MockWithdrawRepositoryMockRecorder {
	return m.recorder
}

// CountActiveByDate mocks base method.
func (m *MockWithdrawRepository) CountActiveByDate(date time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActiveByDate", date)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountActiveByDate indicates an expected call of CountActiveByDate.
func (mr *MockWithdrawRepositoryMockRecorder) CountActiveByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActiveByDate", reflect.TypeOf((*MockWithdrawRepository)(nil).CountActiveByDate), date)
}

// CreateWithdraw mocks base method.
func (m *MockWithdrawRepository) CreateWithdraw(request *requests.CreateWithdrawRequest) (*record.WithdrawRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdraw", request)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithdraw indicates an expected call of CreateWithdraw.
func (mr *MockWithdrawRepositoryMockRecorder) CreateWithdraw(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdraw", reflect.TypeOf((*MockWithdrawRepository)(nil).CreateWithdraw), request)
}

// DeleteAllWithdrawPermanent mocks base method.
func (m *MockWithdrawRepository) DeleteAllWithdrawPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllWithdrawPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllWithdrawPermanent indicates an expected call of DeleteAllWithdrawPermanent.
func (mr *MockWithdrawRepositoryMockRecorder) DeleteAllWithdrawPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllWithdrawPermanent", reflect.TypeOf((*MockWithdrawRepository)(nil).DeleteAllWithdrawPermanent))
}

// DeleteWithdrawPermanent mocks base method.
func (m *MockWithdrawRepository) DeleteWithdrawPermanent(WithdrawID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWithdrawPermanent", WithdrawID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWithdrawPermanent indicates an expected call of DeleteWithdrawPermanent.
func (mr *MockWithdrawRepositoryMockRecorder) DeleteWithdrawPermanent(WithdrawID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithdrawPermanent", reflect.TypeOf((*MockWithdrawRepository)(nil).DeleteWithdrawPermanent), WithdrawID)
}

// FindAll mocks base method.
func (m *MockWithdrawRepository) FindAll(search string, page, pageSize int) ([]*record.WithdrawRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", search, page, pageSize)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockWithdrawRepositoryMockRecorder) FindAll(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockWithdrawRepository)(nil).FindAll), search, page, pageSize)
}

// FindByActive mocks base method.
func (m *MockWithdrawRepository) FindByActive(search string, page, pageSize int) ([]*record.WithdrawRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", search, page, pageSize)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockWithdrawRepositoryMockRecorder) FindByActive(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockWithdrawRepository)(nil).FindByActive), search, page, pageSize)
}

// FindByCardNumber mocks base method.
func (m *MockWithdrawRepository) FindByCardNumber(card_number string) ([]*record.WithdrawRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumber", card_number)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockWithdrawRepositoryMockRecorder) FindByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockWithdrawRepository)(nil).FindByCardNumber), card_number)
}

// FindById mocks base method.
func (m *MockWithdrawRepository) FindById(id int) (*record.WithdrawRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockWithdrawRepositoryMockRecorder) FindById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockWithdrawRepository)(nil).FindById), id)
}

// FindByTrashed mocks base method.
func (m *MockWithdrawRepository) FindByTrashed(search string, page, pageSize int) ([]*record.WithdrawRecord, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", search, page, pageSize)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockWithdrawRepositoryMockRecorder) FindByTrashed(search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockWithdrawRepository)(nil).FindByTrashed), search, page, pageSize)
}

// RestoreAllWithdraw mocks base method.
func (m *MockWithdrawRepository) RestoreAllWithdraw() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllWithdraw")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllWithdraw indicates an expected call of RestoreAllWithdraw.
func (mr *MockWithdrawRepositoryMockRecorder) RestoreAllWithdraw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllWithdraw", reflect.TypeOf((*MockWithdrawRepository)(nil).RestoreAllWithdraw))
}

// RestoreWithdraw mocks base method.
func (m *MockWithdrawRepository) RestoreWithdraw(WithdrawID int) (*record.WithdrawRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreWithdraw", WithdrawID)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreWithdraw indicates an expected call of RestoreWithdraw.
func (mr *MockWithdrawRepositoryMockRecorder) RestoreWithdraw(WithdrawID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreWithdraw", reflect.TypeOf((*MockWithdrawRepository)(nil).RestoreWithdraw), WithdrawID)
}

// TrashedWithdraw mocks base method.
func (m *MockWithdrawRepository) TrashedWithdraw(WithdrawID int) (*record.WithdrawRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedWithdraw", WithdrawID)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedWithdraw indicates an expected call of TrashedWithdraw.
func (mr *MockWithdrawRepositoryMockRecorder) TrashedWithdraw(WithdrawID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedWithdraw", reflect.TypeOf((*MockWithdrawRepository)(nil).TrashedWithdraw), WithdrawID)
}

// UpdateWithdraw mocks base method.
func (m *MockWithdrawRepository) UpdateWithdraw(request *requests.UpdateWithdrawRequest) (*record.WithdrawRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithdraw", request)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithdraw indicates an expected call of UpdateWithdraw.
func (mr *MockWithdrawRepositoryMockRecorder) UpdateWithdraw(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithdraw", reflect.TypeOf((*MockWithdrawRepository)(nil).UpdateWithdraw), request)
}
