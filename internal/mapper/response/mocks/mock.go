// Code generated by MockGen. DO NOT EDIT.
// Source: internal/mapper/response/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/mapper/response/interfaces.go -destination=internal/mapper/response/mocks/mock.go
//

// Package mock_responsemapper is a generated GoMock package.
package mock_responsemapper

import (
	record "MamangRust/paymentgatewaygrpc/internal/domain/record"
	response "MamangRust/paymentgatewaygrpc/internal/domain/response"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCardResponseMapper is a mock of CardResponseMapper interface.
type MockCardResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockCardResponseMapperMockRecorder
	isgomock struct{}
}

// MockCardResponseMapperMockRecorder is the mock recorder for MockCardResponseMapper.
type MockCardResponseMapperMockRecorder struct {
	mock *MockCardResponseMapper
}

// NewMockCardResponseMapper creates a new mock instance.
func NewMockCardResponseMapper(ctrl *gomock.Controller) *MockCardResponseMapper {
	mock := &MockCardResponseMapper{ctrl: ctrl}
	mock.recorder = &MockCardResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardResponseMapper) EXPECT() *MockCardResponseMapperMockRecorder {
	return m.recorder
}

// ToCardResponse mocks base method.
func (m *MockCardResponseMapper) ToCardResponse(card *record.CardRecord) *response.CardResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardResponse", card)
	ret0, _ := ret[0].(*response.CardResponse)
	return ret0
}

// ToCardResponse indicates an expected call of ToCardResponse.
func (mr *MockCardResponseMapperMockRecorder) ToCardResponse(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardResponse", reflect.TypeOf((*MockCardResponseMapper)(nil).ToCardResponse), card)
}

// ToCardResponseDeleteAt mocks base method.
func (m *MockCardResponseMapper) ToCardResponseDeleteAt(card *record.CardRecord) *response.CardResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardResponseDeleteAt", card)
	ret0, _ := ret[0].(*response.CardResponseDeleteAt)
	return ret0
}

// ToCardResponseDeleteAt indicates an expected call of ToCardResponseDeleteAt.
func (mr *MockCardResponseMapperMockRecorder) ToCardResponseDeleteAt(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardResponseDeleteAt", reflect.TypeOf((*MockCardResponseMapper)(nil).ToCardResponseDeleteAt), card)
}

// ToCardsResponse mocks base method.
func (m *MockCardResponseMapper) ToCardsResponse(cards []*record.CardRecord) []*response.CardResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardsResponse", cards)
	ret0, _ := ret[0].([]*response.CardResponse)
	return ret0
}

// ToCardsResponse indicates an expected call of ToCardsResponse.
func (mr *MockCardResponseMapperMockRecorder) ToCardsResponse(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardsResponse", reflect.TypeOf((*MockCardResponseMapper)(nil).ToCardsResponse), cards)
}

// ToCardsResponseDeleteAt mocks base method.
func (m *MockCardResponseMapper) ToCardsResponseDeleteAt(cards []*record.CardRecord) []*response.CardResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardsResponseDeleteAt", cards)
	ret0, _ := ret[0].([]*response.CardResponseDeleteAt)
	return ret0
}

// ToCardsResponseDeleteAt indicates an expected call of ToCardsResponseDeleteAt.
func (mr *MockCardResponseMapperMockRecorder) ToCardsResponseDeleteAt(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardsResponseDeleteAt", reflect.TypeOf((*MockCardResponseMapper)(nil).ToCardsResponseDeleteAt), cards)
}

// ToGetMonthlyBalance mocks base method.
func (m *MockCardResponseMapper) ToGetMonthlyBalance(card *record.CardMonthBalance) *response.CardResponseMonthBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetMonthlyBalance", card)
	ret0, _ := ret[0].(*response.CardResponseMonthBalance)
	return ret0
}

// ToGetMonthlyBalance indicates an expected call of ToGetMonthlyBalance.
func (mr *MockCardResponseMapperMockRecorder) ToGetMonthlyBalance(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetMonthlyBalance", reflect.TypeOf((*MockCardResponseMapper)(nil).ToGetMonthlyBalance), card)
}

// ToGetMonthlyBalances mocks base method.
func (m *MockCardResponseMapper) ToGetMonthlyBalances(cards []*record.CardMonthBalance) []*response.CardResponseMonthBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetMonthlyBalances", cards)
	ret0, _ := ret[0].([]*response.CardResponseMonthBalance)
	return ret0
}

// ToGetMonthlyBalances indicates an expected call of ToGetMonthlyBalances.
func (mr *MockCardResponseMapperMockRecorder) ToGetMonthlyBalances(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetMonthlyBalances", reflect.TypeOf((*MockCardResponseMapper)(nil).ToGetMonthlyBalances), cards)
}

// ToGetYearlyBalance mocks base method.
func (m *MockCardResponseMapper) ToGetYearlyBalance(card *record.CardYearlyBalance) *response.CardResponseYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetYearlyBalance", card)
	ret0, _ := ret[0].(*response.CardResponseYearlyBalance)
	return ret0
}

// ToGetYearlyBalance indicates an expected call of ToGetYearlyBalance.
func (mr *MockCardResponseMapperMockRecorder) ToGetYearlyBalance(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetYearlyBalance", reflect.TypeOf((*MockCardResponseMapper)(nil).ToGetYearlyBalance), card)
}

// ToGetYearlyBalances mocks base method.
func (m *MockCardResponseMapper) ToGetYearlyBalances(cards []*record.CardYearlyBalance) []*response.CardResponseYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetYearlyBalances", cards)
	ret0, _ := ret[0].([]*response.CardResponseYearlyBalance)
	return ret0
}

// ToGetYearlyBalances indicates an expected call of ToGetYearlyBalances.
func (mr *MockCardResponseMapperMockRecorder) ToGetYearlyBalances(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetYearlyBalances", reflect.TypeOf((*MockCardResponseMapper)(nil).ToGetYearlyBalances), cards)
}

// MockUserResponseMapper is a mock of UserResponseMapper interface.
type MockUserResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockUserResponseMapperMockRecorder
	isgomock struct{}
}

// MockUserResponseMapperMockRecorder is the mock recorder for MockUserResponseMapper.
type MockUserResponseMapperMockRecorder struct {
	mock *MockUserResponseMapper
}

// NewMockUserResponseMapper creates a new mock instance.
func NewMockUserResponseMapper(ctrl *gomock.Controller) *MockUserResponseMapper {
	mock := &MockUserResponseMapper{ctrl: ctrl}
	mock.recorder = &MockUserResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserResponseMapper) EXPECT() *MockUserResponseMapperMockRecorder {
	return m.recorder
}

// ToUserResponse mocks base method.
func (m *MockUserResponseMapper) ToUserResponse(user *record.UserRecord) *response.UserResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserResponse", user)
	ret0, _ := ret[0].(*response.UserResponse)
	return ret0
}

// ToUserResponse indicates an expected call of ToUserResponse.
func (mr *MockUserResponseMapperMockRecorder) ToUserResponse(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserResponse", reflect.TypeOf((*MockUserResponseMapper)(nil).ToUserResponse), user)
}

// ToUserResponseDeleteAt mocks base method.
func (m *MockUserResponseMapper) ToUserResponseDeleteAt(user *record.UserRecord) *response.UserResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserResponseDeleteAt", user)
	ret0, _ := ret[0].(*response.UserResponseDeleteAt)
	return ret0
}

// ToUserResponseDeleteAt indicates an expected call of ToUserResponseDeleteAt.
func (mr *MockUserResponseMapperMockRecorder) ToUserResponseDeleteAt(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserResponseDeleteAt", reflect.TypeOf((*MockUserResponseMapper)(nil).ToUserResponseDeleteAt), user)
}

// ToUsersResponse mocks base method.
func (m *MockUserResponseMapper) ToUsersResponse(users []*record.UserRecord) []*response.UserResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUsersResponse", users)
	ret0, _ := ret[0].([]*response.UserResponse)
	return ret0
}

// ToUsersResponse indicates an expected call of ToUsersResponse.
func (mr *MockUserResponseMapperMockRecorder) ToUsersResponse(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUsersResponse", reflect.TypeOf((*MockUserResponseMapper)(nil).ToUsersResponse), users)
}

// ToUsersResponseDeleteAt mocks base method.
func (m *MockUserResponseMapper) ToUsersResponseDeleteAt(users []*record.UserRecord) []*response.UserResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUsersResponseDeleteAt", users)
	ret0, _ := ret[0].([]*response.UserResponseDeleteAt)
	return ret0
}

// ToUsersResponseDeleteAt indicates an expected call of ToUsersResponseDeleteAt.
func (mr *MockUserResponseMapperMockRecorder) ToUsersResponseDeleteAt(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUsersResponseDeleteAt", reflect.TypeOf((*MockUserResponseMapper)(nil).ToUsersResponseDeleteAt), users)
}

// MockRoleResponseMapper is a mock of RoleResponseMapper interface.
type MockRoleResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockRoleResponseMapperMockRecorder
	isgomock struct{}
}

// MockRoleResponseMapperMockRecorder is the mock recorder for MockRoleResponseMapper.
type MockRoleResponseMapperMockRecorder struct {
	mock *MockRoleResponseMapper
}

// NewMockRoleResponseMapper creates a new mock instance.
func NewMockRoleResponseMapper(ctrl *gomock.Controller) *MockRoleResponseMapper {
	mock := &MockRoleResponseMapper{ctrl: ctrl}
	mock.recorder = &MockRoleResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleResponseMapper) EXPECT() *MockRoleResponseMapperMockRecorder {
	return m.recorder
}

// ToRoleResponse mocks base method.
func (m *MockRoleResponseMapper) ToRoleResponse(role *record.RoleRecord) *response.RoleResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRoleResponse", role)
	ret0, _ := ret[0].(*response.RoleResponse)
	return ret0
}

// ToRoleResponse indicates an expected call of ToRoleResponse.
func (mr *MockRoleResponseMapperMockRecorder) ToRoleResponse(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRoleResponse", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToRoleResponse), role)
}

// ToRoleResponseDeleteAt mocks base method.
func (m *MockRoleResponseMapper) ToRoleResponseDeleteAt(role *record.RoleRecord) *response.RoleResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRoleResponseDeleteAt", role)
	ret0, _ := ret[0].(*response.RoleResponseDeleteAt)
	return ret0
}

// ToRoleResponseDeleteAt indicates an expected call of ToRoleResponseDeleteAt.
func (mr *MockRoleResponseMapperMockRecorder) ToRoleResponseDeleteAt(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRoleResponseDeleteAt", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToRoleResponseDeleteAt), role)
}

// ToRolesResponse mocks base method.
func (m *MockRoleResponseMapper) ToRolesResponse(roles []*record.RoleRecord) []*response.RoleResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRolesResponse", roles)
	ret0, _ := ret[0].([]*response.RoleResponse)
	return ret0
}

// ToRolesResponse indicates an expected call of ToRolesResponse.
func (mr *MockRoleResponseMapperMockRecorder) ToRolesResponse(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRolesResponse", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToRolesResponse), roles)
}

// ToRolesResponseDeleteAt mocks base method.
func (m *MockRoleResponseMapper) ToRolesResponseDeleteAt(roles []*record.RoleRecord) []*response.RoleResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRolesResponseDeleteAt", roles)
	ret0, _ := ret[0].([]*response.RoleResponseDeleteAt)
	return ret0
}

// ToRolesResponseDeleteAt indicates an expected call of ToRolesResponseDeleteAt.
func (mr *MockRoleResponseMapperMockRecorder) ToRolesResponseDeleteAt(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRolesResponseDeleteAt", reflect.TypeOf((*MockRoleResponseMapper)(nil).ToRolesResponseDeleteAt), roles)
}

// MockRefreshTokenResponseMapper is a mock of RefreshTokenResponseMapper interface.
type MockRefreshTokenResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenResponseMapperMockRecorder
	isgomock struct{}
}

// MockRefreshTokenResponseMapperMockRecorder is the mock recorder for MockRefreshTokenResponseMapper.
type MockRefreshTokenResponseMapperMockRecorder struct {
	mock *MockRefreshTokenResponseMapper
}

// NewMockRefreshTokenResponseMapper creates a new mock instance.
func NewMockRefreshTokenResponseMapper(ctrl *gomock.Controller) *MockRefreshTokenResponseMapper {
	mock := &MockRefreshTokenResponseMapper{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenResponseMapper) EXPECT() *MockRefreshTokenResponseMapperMockRecorder {
	return m.recorder
}

// ToRefreshTokenResponse mocks base method.
func (m *MockRefreshTokenResponseMapper) ToRefreshTokenResponse(refresh *record.RefreshTokenRecord) *response.RefreshTokenResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRefreshTokenResponse", refresh)
	ret0, _ := ret[0].(*response.RefreshTokenResponse)
	return ret0
}

// ToRefreshTokenResponse indicates an expected call of ToRefreshTokenResponse.
func (mr *MockRefreshTokenResponseMapperMockRecorder) ToRefreshTokenResponse(refresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRefreshTokenResponse", reflect.TypeOf((*MockRefreshTokenResponseMapper)(nil).ToRefreshTokenResponse), refresh)
}

// ToRefreshTokenResponses mocks base method.
func (m *MockRefreshTokenResponseMapper) ToRefreshTokenResponses(refreshs []*record.RefreshTokenRecord) []*response.RefreshTokenResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRefreshTokenResponses", refreshs)
	ret0, _ := ret[0].([]*response.RefreshTokenResponse)
	return ret0
}

// ToRefreshTokenResponses indicates an expected call of ToRefreshTokenResponses.
func (mr *MockRefreshTokenResponseMapperMockRecorder) ToRefreshTokenResponses(refreshs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRefreshTokenResponses", reflect.TypeOf((*MockRefreshTokenResponseMapper)(nil).ToRefreshTokenResponses), refreshs)
}

// MockSaldoResponseMapper is a mock of SaldoResponseMapper interface.
type MockSaldoResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockSaldoResponseMapperMockRecorder
	isgomock struct{}
}

// MockSaldoResponseMapperMockRecorder is the mock recorder for MockSaldoResponseMapper.
type MockSaldoResponseMapperMockRecorder struct {
	mock *MockSaldoResponseMapper
}

// NewMockSaldoResponseMapper creates a new mock instance.
func NewMockSaldoResponseMapper(ctrl *gomock.Controller) *MockSaldoResponseMapper {
	mock := &MockSaldoResponseMapper{ctrl: ctrl}
	mock.recorder = &MockSaldoResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaldoResponseMapper) EXPECT() *MockSaldoResponseMapperMockRecorder {
	return m.recorder
}

// ToSaldoResponse mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoResponse(saldo *record.SaldoRecord) *response.SaldoResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoResponse", saldo)
	ret0, _ := ret[0].(*response.SaldoResponse)
	return ret0
}

// ToSaldoResponse indicates an expected call of ToSaldoResponse.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoResponse(saldo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoResponse", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoResponse), saldo)
}

// ToSaldoResponseDeleteAt mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoResponseDeleteAt(saldo *record.SaldoRecord) *response.SaldoResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoResponseDeleteAt", saldo)
	ret0, _ := ret[0].(*response.SaldoResponseDeleteAt)
	return ret0
}

// ToSaldoResponseDeleteAt indicates an expected call of ToSaldoResponseDeleteAt.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoResponseDeleteAt(saldo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoResponseDeleteAt", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoResponseDeleteAt), saldo)
}

// ToSaldoResponses mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoResponses(saldos []*record.SaldoRecord) []*response.SaldoResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoResponses", saldos)
	ret0, _ := ret[0].([]*response.SaldoResponse)
	return ret0
}

// ToSaldoResponses indicates an expected call of ToSaldoResponses.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoResponses(saldos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoResponses", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoResponses), saldos)
}

// ToSaldoResponsesDeleteAt mocks base method.
func (m *MockSaldoResponseMapper) ToSaldoResponsesDeleteAt(saldos []*record.SaldoRecord) []*response.SaldoResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoResponsesDeleteAt", saldos)
	ret0, _ := ret[0].([]*response.SaldoResponseDeleteAt)
	return ret0
}

// ToSaldoResponsesDeleteAt indicates an expected call of ToSaldoResponsesDeleteAt.
func (mr *MockSaldoResponseMapperMockRecorder) ToSaldoResponsesDeleteAt(saldos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoResponsesDeleteAt", reflect.TypeOf((*MockSaldoResponseMapper)(nil).ToSaldoResponsesDeleteAt), saldos)
}

// MockTopupResponseMapper is a mock of TopupResponseMapper interface.
type MockTopupResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockTopupResponseMapperMockRecorder
	isgomock struct{}
}

// MockTopupResponseMapperMockRecorder is the mock recorder for MockTopupResponseMapper.
type MockTopupResponseMapperMockRecorder struct {
	mock *MockTopupResponseMapper
}

// NewMockTopupResponseMapper creates a new mock instance.
func NewMockTopupResponseMapper(ctrl *gomock.Controller) *MockTopupResponseMapper {
	mock := &MockTopupResponseMapper{ctrl: ctrl}
	mock.recorder = &MockTopupResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopupResponseMapper) EXPECT() *MockTopupResponseMapperMockRecorder {
	return m.recorder
}

// ToTopupResponse mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponse(topup *record.TopupRecord) *response.TopupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponse", topup)
	ret0, _ := ret[0].(*response.TopupResponse)
	return ret0
}

// ToTopupResponse indicates an expected call of ToTopupResponse.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponse(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponse", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponse), topup)
}

// ToTopupResponseDeleteAt mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponseDeleteAt(topup *record.TopupRecord) *response.TopupResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponseDeleteAt", topup)
	ret0, _ := ret[0].(*response.TopupResponseDeleteAt)
	return ret0
}

// ToTopupResponseDeleteAt indicates an expected call of ToTopupResponseDeleteAt.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponseDeleteAt(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponseDeleteAt", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponseDeleteAt), topup)
}

// ToTopupResponses mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponses(topups []*record.TopupRecord) []*response.TopupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponses", topups)
	ret0, _ := ret[0].([]*response.TopupResponse)
	return ret0
}

// ToTopupResponses indicates an expected call of ToTopupResponses.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponses(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponses", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponses), topups)
}

// ToTopupResponsesDeleteAt mocks base method.
func (m *MockTopupResponseMapper) ToTopupResponsesDeleteAt(topups []*record.TopupRecord) []*response.TopupResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupResponsesDeleteAt", topups)
	ret0, _ := ret[0].([]*response.TopupResponseDeleteAt)
	return ret0
}

// ToTopupResponsesDeleteAt indicates an expected call of ToTopupResponsesDeleteAt.
func (mr *MockTopupResponseMapperMockRecorder) ToTopupResponsesDeleteAt(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupResponsesDeleteAt", reflect.TypeOf((*MockTopupResponseMapper)(nil).ToTopupResponsesDeleteAt), topups)
}

// MockTransactionResponseMapper is a mock of TransactionResponseMapper interface.
type MockTransactionResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionResponseMapperMockRecorder
	isgomock struct{}
}

// MockTransactionResponseMapperMockRecorder is the mock recorder for MockTransactionResponseMapper.
type MockTransactionResponseMapperMockRecorder struct {
	mock *MockTransactionResponseMapper
}

// NewMockTransactionResponseMapper creates a new mock instance.
func NewMockTransactionResponseMapper(ctrl *gomock.Controller) *MockTransactionResponseMapper {
	mock := &MockTransactionResponseMapper{ctrl: ctrl}
	mock.recorder = &MockTransactionResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionResponseMapper) EXPECT() *MockTransactionResponseMapperMockRecorder {
	return m.recorder
}

// ToTransactionResponse mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionResponse(transaction *record.TransactionRecord) *response.TransactionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionResponse", transaction)
	ret0, _ := ret[0].(*response.TransactionResponse)
	return ret0
}

// ToTransactionResponse indicates an expected call of ToTransactionResponse.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionResponse(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionResponse", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionResponse), transaction)
}

// ToTransactionResponseDeleteAt mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionResponseDeleteAt(transaction *record.TransactionRecord) *response.TransactionResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionResponseDeleteAt", transaction)
	ret0, _ := ret[0].(*response.TransactionResponseDeleteAt)
	return ret0
}

// ToTransactionResponseDeleteAt indicates an expected call of ToTransactionResponseDeleteAt.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionResponseDeleteAt(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionResponseDeleteAt", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionResponseDeleteAt), transaction)
}

// ToTransactionsResponse mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionsResponse(transactions []*record.TransactionRecord) []*response.TransactionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsResponse", transactions)
	ret0, _ := ret[0].([]*response.TransactionResponse)
	return ret0
}

// ToTransactionsResponse indicates an expected call of ToTransactionsResponse.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionsResponse(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsResponse", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionsResponse), transactions)
}

// ToTransactionsResponseDeleteAt mocks base method.
func (m *MockTransactionResponseMapper) ToTransactionsResponseDeleteAt(transactions []*record.TransactionRecord) []*response.TransactionResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsResponseDeleteAt", transactions)
	ret0, _ := ret[0].([]*response.TransactionResponseDeleteAt)
	return ret0
}

// ToTransactionsResponseDeleteAt indicates an expected call of ToTransactionsResponseDeleteAt.
func (mr *MockTransactionResponseMapperMockRecorder) ToTransactionsResponseDeleteAt(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsResponseDeleteAt", reflect.TypeOf((*MockTransactionResponseMapper)(nil).ToTransactionsResponseDeleteAt), transactions)
}

// MockTransferResponseMapper is a mock of TransferResponseMapper interface.
type MockTransferResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockTransferResponseMapperMockRecorder
	isgomock struct{}
}

// MockTransferResponseMapperMockRecorder is the mock recorder for MockTransferResponseMapper.
type MockTransferResponseMapperMockRecorder struct {
	mock *MockTransferResponseMapper
}

// NewMockTransferResponseMapper creates a new mock instance.
func NewMockTransferResponseMapper(ctrl *gomock.Controller) *MockTransferResponseMapper {
	mock := &MockTransferResponseMapper{ctrl: ctrl}
	mock.recorder = &MockTransferResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferResponseMapper) EXPECT() *MockTransferResponseMapperMockRecorder {
	return m.recorder
}

// ToTransferResponse mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponse(transfer *record.TransferRecord) *response.TransferResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponse", transfer)
	ret0, _ := ret[0].(*response.TransferResponse)
	return ret0
}

// ToTransferResponse indicates an expected call of ToTransferResponse.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponse(transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponse", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponse), transfer)
}

// ToTransferResponseDeleteAt mocks base method.
func (m *MockTransferResponseMapper) ToTransferResponseDeleteAt(transfer *record.TransferRecord) *response.TransferResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferResponseDeleteAt", transfer)
	ret0, _ := ret[0].(*response.TransferResponseDeleteAt)
	return ret0
}

// ToTransferResponseDeleteAt indicates an expected call of ToTransferResponseDeleteAt.
func (mr *MockTransferResponseMapperMockRecorder) ToTransferResponseDeleteAt(transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferResponseDeleteAt", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransferResponseDeleteAt), transfer)
}

// ToTransfersResponse mocks base method.
func (m *MockTransferResponseMapper) ToTransfersResponse(transfers []*record.TransferRecord) []*response.TransferResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransfersResponse", transfers)
	ret0, _ := ret[0].([]*response.TransferResponse)
	return ret0
}

// ToTransfersResponse indicates an expected call of ToTransfersResponse.
func (mr *MockTransferResponseMapperMockRecorder) ToTransfersResponse(transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransfersResponse", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransfersResponse), transfers)
}

// ToTransfersResponseDeleteAt mocks base method.
func (m *MockTransferResponseMapper) ToTransfersResponseDeleteAt(transfers []*record.TransferRecord) []*response.TransferResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransfersResponseDeleteAt", transfers)
	ret0, _ := ret[0].([]*response.TransferResponseDeleteAt)
	return ret0
}

// ToTransfersResponseDeleteAt indicates an expected call of ToTransfersResponseDeleteAt.
func (mr *MockTransferResponseMapperMockRecorder) ToTransfersResponseDeleteAt(transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransfersResponseDeleteAt", reflect.TypeOf((*MockTransferResponseMapper)(nil).ToTransfersResponseDeleteAt), transfers)
}

// MockWithdrawResponseMapper is a mock of WithdrawResponseMapper interface.
type MockWithdrawResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawResponseMapperMockRecorder
	isgomock struct{}
}

// MockWithdrawResponseMapperMockRecorder is the mock recorder for MockWithdrawResponseMapper.
type MockWithdrawResponseMapperMockRecorder struct {
	mock *MockWithdrawResponseMapper
}

// NewMockWithdrawResponseMapper creates a new mock instance.
func NewMockWithdrawResponseMapper(ctrl *gomock.Controller) *MockWithdrawResponseMapper {
	mock := &MockWithdrawResponseMapper{ctrl: ctrl}
	mock.recorder = &MockWithdrawResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawResponseMapper) EXPECT() *MockWithdrawResponseMapperMockRecorder {
	return m.recorder
}

// ToWithdrawResponse mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawResponse(withdraw *record.WithdrawRecord) *response.WithdrawResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawResponse", withdraw)
	ret0, _ := ret[0].(*response.WithdrawResponse)
	return ret0
}

// ToWithdrawResponse indicates an expected call of ToWithdrawResponse.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawResponse(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawResponse", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawResponse), withdraw)
}

// ToWithdrawResponseDeleteAt mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawResponseDeleteAt(withdraw *record.WithdrawRecord) *response.WithdrawResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawResponseDeleteAt", withdraw)
	ret0, _ := ret[0].(*response.WithdrawResponseDeleteAt)
	return ret0
}

// ToWithdrawResponseDeleteAt indicates an expected call of ToWithdrawResponseDeleteAt.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawResponseDeleteAt(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawResponseDeleteAt", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawResponseDeleteAt), withdraw)
}

// ToWithdrawsResponse mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawsResponse(withdraws []*record.WithdrawRecord) []*response.WithdrawResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsResponse", withdraws)
	ret0, _ := ret[0].([]*response.WithdrawResponse)
	return ret0
}

// ToWithdrawsResponse indicates an expected call of ToWithdrawsResponse.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawsResponse(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsResponse", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawsResponse), withdraws)
}

// ToWithdrawsResponseDeleteAt mocks base method.
func (m *MockWithdrawResponseMapper) ToWithdrawsResponseDeleteAt(withdraws []*record.WithdrawRecord) []*response.WithdrawResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsResponseDeleteAt", withdraws)
	ret0, _ := ret[0].([]*response.WithdrawResponseDeleteAt)
	return ret0
}

// ToWithdrawsResponseDeleteAt indicates an expected call of ToWithdrawsResponseDeleteAt.
func (mr *MockWithdrawResponseMapperMockRecorder) ToWithdrawsResponseDeleteAt(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsResponseDeleteAt", reflect.TypeOf((*MockWithdrawResponseMapper)(nil).ToWithdrawsResponseDeleteAt), withdraws)
}

// MockMerchantResponseMapper is a mock of MerchantResponseMapper interface.
type MockMerchantResponseMapper struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantResponseMapperMockRecorder
	isgomock struct{}
}

// MockMerchantResponseMapperMockRecorder is the mock recorder for MockMerchantResponseMapper.
type MockMerchantResponseMapperMockRecorder struct {
	mock *MockMerchantResponseMapper
}

// NewMockMerchantResponseMapper creates a new mock instance.
func NewMockMerchantResponseMapper(ctrl *gomock.Controller) *MockMerchantResponseMapper {
	mock := &MockMerchantResponseMapper{ctrl: ctrl}
	mock.recorder = &MockMerchantResponseMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantResponseMapper) EXPECT() *MockMerchantResponseMapperMockRecorder {
	return m.recorder
}

// ToMerchantResponse mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantResponse(merchant *record.MerchantRecord) *response.MerchantResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantResponse", merchant)
	ret0, _ := ret[0].(*response.MerchantResponse)
	return ret0
}

// ToMerchantResponse indicates an expected call of ToMerchantResponse.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantResponse(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantResponse", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantResponse), merchant)
}

// ToMerchantResponseDeleteAt mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantResponseDeleteAt(merchant *record.MerchantRecord) *response.MerchantResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantResponseDeleteAt", merchant)
	ret0, _ := ret[0].(*response.MerchantResponseDeleteAt)
	return ret0
}

// ToMerchantResponseDeleteAt indicates an expected call of ToMerchantResponseDeleteAt.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantResponseDeleteAt(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantResponseDeleteAt", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantResponseDeleteAt), merchant)
}

// ToMerchantsResponse mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantsResponse(merchants []*record.MerchantRecord) []*response.MerchantResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsResponse", merchants)
	ret0, _ := ret[0].([]*response.MerchantResponse)
	return ret0
}

// ToMerchantsResponse indicates an expected call of ToMerchantsResponse.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantsResponse(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsResponse", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantsResponse), merchants)
}

// ToMerchantsResponseDeleteAt mocks base method.
func (m *MockMerchantResponseMapper) ToMerchantsResponseDeleteAt(merchants []*record.MerchantRecord) []*response.MerchantResponseDeleteAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsResponseDeleteAt", merchants)
	ret0, _ := ret[0].([]*response.MerchantResponseDeleteAt)
	return ret0
}

// ToMerchantsResponseDeleteAt indicates an expected call of ToMerchantsResponseDeleteAt.
func (mr *MockMerchantResponseMapperMockRecorder) ToMerchantsResponseDeleteAt(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsResponseDeleteAt", reflect.TypeOf((*MockMerchantResponseMapper)(nil).ToMerchantsResponseDeleteAt), merchants)
}
