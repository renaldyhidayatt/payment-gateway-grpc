// Code generated by MockGen. DO NOT EDIT.
// Source: internal/mapper/record/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/mapper/record/interfaces.go -destination=internal/mapper/record/mocks/mock.go
//

// Package mock_recordmapper is a generated GoMock package.
package mock_recordmapper

import (
	record "MamangRust/paymentgatewaygrpc/internal/domain/record"
	db "MamangRust/paymentgatewaygrpc/pkg/database/schema"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRecordMapping is a mock of UserRecordMapping interface.
type MockUserRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockUserRecordMappingMockRecorder
	isgomock struct{}
}

// MockUserRecordMappingMockRecorder is the mock recorder for MockUserRecordMapping.
type MockUserRecordMappingMockRecorder struct {
	mock *MockUserRecordMapping
}

// NewMockUserRecordMapping creates a new mock instance.
func NewMockUserRecordMapping(ctrl *gomock.Controller) *MockUserRecordMapping {
	mock := &MockUserRecordMapping{ctrl: ctrl}
	mock.recorder = &MockUserRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRecordMapping) EXPECT() *MockUserRecordMappingMockRecorder {
	return m.recorder
}

// ToUserRecord mocks base method.
func (m *MockUserRecordMapping) ToUserRecord(user *db.User) *record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserRecord", user)
	ret0, _ := ret[0].(*record.UserRecord)
	return ret0
}

// ToUserRecord indicates an expected call of ToUserRecord.
func (mr *MockUserRecordMappingMockRecorder) ToUserRecord(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserRecord", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUserRecord), user)
}

// ToUserRecordActivePagination mocks base method.
func (m *MockUserRecordMapping) ToUserRecordActivePagination(user *db.GetActiveUsersWithPaginationRow) *record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserRecordActivePagination", user)
	ret0, _ := ret[0].(*record.UserRecord)
	return ret0
}

// ToUserRecordActivePagination indicates an expected call of ToUserRecordActivePagination.
func (mr *MockUserRecordMappingMockRecorder) ToUserRecordActivePagination(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserRecordActivePagination", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUserRecordActivePagination), user)
}

// ToUserRecordPagination mocks base method.
func (m *MockUserRecordMapping) ToUserRecordPagination(user *db.GetUsersWithPaginationRow) *record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserRecordPagination", user)
	ret0, _ := ret[0].(*record.UserRecord)
	return ret0
}

// ToUserRecordPagination indicates an expected call of ToUserRecordPagination.
func (mr *MockUserRecordMappingMockRecorder) ToUserRecordPagination(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserRecordPagination", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUserRecordPagination), user)
}

// ToUserRecordTrashedPagination mocks base method.
func (m *MockUserRecordMapping) ToUserRecordTrashedPagination(user *db.GetTrashedUsersWithPaginationRow) *record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserRecordTrashedPagination", user)
	ret0, _ := ret[0].(*record.UserRecord)
	return ret0
}

// ToUserRecordTrashedPagination indicates an expected call of ToUserRecordTrashedPagination.
func (mr *MockUserRecordMappingMockRecorder) ToUserRecordTrashedPagination(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserRecordTrashedPagination", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUserRecordTrashedPagination), user)
}

// ToUsersRecordActivePagination mocks base method.
func (m *MockUserRecordMapping) ToUsersRecordActivePagination(users []*db.GetActiveUsersWithPaginationRow) []*record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUsersRecordActivePagination", users)
	ret0, _ := ret[0].([]*record.UserRecord)
	return ret0
}

// ToUsersRecordActivePagination indicates an expected call of ToUsersRecordActivePagination.
func (mr *MockUserRecordMappingMockRecorder) ToUsersRecordActivePagination(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUsersRecordActivePagination", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUsersRecordActivePagination), users)
}

// ToUsersRecordPagination mocks base method.
func (m *MockUserRecordMapping) ToUsersRecordPagination(users []*db.GetUsersWithPaginationRow) []*record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUsersRecordPagination", users)
	ret0, _ := ret[0].([]*record.UserRecord)
	return ret0
}

// ToUsersRecordPagination indicates an expected call of ToUsersRecordPagination.
func (mr *MockUserRecordMappingMockRecorder) ToUsersRecordPagination(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUsersRecordPagination", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUsersRecordPagination), users)
}

// ToUsersRecordTrashedPagination mocks base method.
func (m *MockUserRecordMapping) ToUsersRecordTrashedPagination(users []*db.GetTrashedUsersWithPaginationRow) []*record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUsersRecordTrashedPagination", users)
	ret0, _ := ret[0].([]*record.UserRecord)
	return ret0
}

// ToUsersRecordTrashedPagination indicates an expected call of ToUsersRecordTrashedPagination.
func (mr *MockUserRecordMappingMockRecorder) ToUsersRecordTrashedPagination(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUsersRecordTrashedPagination", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUsersRecordTrashedPagination), users)
}

// MockRoleRecordMapping is a mock of RoleRecordMapping interface.
type MockRoleRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRecordMappingMockRecorder
	isgomock struct{}
}

// MockRoleRecordMappingMockRecorder is the mock recorder for MockRoleRecordMapping.
type MockRoleRecordMappingMockRecorder struct {
	mock *MockRoleRecordMapping
}

// NewMockRoleRecordMapping creates a new mock instance.
func NewMockRoleRecordMapping(ctrl *gomock.Controller) *MockRoleRecordMapping {
	mock := &MockRoleRecordMapping{ctrl: ctrl}
	mock.recorder = &MockRoleRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRecordMapping) EXPECT() *MockRoleRecordMappingMockRecorder {
	return m.recorder
}

// ToRoleRecord mocks base method.
func (m *MockRoleRecordMapping) ToRoleRecord(role *db.Role) *record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRoleRecord", role)
	ret0, _ := ret[0].(*record.RoleRecord)
	return ret0
}

// ToRoleRecord indicates an expected call of ToRoleRecord.
func (mr *MockRoleRecordMappingMockRecorder) ToRoleRecord(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRoleRecord", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRoleRecord), role)
}

// ToRoleRecordActive mocks base method.
func (m *MockRoleRecordMapping) ToRoleRecordActive(role *db.GetActiveRolesRow) *record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRoleRecordActive", role)
	ret0, _ := ret[0].(*record.RoleRecord)
	return ret0
}

// ToRoleRecordActive indicates an expected call of ToRoleRecordActive.
func (mr *MockRoleRecordMappingMockRecorder) ToRoleRecordActive(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRoleRecordActive", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRoleRecordActive), role)
}

// ToRoleRecordAll mocks base method.
func (m *MockRoleRecordMapping) ToRoleRecordAll(role *db.GetRolesRow) *record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRoleRecordAll", role)
	ret0, _ := ret[0].(*record.RoleRecord)
	return ret0
}

// ToRoleRecordAll indicates an expected call of ToRoleRecordAll.
func (mr *MockRoleRecordMappingMockRecorder) ToRoleRecordAll(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRoleRecordAll", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRoleRecordAll), role)
}

// ToRoleRecordTrashed mocks base method.
func (m *MockRoleRecordMapping) ToRoleRecordTrashed(role *db.GetTrashedRolesRow) *record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRoleRecordTrashed", role)
	ret0, _ := ret[0].(*record.RoleRecord)
	return ret0
}

// ToRoleRecordTrashed indicates an expected call of ToRoleRecordTrashed.
func (mr *MockRoleRecordMappingMockRecorder) ToRoleRecordTrashed(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRoleRecordTrashed", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRoleRecordTrashed), role)
}

// ToRolesRecord mocks base method.
func (m *MockRoleRecordMapping) ToRolesRecord(roles []*db.Role) []*record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRolesRecord", roles)
	ret0, _ := ret[0].([]*record.RoleRecord)
	return ret0
}

// ToRolesRecord indicates an expected call of ToRolesRecord.
func (mr *MockRoleRecordMappingMockRecorder) ToRolesRecord(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRolesRecord", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRolesRecord), roles)
}

// ToRolesRecordActive mocks base method.
func (m *MockRoleRecordMapping) ToRolesRecordActive(roles []*db.GetActiveRolesRow) []*record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRolesRecordActive", roles)
	ret0, _ := ret[0].([]*record.RoleRecord)
	return ret0
}

// ToRolesRecordActive indicates an expected call of ToRolesRecordActive.
func (mr *MockRoleRecordMappingMockRecorder) ToRolesRecordActive(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRolesRecordActive", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRolesRecordActive), roles)
}

// ToRolesRecordAll mocks base method.
func (m *MockRoleRecordMapping) ToRolesRecordAll(roles []*db.GetRolesRow) []*record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRolesRecordAll", roles)
	ret0, _ := ret[0].([]*record.RoleRecord)
	return ret0
}

// ToRolesRecordAll indicates an expected call of ToRolesRecordAll.
func (mr *MockRoleRecordMappingMockRecorder) ToRolesRecordAll(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRolesRecordAll", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRolesRecordAll), roles)
}

// ToRolesRecordTrashed mocks base method.
func (m *MockRoleRecordMapping) ToRolesRecordTrashed(roles []*db.GetTrashedRolesRow) []*record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRolesRecordTrashed", roles)
	ret0, _ := ret[0].([]*record.RoleRecord)
	return ret0
}

// ToRolesRecordTrashed indicates an expected call of ToRolesRecordTrashed.
func (mr *MockRoleRecordMappingMockRecorder) ToRolesRecordTrashed(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRolesRecordTrashed", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRolesRecordTrashed), roles)
}

// MockUserRoleRecordMapping is a mock of UserRoleRecordMapping interface.
type MockUserRoleRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoleRecordMappingMockRecorder
	isgomock struct{}
}

// MockUserRoleRecordMappingMockRecorder is the mock recorder for MockUserRoleRecordMapping.
type MockUserRoleRecordMappingMockRecorder struct {
	mock *MockUserRoleRecordMapping
}

// NewMockUserRoleRecordMapping creates a new mock instance.
func NewMockUserRoleRecordMapping(ctrl *gomock.Controller) *MockUserRoleRecordMapping {
	mock := &MockUserRoleRecordMapping{ctrl: ctrl}
	mock.recorder = &MockUserRoleRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRoleRecordMapping) EXPECT() *MockUserRoleRecordMappingMockRecorder {
	return m.recorder
}

// ToUserRoleRecord mocks base method.
func (m *MockUserRoleRecordMapping) ToUserRoleRecord(userRole *db.UserRole) *record.UserRoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserRoleRecord", userRole)
	ret0, _ := ret[0].(*record.UserRoleRecord)
	return ret0
}

// ToUserRoleRecord indicates an expected call of ToUserRoleRecord.
func (mr *MockUserRoleRecordMappingMockRecorder) ToUserRoleRecord(userRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserRoleRecord", reflect.TypeOf((*MockUserRoleRecordMapping)(nil).ToUserRoleRecord), userRole)
}

// MockRefreshTokenRecordMapping is a mock of RefreshTokenRecordMapping interface.
type MockRefreshTokenRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenRecordMappingMockRecorder
	isgomock struct{}
}

// MockRefreshTokenRecordMappingMockRecorder is the mock recorder for MockRefreshTokenRecordMapping.
type MockRefreshTokenRecordMappingMockRecorder struct {
	mock *MockRefreshTokenRecordMapping
}

// NewMockRefreshTokenRecordMapping creates a new mock instance.
func NewMockRefreshTokenRecordMapping(ctrl *gomock.Controller) *MockRefreshTokenRecordMapping {
	mock := &MockRefreshTokenRecordMapping{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenRecordMapping) EXPECT() *MockRefreshTokenRecordMappingMockRecorder {
	return m.recorder
}

// ToRefreshTokenRecord mocks base method.
func (m *MockRefreshTokenRecordMapping) ToRefreshTokenRecord(refreshToken *db.RefreshToken) *record.RefreshTokenRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRefreshTokenRecord", refreshToken)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	return ret0
}

// ToRefreshTokenRecord indicates an expected call of ToRefreshTokenRecord.
func (mr *MockRefreshTokenRecordMappingMockRecorder) ToRefreshTokenRecord(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRefreshTokenRecord", reflect.TypeOf((*MockRefreshTokenRecordMapping)(nil).ToRefreshTokenRecord), refreshToken)
}

// ToRefreshTokensRecord mocks base method.
func (m *MockRefreshTokenRecordMapping) ToRefreshTokensRecord(refreshTokens []*db.RefreshToken) []*record.RefreshTokenRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRefreshTokensRecord", refreshTokens)
	ret0, _ := ret[0].([]*record.RefreshTokenRecord)
	return ret0
}

// ToRefreshTokensRecord indicates an expected call of ToRefreshTokensRecord.
func (mr *MockRefreshTokenRecordMappingMockRecorder) ToRefreshTokensRecord(refreshTokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRefreshTokensRecord", reflect.TypeOf((*MockRefreshTokenRecordMapping)(nil).ToRefreshTokensRecord), refreshTokens)
}

// MockSaldoRecordMapping is a mock of SaldoRecordMapping interface.
type MockSaldoRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockSaldoRecordMappingMockRecorder
	isgomock struct{}
}

// MockSaldoRecordMappingMockRecorder is the mock recorder for MockSaldoRecordMapping.
type MockSaldoRecordMappingMockRecorder struct {
	mock *MockSaldoRecordMapping
}

// NewMockSaldoRecordMapping creates a new mock instance.
func NewMockSaldoRecordMapping(ctrl *gomock.Controller) *MockSaldoRecordMapping {
	mock := &MockSaldoRecordMapping{ctrl: ctrl}
	mock.recorder = &MockSaldoRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaldoRecordMapping) EXPECT() *MockSaldoRecordMappingMockRecorder {
	return m.recorder
}

// ToSaldoRecord mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoRecord(saldo *db.Saldo) *record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoRecord", saldo)
	ret0, _ := ret[0].(*record.SaldoRecord)
	return ret0
}

// ToSaldoRecord indicates an expected call of ToSaldoRecord.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoRecord(saldo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoRecord", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoRecord), saldo)
}

// ToSaldoRecordActive mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoRecordActive(saldo *db.GetActiveSaldosRow) *record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoRecordActive", saldo)
	ret0, _ := ret[0].(*record.SaldoRecord)
	return ret0
}

// ToSaldoRecordActive indicates an expected call of ToSaldoRecordActive.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoRecordActive(saldo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoRecordActive", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoRecordActive), saldo)
}

// ToSaldoRecordAll mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoRecordAll(saldo *db.GetSaldosRow) *record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoRecordAll", saldo)
	ret0, _ := ret[0].(*record.SaldoRecord)
	return ret0
}

// ToSaldoRecordAll indicates an expected call of ToSaldoRecordAll.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoRecordAll(saldo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoRecordAll", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoRecordAll), saldo)
}

// ToSaldoRecordTrashed mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoRecordTrashed(saldo *db.GetTrashedSaldosRow) *record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoRecordTrashed", saldo)
	ret0, _ := ret[0].(*record.SaldoRecord)
	return ret0
}

// ToSaldoRecordTrashed indicates an expected call of ToSaldoRecordTrashed.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoRecordTrashed(saldo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoRecordTrashed", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoRecordTrashed), saldo)
}

// ToSaldosRecord mocks base method.
func (m *MockSaldoRecordMapping) ToSaldosRecord(saldos []*db.Saldo) []*record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldosRecord", saldos)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	return ret0
}

// ToSaldosRecord indicates an expected call of ToSaldosRecord.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldosRecord(saldos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldosRecord", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldosRecord), saldos)
}

// ToSaldosRecordActive mocks base method.
func (m *MockSaldoRecordMapping) ToSaldosRecordActive(saldos []*db.GetActiveSaldosRow) []*record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldosRecordActive", saldos)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	return ret0
}

// ToSaldosRecordActive indicates an expected call of ToSaldosRecordActive.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldosRecordActive(saldos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldosRecordActive", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldosRecordActive), saldos)
}

// ToSaldosRecordAll mocks base method.
func (m *MockSaldoRecordMapping) ToSaldosRecordAll(saldos []*db.GetSaldosRow) []*record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldosRecordAll", saldos)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	return ret0
}

// ToSaldosRecordAll indicates an expected call of ToSaldosRecordAll.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldosRecordAll(saldos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldosRecordAll", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldosRecordAll), saldos)
}

// ToSaldosRecordTrashed mocks base method.
func (m *MockSaldoRecordMapping) ToSaldosRecordTrashed(saldos []*db.GetTrashedSaldosRow) []*record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldosRecordTrashed", saldos)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	return ret0
}

// ToSaldosRecordTrashed indicates an expected call of ToSaldosRecordTrashed.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldosRecordTrashed(saldos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldosRecordTrashed", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldosRecordTrashed), saldos)
}

// MockTopupRecordMapping is a mock of TopupRecordMapping interface.
type MockTopupRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockTopupRecordMappingMockRecorder
	isgomock struct{}
}

// MockTopupRecordMappingMockRecorder is the mock recorder for MockTopupRecordMapping.
type MockTopupRecordMappingMockRecorder struct {
	mock *MockTopupRecordMapping
}

// NewMockTopupRecordMapping creates a new mock instance.
func NewMockTopupRecordMapping(ctrl *gomock.Controller) *MockTopupRecordMapping {
	mock := &MockTopupRecordMapping{ctrl: ctrl}
	mock.recorder = &MockTopupRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopupRecordMapping) EXPECT() *MockTopupRecordMappingMockRecorder {
	return m.recorder
}

// ToTopupRecord mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecord(topup *db.Topup) *record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecord", topup)
	ret0, _ := ret[0].(*record.TopupRecord)
	return ret0
}

// ToTopupRecord indicates an expected call of ToTopupRecord.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecord(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecord", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecord), topup)
}

// ToTopupRecordActive mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordActive(topup *db.GetActiveTopupsRow) *record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordActive", topup)
	ret0, _ := ret[0].(*record.TopupRecord)
	return ret0
}

// ToTopupRecordActive indicates an expected call of ToTopupRecordActive.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordActive(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordActive", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordActive), topup)
}

// ToTopupRecordAll mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordAll(topup *db.GetTopupsRow) *record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordAll", topup)
	ret0, _ := ret[0].(*record.TopupRecord)
	return ret0
}

// ToTopupRecordAll indicates an expected call of ToTopupRecordAll.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordAll(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordAll", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordAll), topup)
}

// ToTopupRecordTrashed mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordTrashed(topup *db.GetTrashedTopupsRow) *record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordTrashed", topup)
	ret0, _ := ret[0].(*record.TopupRecord)
	return ret0
}

// ToTopupRecordTrashed indicates an expected call of ToTopupRecordTrashed.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordTrashed(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordTrashed", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordTrashed), topup)
}

// ToTopupRecords mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecords(topups []*db.Topup) []*record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecords", topups)
	ret0, _ := ret[0].([]*record.TopupRecord)
	return ret0
}

// ToTopupRecords indicates an expected call of ToTopupRecords.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecords(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecords", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecords), topups)
}

// ToTopupRecordsActive mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsActive(topups []*db.GetActiveTopupsRow) []*record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsActive", topups)
	ret0, _ := ret[0].([]*record.TopupRecord)
	return ret0
}

// ToTopupRecordsActive indicates an expected call of ToTopupRecordsActive.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsActive(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsActive", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsActive), topups)
}

// ToTopupRecordsAll mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsAll(topups []*db.GetTopupsRow) []*record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsAll", topups)
	ret0, _ := ret[0].([]*record.TopupRecord)
	return ret0
}

// ToTopupRecordsAll indicates an expected call of ToTopupRecordsAll.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsAll(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsAll", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsAll), topups)
}

// ToTopupRecordsTrashed mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsTrashed(topups []*db.GetTrashedTopupsRow) []*record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsTrashed", topups)
	ret0, _ := ret[0].([]*record.TopupRecord)
	return ret0
}

// ToTopupRecordsTrashed indicates an expected call of ToTopupRecordsTrashed.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsTrashed(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsTrashed", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsTrashed), topups)
}

// MockTransferRecordMapping is a mock of TransferRecordMapping interface.
type MockTransferRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockTransferRecordMappingMockRecorder
	isgomock struct{}
}

// MockTransferRecordMappingMockRecorder is the mock recorder for MockTransferRecordMapping.
type MockTransferRecordMappingMockRecorder struct {
	mock *MockTransferRecordMapping
}

// NewMockTransferRecordMapping creates a new mock instance.
func NewMockTransferRecordMapping(ctrl *gomock.Controller) *MockTransferRecordMapping {
	mock := &MockTransferRecordMapping{ctrl: ctrl}
	mock.recorder = &MockTransferRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferRecordMapping) EXPECT() *MockTransferRecordMappingMockRecorder {
	return m.recorder
}

// ToTransferRecord mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecord(transfer *db.Transfer) *record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecord", transfer)
	ret0, _ := ret[0].(*record.TransferRecord)
	return ret0
}

// ToTransferRecord indicates an expected call of ToTransferRecord.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecord(transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecord", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecord), transfer)
}

// ToTransferRecordActive mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordActive(transfer *db.GetActiveTransfersRow) *record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordActive", transfer)
	ret0, _ := ret[0].(*record.TransferRecord)
	return ret0
}

// ToTransferRecordActive indicates an expected call of ToTransferRecordActive.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordActive(transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordActive", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordActive), transfer)
}

// ToTransferRecordAll mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordAll(transfer *db.GetTransfersRow) *record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordAll", transfer)
	ret0, _ := ret[0].(*record.TransferRecord)
	return ret0
}

// ToTransferRecordAll indicates an expected call of ToTransferRecordAll.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordAll(transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordAll", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordAll), transfer)
}

// ToTransferRecordTrashed mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordTrashed(transfer *db.GetTrashedTransfersRow) *record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordTrashed", transfer)
	ret0, _ := ret[0].(*record.TransferRecord)
	return ret0
}

// ToTransferRecordTrashed indicates an expected call of ToTransferRecordTrashed.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordTrashed(transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordTrashed", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordTrashed), transfer)
}

// ToTransfersRecord mocks base method.
func (m *MockTransferRecordMapping) ToTransfersRecord(transfers []*db.Transfer) []*record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransfersRecord", transfers)
	ret0, _ := ret[0].([]*record.TransferRecord)
	return ret0
}

// ToTransfersRecord indicates an expected call of ToTransfersRecord.
func (mr *MockTransferRecordMappingMockRecorder) ToTransfersRecord(transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransfersRecord", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransfersRecord), transfers)
}

// ToTransfersRecordActive mocks base method.
func (m *MockTransferRecordMapping) ToTransfersRecordActive(transfers []*db.GetActiveTransfersRow) []*record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransfersRecordActive", transfers)
	ret0, _ := ret[0].([]*record.TransferRecord)
	return ret0
}

// ToTransfersRecordActive indicates an expected call of ToTransfersRecordActive.
func (mr *MockTransferRecordMappingMockRecorder) ToTransfersRecordActive(transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransfersRecordActive", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransfersRecordActive), transfers)
}

// ToTransfersRecordAll mocks base method.
func (m *MockTransferRecordMapping) ToTransfersRecordAll(transfers []*db.GetTransfersRow) []*record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransfersRecordAll", transfers)
	ret0, _ := ret[0].([]*record.TransferRecord)
	return ret0
}

// ToTransfersRecordAll indicates an expected call of ToTransfersRecordAll.
func (mr *MockTransferRecordMappingMockRecorder) ToTransfersRecordAll(transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransfersRecordAll", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransfersRecordAll), transfers)
}

// ToTransfersRecordTrashed mocks base method.
func (m *MockTransferRecordMapping) ToTransfersRecordTrashed(transfers []*db.GetTrashedTransfersRow) []*record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransfersRecordTrashed", transfers)
	ret0, _ := ret[0].([]*record.TransferRecord)
	return ret0
}

// ToTransfersRecordTrashed indicates an expected call of ToTransfersRecordTrashed.
func (mr *MockTransferRecordMappingMockRecorder) ToTransfersRecordTrashed(transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransfersRecordTrashed", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransfersRecordTrashed), transfers)
}

// MockWithdrawRecordMapping is a mock of WithdrawRecordMapping interface.
type MockWithdrawRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawRecordMappingMockRecorder
	isgomock struct{}
}

// MockWithdrawRecordMappingMockRecorder is the mock recorder for MockWithdrawRecordMapping.
type MockWithdrawRecordMappingMockRecorder struct {
	mock *MockWithdrawRecordMapping
}

// NewMockWithdrawRecordMapping creates a new mock instance.
func NewMockWithdrawRecordMapping(ctrl *gomock.Controller) *MockWithdrawRecordMapping {
	mock := &MockWithdrawRecordMapping{ctrl: ctrl}
	mock.recorder = &MockWithdrawRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawRecordMapping) EXPECT() *MockWithdrawRecordMappingMockRecorder {
	return m.recorder
}

// ToWithdrawRecord mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecord(withdraw *db.Withdraw) *record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecord", withdraw)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	return ret0
}

// ToWithdrawRecord indicates an expected call of ToWithdrawRecord.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecord(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecord", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecord), withdraw)
}

// ToWithdrawRecordActive mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordActive(withdraw *db.GetActiveWithdrawsRow) *record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordActive", withdraw)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	return ret0
}

// ToWithdrawRecordActive indicates an expected call of ToWithdrawRecordActive.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordActive(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordActive", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordActive), withdraw)
}

// ToWithdrawRecordAll mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordAll(withdraw *db.GetWithdrawsRow) *record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordAll", withdraw)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	return ret0
}

// ToWithdrawRecordAll indicates an expected call of ToWithdrawRecordAll.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordAll(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordAll", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordAll), withdraw)
}

// ToWithdrawRecordTrashed mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordTrashed(withdraw *db.GetTrashedWithdrawsRow) *record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordTrashed", withdraw)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	return ret0
}

// ToWithdrawRecordTrashed indicates an expected call of ToWithdrawRecordTrashed.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordTrashed(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordTrashed", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordTrashed), withdraw)
}

// ToWithdrawsRecord mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsRecord(withdraws []*db.Withdraw) []*record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsRecord", withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	return ret0
}

// ToWithdrawsRecord indicates an expected call of ToWithdrawsRecord.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsRecord(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsRecord", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsRecord), withdraws)
}

// ToWithdrawsRecordALl mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsRecordALl(withdraws []*db.GetWithdrawsRow) []*record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsRecordALl", withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	return ret0
}

// ToWithdrawsRecordALl indicates an expected call of ToWithdrawsRecordALl.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsRecordALl(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsRecordALl", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsRecordALl), withdraws)
}

// ToWithdrawsRecordActive mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsRecordActive(withdraws []*db.GetActiveWithdrawsRow) []*record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsRecordActive", withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	return ret0
}

// ToWithdrawsRecordActive indicates an expected call of ToWithdrawsRecordActive.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsRecordActive(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsRecordActive", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsRecordActive), withdraws)
}

// ToWithdrawsRecordTrashed mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsRecordTrashed(withdraws []*db.GetTrashedWithdrawsRow) []*record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsRecordTrashed", withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	return ret0
}

// ToWithdrawsRecordTrashed indicates an expected call of ToWithdrawsRecordTrashed.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsRecordTrashed(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsRecordTrashed", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsRecordTrashed), withdraws)
}

// MockCardRecordMapping is a mock of CardRecordMapping interface.
type MockCardRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockCardRecordMappingMockRecorder
	isgomock struct{}
}

// MockCardRecordMappingMockRecorder is the mock recorder for MockCardRecordMapping.
type MockCardRecordMappingMockRecorder struct {
	mock *MockCardRecordMapping
}

// NewMockCardRecordMapping creates a new mock instance.
func NewMockCardRecordMapping(ctrl *gomock.Controller) *MockCardRecordMapping {
	mock := &MockCardRecordMapping{ctrl: ctrl}
	mock.recorder = &MockCardRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRecordMapping) EXPECT() *MockCardRecordMappingMockRecorder {
	return m.recorder
}

// ToCardRecord mocks base method.
func (m *MockCardRecordMapping) ToCardRecord(card *db.Card) *record.CardRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardRecord", card)
	ret0, _ := ret[0].(*record.CardRecord)
	return ret0
}

// ToCardRecord indicates an expected call of ToCardRecord.
func (mr *MockCardRecordMappingMockRecorder) ToCardRecord(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardRecord", reflect.TypeOf((*MockCardRecordMapping)(nil).ToCardRecord), card)
}

// ToCardRecordActive mocks base method.
func (m *MockCardRecordMapping) ToCardRecordActive(card *db.GetActiveCardsWithCountRow) *record.CardRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardRecordActive", card)
	ret0, _ := ret[0].(*record.CardRecord)
	return ret0
}

// ToCardRecordActive indicates an expected call of ToCardRecordActive.
func (mr *MockCardRecordMappingMockRecorder) ToCardRecordActive(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardRecordActive", reflect.TypeOf((*MockCardRecordMapping)(nil).ToCardRecordActive), card)
}

// ToCardRecordTrashed mocks base method.
func (m *MockCardRecordMapping) ToCardRecordTrashed(card *db.GetTrashedCardsWithCountRow) *record.CardRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardRecordTrashed", card)
	ret0, _ := ret[0].(*record.CardRecord)
	return ret0
}

// ToCardRecordTrashed indicates an expected call of ToCardRecordTrashed.
func (mr *MockCardRecordMappingMockRecorder) ToCardRecordTrashed(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardRecordTrashed", reflect.TypeOf((*MockCardRecordMapping)(nil).ToCardRecordTrashed), card)
}

// ToCardRecordsActive mocks base method.
func (m *MockCardRecordMapping) ToCardRecordsActive(cards []*db.GetActiveCardsWithCountRow) []*record.CardRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardRecordsActive", cards)
	ret0, _ := ret[0].([]*record.CardRecord)
	return ret0
}

// ToCardRecordsActive indicates an expected call of ToCardRecordsActive.
func (mr *MockCardRecordMappingMockRecorder) ToCardRecordsActive(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardRecordsActive", reflect.TypeOf((*MockCardRecordMapping)(nil).ToCardRecordsActive), cards)
}

// ToCardRecordsTrashed mocks base method.
func (m *MockCardRecordMapping) ToCardRecordsTrashed(cards []*db.GetTrashedCardsWithCountRow) []*record.CardRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardRecordsTrashed", cards)
	ret0, _ := ret[0].([]*record.CardRecord)
	return ret0
}

// ToCardRecordsTrashed indicates an expected call of ToCardRecordsTrashed.
func (mr *MockCardRecordMappingMockRecorder) ToCardRecordsTrashed(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardRecordsTrashed", reflect.TypeOf((*MockCardRecordMapping)(nil).ToCardRecordsTrashed), cards)
}

// ToCardsRecord mocks base method.
func (m *MockCardRecordMapping) ToCardsRecord(cards []*db.GetCardsRow) []*record.CardRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardsRecord", cards)
	ret0, _ := ret[0].([]*record.CardRecord)
	return ret0
}

// ToCardsRecord indicates an expected call of ToCardsRecord.
func (mr *MockCardRecordMappingMockRecorder) ToCardsRecord(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardsRecord", reflect.TypeOf((*MockCardRecordMapping)(nil).ToCardsRecord), cards)
}

// ToMonthlyBalance mocks base method.
func (m *MockCardRecordMapping) ToMonthlyBalance(card *db.GetMonthlyBalancesRow) *record.CardMonthBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyBalance", card)
	ret0, _ := ret[0].(*record.CardMonthBalance)
	return ret0
}

// ToMonthlyBalance indicates an expected call of ToMonthlyBalance.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyBalance(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyBalance", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyBalance), card)
}

// ToMonthlyBalanceCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyBalanceCardNumber(card *db.GetMonthlyBalancesByCardNumberRow) *record.CardMonthBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyBalanceCardNumber", card)
	ret0, _ := ret[0].(*record.CardMonthBalance)
	return ret0
}

// ToMonthlyBalanceCardNumber indicates an expected call of ToMonthlyBalanceCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyBalanceCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyBalanceCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyBalanceCardNumber), card)
}

// ToMontlyBalances mocks base method.
func (m *MockCardRecordMapping) ToMontlyBalances(cards []*db.GetMonthlyBalancesRow) []*record.CardMonthBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMontlyBalances", cards)
	ret0, _ := ret[0].([]*record.CardMonthBalance)
	return ret0
}

// ToMontlyBalances indicates an expected call of ToMontlyBalances.
func (mr *MockCardRecordMappingMockRecorder) ToMontlyBalances(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMontlyBalances", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMontlyBalances), cards)
}

// ToMontlyBalancesCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMontlyBalancesCardNumber(cards []*db.GetMonthlyBalancesByCardNumberRow) []*record.CardMonthBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMontlyBalancesCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardMonthBalance)
	return ret0
}

// ToMontlyBalancesCardNumber indicates an expected call of ToMontlyBalancesCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMontlyBalancesCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMontlyBalancesCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMontlyBalancesCardNumber), cards)
}

// ToYearlyBalance mocks base method.
func (m *MockCardRecordMapping) ToYearlyBalance(card *db.GetYearlyBalancesRow) *record.CardYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyBalance", card)
	ret0, _ := ret[0].(*record.CardYearlyBalance)
	return ret0
}

// ToYearlyBalance indicates an expected call of ToYearlyBalance.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyBalance(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyBalance", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyBalance), card)
}

// ToYearlyBalanceCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyBalanceCardNumber(card *db.GetYearlyBalancesByCardNumberRow) *record.CardYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyBalanceCardNumber", card)
	ret0, _ := ret[0].(*record.CardYearlyBalance)
	return ret0
}

// ToYearlyBalanceCardNumber indicates an expected call of ToYearlyBalanceCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyBalanceCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyBalanceCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyBalanceCardNumber), card)
}

// ToYearlyBalances mocks base method.
func (m *MockCardRecordMapping) ToYearlyBalances(cards []*db.GetYearlyBalancesRow) []*record.CardYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyBalances", cards)
	ret0, _ := ret[0].([]*record.CardYearlyBalance)
	return ret0
}

// ToYearlyBalances indicates an expected call of ToYearlyBalances.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyBalances(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyBalances", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyBalances), cards)
}

// ToYearlyBalancesCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyBalancesCardNumber(cards []*db.GetYearlyBalancesByCardNumberRow) []*record.CardYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyBalancesCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardYearlyBalance)
	return ret0
}

// ToYearlyBalancesCardNumber indicates an expected call of ToYearlyBalancesCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyBalancesCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyBalancesCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyBalancesCardNumber), cards)
}

// MockTransactionRecordMapping is a mock of TransactionRecordMapping interface.
type MockTransactionRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRecordMappingMockRecorder
	isgomock struct{}
}

// MockTransactionRecordMappingMockRecorder is the mock recorder for MockTransactionRecordMapping.
type MockTransactionRecordMappingMockRecorder struct {
	mock *MockTransactionRecordMapping
}

// NewMockTransactionRecordMapping creates a new mock instance.
func NewMockTransactionRecordMapping(ctrl *gomock.Controller) *MockTransactionRecordMapping {
	mock := &MockTransactionRecordMapping{ctrl: ctrl}
	mock.recorder = &MockTransactionRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRecordMapping) EXPECT() *MockTransactionRecordMappingMockRecorder {
	return m.recorder
}

// ToTransactionRecord mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecord(transaction *db.Transaction) *record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecord", transaction)
	ret0, _ := ret[0].(*record.TransactionRecord)
	return ret0
}

// ToTransactionRecord indicates an expected call of ToTransactionRecord.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecord(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecord", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecord), transaction)
}

// ToTransactionRecordActive mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordActive(transaction *db.GetActiveTransactionsRow) *record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordActive", transaction)
	ret0, _ := ret[0].(*record.TransactionRecord)
	return ret0
}

// ToTransactionRecordActive indicates an expected call of ToTransactionRecordActive.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordActive(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordActive", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordActive), transaction)
}

// ToTransactionRecordAll mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordAll(transaction *db.GetTransactionsRow) *record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordAll", transaction)
	ret0, _ := ret[0].(*record.TransactionRecord)
	return ret0
}

// ToTransactionRecordAll indicates an expected call of ToTransactionRecordAll.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordAll(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordAll", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordAll), transaction)
}

// ToTransactionRecordTrashed mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordTrashed(transaction *db.GetTrashedTransactionsRow) *record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordTrashed", transaction)
	ret0, _ := ret[0].(*record.TransactionRecord)
	return ret0
}

// ToTransactionRecordTrashed indicates an expected call of ToTransactionRecordTrashed.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordTrashed(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordTrashed", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordTrashed), transaction)
}

// ToTransactionsRecord mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionsRecord(transactions []*db.Transaction) []*record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsRecord", transactions)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	return ret0
}

// ToTransactionsRecord indicates an expected call of ToTransactionsRecord.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionsRecord(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsRecord", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionsRecord), transactions)
}

// ToTransactionsRecordActive mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionsRecordActive(transactions []*db.GetActiveTransactionsRow) []*record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsRecordActive", transactions)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	return ret0
}

// ToTransactionsRecordActive indicates an expected call of ToTransactionsRecordActive.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionsRecordActive(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsRecordActive", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionsRecordActive), transactions)
}

// ToTransactionsRecordAll mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionsRecordAll(transactions []*db.GetTransactionsRow) []*record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsRecordAll", transactions)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	return ret0
}

// ToTransactionsRecordAll indicates an expected call of ToTransactionsRecordAll.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionsRecordAll(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsRecordAll", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionsRecordAll), transactions)
}

// ToTransactionsRecordTrashed mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionsRecordTrashed(transactions []*db.GetTrashedTransactionsRow) []*record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsRecordTrashed", transactions)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	return ret0
}

// ToTransactionsRecordTrashed indicates an expected call of ToTransactionsRecordTrashed.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionsRecordTrashed(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsRecordTrashed", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionsRecordTrashed), transactions)
}

// MockMerchantRecordMapping is a mock of MerchantRecordMapping interface.
type MockMerchantRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantRecordMappingMockRecorder
	isgomock struct{}
}

// MockMerchantRecordMappingMockRecorder is the mock recorder for MockMerchantRecordMapping.
type MockMerchantRecordMappingMockRecorder struct {
	mock *MockMerchantRecordMapping
}

// NewMockMerchantRecordMapping creates a new mock instance.
func NewMockMerchantRecordMapping(ctrl *gomock.Controller) *MockMerchantRecordMapping {
	mock := &MockMerchantRecordMapping{ctrl: ctrl}
	mock.recorder = &MockMerchantRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantRecordMapping) EXPECT() *MockMerchantRecordMappingMockRecorder {
	return m.recorder
}

// ToMerchantActiveRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantActiveRecord(merchant *db.GetActiveMerchantsRow) *record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantActiveRecord", merchant)
	ret0, _ := ret[0].(*record.MerchantRecord)
	return ret0
}

// ToMerchantActiveRecord indicates an expected call of ToMerchantActiveRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantActiveRecord(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantActiveRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantActiveRecord), merchant)
}

// ToMerchantGetAllRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantGetAllRecord(merchant *db.GetMerchantsRow) *record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantGetAllRecord", merchant)
	ret0, _ := ret[0].(*record.MerchantRecord)
	return ret0
}

// ToMerchantGetAllRecord indicates an expected call of ToMerchantGetAllRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantGetAllRecord(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantGetAllRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantGetAllRecord), merchant)
}

// ToMerchantRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantRecord(merchant *db.Merchant) *record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantRecord", merchant)
	ret0, _ := ret[0].(*record.MerchantRecord)
	return ret0
}

// ToMerchantRecord indicates an expected call of ToMerchantRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantRecord(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantRecord), merchant)
}

// ToMerchantTrashedRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantTrashedRecord(merchant *db.GetTrashedMerchantsRow) *record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantTrashedRecord", merchant)
	ret0, _ := ret[0].(*record.MerchantRecord)
	return ret0
}

// ToMerchantTrashedRecord indicates an expected call of ToMerchantTrashedRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantTrashedRecord(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantTrashedRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantTrashedRecord), merchant)
}

// ToMerchantsActiveRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantsActiveRecord(merchants []*db.GetActiveMerchantsRow) []*record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsActiveRecord", merchants)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	return ret0
}

// ToMerchantsActiveRecord indicates an expected call of ToMerchantsActiveRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantsActiveRecord(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsActiveRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantsActiveRecord), merchants)
}

// ToMerchantsGetAllRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantsGetAllRecord(merchants []*db.GetMerchantsRow) []*record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsGetAllRecord", merchants)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	return ret0
}

// ToMerchantsGetAllRecord indicates an expected call of ToMerchantsGetAllRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantsGetAllRecord(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsGetAllRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantsGetAllRecord), merchants)
}

// ToMerchantsRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantsRecord(merchants []*db.Merchant) []*record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsRecord", merchants)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	return ret0
}

// ToMerchantsRecord indicates an expected call of ToMerchantsRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantsRecord(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantsRecord), merchants)
}

// ToMerchantsTrashedRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantsTrashedRecord(merchants []*db.GetTrashedMerchantsRow) []*record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsTrashedRecord", merchants)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	return ret0
}

// ToMerchantsTrashedRecord indicates an expected call of ToMerchantsTrashedRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantsTrashedRecord(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsTrashedRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantsTrashedRecord), merchants)
}
