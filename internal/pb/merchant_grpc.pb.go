// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: merchant.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantService_FindAllMerchant_FullMethodName            = "/pb.MerchantService/FindAllMerchant"
	MerchantService_FindByIdMerchant_FullMethodName           = "/pb.MerchantService/FindByIdMerchant"
	MerchantService_FindByApiKey_FullMethodName               = "/pb.MerchantService/FindByApiKey"
	MerchantService_FindByMerchantUserId_FullMethodName       = "/pb.MerchantService/FindByMerchantUserId"
	MerchantService_FindByActive_FullMethodName               = "/pb.MerchantService/FindByActive"
	MerchantService_FindByTrashed_FullMethodName              = "/pb.MerchantService/FindByTrashed"
	MerchantService_CreateMerchant_FullMethodName             = "/pb.MerchantService/CreateMerchant"
	MerchantService_UpdateMerchant_FullMethodName             = "/pb.MerchantService/UpdateMerchant"
	MerchantService_TrashedMerchant_FullMethodName            = "/pb.MerchantService/TrashedMerchant"
	MerchantService_RestoreMerchant_FullMethodName            = "/pb.MerchantService/RestoreMerchant"
	MerchantService_DeleteMerchantPermanent_FullMethodName    = "/pb.MerchantService/DeleteMerchantPermanent"
	MerchantService_RestoreAllMerchant_FullMethodName         = "/pb.MerchantService/RestoreAllMerchant"
	MerchantService_DeleteAllMerchantPermanent_FullMethodName = "/pb.MerchantService/DeleteAllMerchantPermanent"
)

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantServiceClient interface {
	FindAllMerchant(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchant, error)
	FindByIdMerchant(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error)
	FindByApiKey(ctx context.Context, in *FindByApiKeyRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error)
	FindByMerchantUserId(ctx context.Context, in *FindByMerchantUserIdRequest, opts ...grpc.CallOption) (*ApiResponsesMerchant, error)
	FindByActive(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDeleteAt, error)
	CreateMerchant(ctx context.Context, in *CreateMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error)
	UpdateMerchant(ctx context.Context, in *UpdateMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error)
	TrashedMerchant(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error)
	RestoreMerchant(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error)
	DeleteMerchantPermanent(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDelete, error)
	RestoreAllMerchant(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error)
	DeleteAllMerchantPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error)
}

type merchantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantServiceClient(cc grpc.ClientConnInterface) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) FindAllMerchant(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchant)
	err := c.cc.Invoke(ctx, MerchantService_FindAllMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) FindByIdMerchant(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchant)
	err := c.cc.Invoke(ctx, MerchantService_FindByIdMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) FindByApiKey(ctx context.Context, in *FindByApiKeyRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchant)
	err := c.cc.Invoke(ctx, MerchantService_FindByApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) FindByMerchantUserId(ctx context.Context, in *FindByMerchantUserIdRequest, opts ...grpc.CallOption) (*ApiResponsesMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsesMerchant)
	err := c.cc.Invoke(ctx, MerchantService_FindByMerchantUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) FindByActive(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDeleteAt)
	err := c.cc.Invoke(ctx, MerchantService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) FindByTrashed(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDeleteAt)
	err := c.cc.Invoke(ctx, MerchantService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateMerchant(ctx context.Context, in *CreateMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchant)
	err := c.cc.Invoke(ctx, MerchantService_CreateMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateMerchant(ctx context.Context, in *UpdateMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchant)
	err := c.cc.Invoke(ctx, MerchantService_UpdateMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) TrashedMerchant(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchant)
	err := c.cc.Invoke(ctx, MerchantService_TrashedMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) RestoreMerchant(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchant)
	err := c.cc.Invoke(ctx, MerchantService_RestoreMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) DeleteMerchantPermanent(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDelete)
	err := c.cc.Invoke(ctx, MerchantService_DeleteMerchantPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) RestoreAllMerchant(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAll)
	err := c.cc.Invoke(ctx, MerchantService_RestoreAllMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) DeleteAllMerchantPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAll)
	err := c.cc.Invoke(ctx, MerchantService_DeleteAllMerchantPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
// All implementations must embed UnimplementedMerchantServiceServer
// for forward compatibility.
type MerchantServiceServer interface {
	FindAllMerchant(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchant, error)
	FindByIdMerchant(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchant, error)
	FindByApiKey(context.Context, *FindByApiKeyRequest) (*ApiResponseMerchant, error)
	FindByMerchantUserId(context.Context, *FindByMerchantUserIdRequest) (*ApiResponsesMerchant, error)
	FindByActive(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDeleteAt, error)
	FindByTrashed(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDeleteAt, error)
	CreateMerchant(context.Context, *CreateMerchantRequest) (*ApiResponseMerchant, error)
	UpdateMerchant(context.Context, *UpdateMerchantRequest) (*ApiResponseMerchant, error)
	TrashedMerchant(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchant, error)
	RestoreMerchant(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchant, error)
	DeleteMerchantPermanent(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchantDelete, error)
	RestoreAllMerchant(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error)
	DeleteAllMerchantPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error)
	mustEmbedUnimplementedMerchantServiceServer()
}

// UnimplementedMerchantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantServiceServer struct{}

func (UnimplementedMerchantServiceServer) FindAllMerchant(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) FindByIdMerchant(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) FindByApiKey(context.Context, *FindByApiKeyRequest) (*ApiResponseMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByApiKey not implemented")
}
func (UnimplementedMerchantServiceServer) FindByMerchantUserId(context.Context, *FindByMerchantUserIdRequest) (*ApiResponsesMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByMerchantUserId not implemented")
}
func (UnimplementedMerchantServiceServer) FindByActive(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedMerchantServiceServer) FindByTrashed(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedMerchantServiceServer) CreateMerchant(context.Context, *CreateMerchantRequest) (*ApiResponseMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateMerchant(context.Context, *UpdateMerchantRequest) (*ApiResponseMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) TrashedMerchant(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) RestoreMerchant(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) DeleteMerchantPermanent(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchantDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMerchantPermanent not implemented")
}
func (UnimplementedMerchantServiceServer) RestoreAllMerchant(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) DeleteAllMerchantPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMerchantPermanent not implemented")
}
func (UnimplementedMerchantServiceServer) mustEmbedUnimplementedMerchantServiceServer() {}
func (UnimplementedMerchantServiceServer) testEmbeddedByValue()                         {}

// UnsafeMerchantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServiceServer will
// result in compilation errors.
type UnsafeMerchantServiceServer interface {
	mustEmbedUnimplementedMerchantServiceServer()
}

func RegisterMerchantServiceServer(s grpc.ServiceRegistrar, srv MerchantServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantService_ServiceDesc, srv)
}

func _MerchantService_FindAllMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).FindAllMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_FindAllMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).FindAllMerchant(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_FindByIdMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).FindByIdMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_FindByIdMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).FindByIdMerchant(ctx, req.(*FindByIdMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_FindByApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).FindByApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_FindByApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).FindByApiKey(ctx, req.(*FindByApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_FindByMerchantUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByMerchantUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).FindByMerchantUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_FindByMerchantUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).FindByMerchantUserId(ctx, req.(*FindByMerchantUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).FindByActive(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).FindByTrashed(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CreateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateMerchant(ctx, req.(*CreateMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateMerchant(ctx, req.(*UpdateMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_TrashedMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).TrashedMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_TrashedMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).TrashedMerchant(ctx, req.(*FindByIdMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_RestoreMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).RestoreMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_RestoreMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).RestoreMerchant(ctx, req.(*FindByIdMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_DeleteMerchantPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).DeleteMerchantPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_DeleteMerchantPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).DeleteMerchantPermanent(ctx, req.(*FindByIdMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_RestoreAllMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).RestoreAllMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_RestoreAllMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).RestoreAllMerchant(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_DeleteAllMerchantPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).DeleteAllMerchantPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_DeleteAllMerchantPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).DeleteAllMerchantPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantService_ServiceDesc is the grpc.ServiceDesc for MerchantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllMerchant",
			Handler:    _MerchantService_FindAllMerchant_Handler,
		},
		{
			MethodName: "FindByIdMerchant",
			Handler:    _MerchantService_FindByIdMerchant_Handler,
		},
		{
			MethodName: "FindByApiKey",
			Handler:    _MerchantService_FindByApiKey_Handler,
		},
		{
			MethodName: "FindByMerchantUserId",
			Handler:    _MerchantService_FindByMerchantUserId_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _MerchantService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _MerchantService_FindByTrashed_Handler,
		},
		{
			MethodName: "CreateMerchant",
			Handler:    _MerchantService_CreateMerchant_Handler,
		},
		{
			MethodName: "UpdateMerchant",
			Handler:    _MerchantService_UpdateMerchant_Handler,
		},
		{
			MethodName: "TrashedMerchant",
			Handler:    _MerchantService_TrashedMerchant_Handler,
		},
		{
			MethodName: "RestoreMerchant",
			Handler:    _MerchantService_RestoreMerchant_Handler,
		},
		{
			MethodName: "DeleteMerchantPermanent",
			Handler:    _MerchantService_DeleteMerchantPermanent_Handler,
		},
		{
			MethodName: "RestoreAllMerchant",
			Handler:    _MerchantService_RestoreAllMerchant_Handler,
		},
		{
			MethodName: "DeleteAllMerchantPermanent",
			Handler:    _MerchantService_DeleteAllMerchantPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant.proto",
}
