// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pb/topup_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/pb/topup_grpc.pb.go -destination=internal/pb/mocks/topup_grpc_mock.go
//

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	pb "MamangRust/paymentgatewaygrpc/internal/pb"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTopupServiceClient is a mock of TopupServiceClient interface.
type MockTopupServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTopupServiceClientMockRecorder
	isgomock struct{}
}

// MockTopupServiceClientMockRecorder is the mock recorder for MockTopupServiceClient.
type MockTopupServiceClientMockRecorder struct {
	mock *MockTopupServiceClient
}

// NewMockTopupServiceClient creates a new mock instance.
func NewMockTopupServiceClient(ctrl *gomock.Controller) *MockTopupServiceClient {
	mock := &MockTopupServiceClient{ctrl: ctrl}
	mock.recorder = &MockTopupServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopupServiceClient) EXPECT() *MockTopupServiceClientMockRecorder {
	return m.recorder
}

// CreateTopup mocks base method.
func (m *MockTopupServiceClient) CreateTopup(ctx context.Context, in *pb.CreateTopupRequest, opts ...grpc.CallOption) (*pb.ApiResponseTopup, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTopup", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopup indicates an expected call of CreateTopup.
func (mr *MockTopupServiceClientMockRecorder) CreateTopup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopup", reflect.TypeOf((*MockTopupServiceClient)(nil).CreateTopup), varargs...)
}

// DeleteAllTopupPermanent mocks base method.
func (m *MockTopupServiceClient) DeleteAllTopupPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseTopupAll, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllTopupPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTopupAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTopupPermanent indicates an expected call of DeleteAllTopupPermanent.
func (mr *MockTopupServiceClientMockRecorder) DeleteAllTopupPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTopupPermanent", reflect.TypeOf((*MockTopupServiceClient)(nil).DeleteAllTopupPermanent), varargs...)
}

// DeleteTopupPermanent mocks base method.
func (m *MockTopupServiceClient) DeleteTopupPermanent(ctx context.Context, in *pb.FindByIdTopupRequest, opts ...grpc.CallOption) (*pb.ApiResponseTopupDelete, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTopupPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTopupDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopupPermanent indicates an expected call of DeleteTopupPermanent.
func (mr *MockTopupServiceClientMockRecorder) DeleteTopupPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopupPermanent", reflect.TypeOf((*MockTopupServiceClient)(nil).DeleteTopupPermanent), varargs...)
}

// FindAllTopup mocks base method.
func (m *MockTopupServiceClient) FindAllTopup(ctx context.Context, in *pb.FindAllTopupRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTopup, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTopup", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTopup indicates an expected call of FindAllTopup.
func (mr *MockTopupServiceClientMockRecorder) FindAllTopup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTopup", reflect.TypeOf((*MockTopupServiceClient)(nil).FindAllTopup), varargs...)
}

// FindByActive mocks base method.
func (m *MockTopupServiceClient) FindByActive(ctx context.Context, in *pb.FindAllTopupRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTopupDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByActive", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTopupDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockTopupServiceClientMockRecorder) FindByActive(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockTopupServiceClient)(nil).FindByActive), varargs...)
}

// FindByCardNumberTopup mocks base method.
func (m *MockTopupServiceClient) FindByCardNumberTopup(ctx context.Context, in *pb.FindByCardNumberTopupRequest, opts ...grpc.CallOption) (*pb.ApiResponseTopup, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByCardNumberTopup", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCardNumberTopup indicates an expected call of FindByCardNumberTopup.
func (mr *MockTopupServiceClientMockRecorder) FindByCardNumberTopup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumberTopup", reflect.TypeOf((*MockTopupServiceClient)(nil).FindByCardNumberTopup), varargs...)
}

// FindByIdTopup mocks base method.
func (m *MockTopupServiceClient) FindByIdTopup(ctx context.Context, in *pb.FindByIdTopupRequest, opts ...grpc.CallOption) (*pb.ApiResponseTopup, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByIdTopup", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdTopup indicates an expected call of FindByIdTopup.
func (mr *MockTopupServiceClientMockRecorder) FindByIdTopup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdTopup", reflect.TypeOf((*MockTopupServiceClient)(nil).FindByIdTopup), varargs...)
}

// FindByTrashed mocks base method.
func (m *MockTopupServiceClient) FindByTrashed(ctx context.Context, in *pb.FindAllTopupRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTopupDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByTrashed", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTopupDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockTopupServiceClientMockRecorder) FindByTrashed(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockTopupServiceClient)(nil).FindByTrashed), varargs...)
}

// RestoreAllTopup mocks base method.
func (m *MockTopupServiceClient) RestoreAllTopup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseTopupAll, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreAllTopup", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTopupAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllTopup indicates an expected call of RestoreAllTopup.
func (mr *MockTopupServiceClientMockRecorder) RestoreAllTopup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllTopup", reflect.TypeOf((*MockTopupServiceClient)(nil).RestoreAllTopup), varargs...)
}

// RestoreTopup mocks base method.
func (m *MockTopupServiceClient) RestoreTopup(ctx context.Context, in *pb.FindByIdTopupRequest, opts ...grpc.CallOption) (*pb.ApiResponseTopup, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreTopup", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTopup indicates an expected call of RestoreTopup.
func (mr *MockTopupServiceClientMockRecorder) RestoreTopup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTopup", reflect.TypeOf((*MockTopupServiceClient)(nil).RestoreTopup), varargs...)
}

// TrashedTopup mocks base method.
func (m *MockTopupServiceClient) TrashedTopup(ctx context.Context, in *pb.FindByIdTopupRequest, opts ...grpc.CallOption) (*pb.ApiResponseTopup, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrashedTopup", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTopup indicates an expected call of TrashedTopup.
func (mr *MockTopupServiceClientMockRecorder) TrashedTopup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTopup", reflect.TypeOf((*MockTopupServiceClient)(nil).TrashedTopup), varargs...)
}

// UpdateTopup mocks base method.
func (m *MockTopupServiceClient) UpdateTopup(ctx context.Context, in *pb.UpdateTopupRequest, opts ...grpc.CallOption) (*pb.ApiResponseTopup, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTopup", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTopup indicates an expected call of UpdateTopup.
func (mr *MockTopupServiceClientMockRecorder) UpdateTopup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopup", reflect.TypeOf((*MockTopupServiceClient)(nil).UpdateTopup), varargs...)
}

// MockTopupServiceServer is a mock of TopupServiceServer interface.
type MockTopupServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTopupServiceServerMockRecorder
	isgomock struct{}
}

// MockTopupServiceServerMockRecorder is the mock recorder for MockTopupServiceServer.
type MockTopupServiceServerMockRecorder struct {
	mock *MockTopupServiceServer
}

// NewMockTopupServiceServer creates a new mock instance.
func NewMockTopupServiceServer(ctrl *gomock.Controller) *MockTopupServiceServer {
	mock := &MockTopupServiceServer{ctrl: ctrl}
	mock.recorder = &MockTopupServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopupServiceServer) EXPECT() *MockTopupServiceServerMockRecorder {
	return m.recorder
}

// CreateTopup mocks base method.
func (m *MockTopupServiceServer) CreateTopup(arg0 context.Context, arg1 *pb.CreateTopupRequest) (*pb.ApiResponseTopup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopup", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopup indicates an expected call of CreateTopup.
func (mr *MockTopupServiceServerMockRecorder) CreateTopup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopup", reflect.TypeOf((*MockTopupServiceServer)(nil).CreateTopup), arg0, arg1)
}

// DeleteAllTopupPermanent mocks base method.
func (m *MockTopupServiceServer) DeleteAllTopupPermanent(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseTopupAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTopupPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTopupAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTopupPermanent indicates an expected call of DeleteAllTopupPermanent.
func (mr *MockTopupServiceServerMockRecorder) DeleteAllTopupPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTopupPermanent", reflect.TypeOf((*MockTopupServiceServer)(nil).DeleteAllTopupPermanent), arg0, arg1)
}

// DeleteTopupPermanent mocks base method.
func (m *MockTopupServiceServer) DeleteTopupPermanent(arg0 context.Context, arg1 *pb.FindByIdTopupRequest) (*pb.ApiResponseTopupDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopupPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTopupDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopupPermanent indicates an expected call of DeleteTopupPermanent.
func (mr *MockTopupServiceServerMockRecorder) DeleteTopupPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopupPermanent", reflect.TypeOf((*MockTopupServiceServer)(nil).DeleteTopupPermanent), arg0, arg1)
}

// FindAllTopup mocks base method.
func (m *MockTopupServiceServer) FindAllTopup(arg0 context.Context, arg1 *pb.FindAllTopupRequest) (*pb.ApiResponsePaginationTopup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTopup", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTopup indicates an expected call of FindAllTopup.
func (mr *MockTopupServiceServerMockRecorder) FindAllTopup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTopup", reflect.TypeOf((*MockTopupServiceServer)(nil).FindAllTopup), arg0, arg1)
}

// FindByActive mocks base method.
func (m *MockTopupServiceServer) FindByActive(arg0 context.Context, arg1 *pb.FindAllTopupRequest) (*pb.ApiResponsePaginationTopupDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTopupDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockTopupServiceServerMockRecorder) FindByActive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockTopupServiceServer)(nil).FindByActive), arg0, arg1)
}

// FindByCardNumberTopup mocks base method.
func (m *MockTopupServiceServer) FindByCardNumberTopup(arg0 context.Context, arg1 *pb.FindByCardNumberTopupRequest) (*pb.ApiResponseTopup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumberTopup", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCardNumberTopup indicates an expected call of FindByCardNumberTopup.
func (mr *MockTopupServiceServerMockRecorder) FindByCardNumberTopup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumberTopup", reflect.TypeOf((*MockTopupServiceServer)(nil).FindByCardNumberTopup), arg0, arg1)
}

// FindByIdTopup mocks base method.
func (m *MockTopupServiceServer) FindByIdTopup(arg0 context.Context, arg1 *pb.FindByIdTopupRequest) (*pb.ApiResponseTopup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdTopup", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdTopup indicates an expected call of FindByIdTopup.
func (mr *MockTopupServiceServerMockRecorder) FindByIdTopup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdTopup", reflect.TypeOf((*MockTopupServiceServer)(nil).FindByIdTopup), arg0, arg1)
}

// FindByTrashed mocks base method.
func (m *MockTopupServiceServer) FindByTrashed(arg0 context.Context, arg1 *pb.FindAllTopupRequest) (*pb.ApiResponsePaginationTopupDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTopupDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockTopupServiceServerMockRecorder) FindByTrashed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockTopupServiceServer)(nil).FindByTrashed), arg0, arg1)
}

// RestoreAllTopup mocks base method.
func (m *MockTopupServiceServer) RestoreAllTopup(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseTopupAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllTopup", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTopupAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllTopup indicates an expected call of RestoreAllTopup.
func (mr *MockTopupServiceServerMockRecorder) RestoreAllTopup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllTopup", reflect.TypeOf((*MockTopupServiceServer)(nil).RestoreAllTopup), arg0, arg1)
}

// RestoreTopup mocks base method.
func (m *MockTopupServiceServer) RestoreTopup(arg0 context.Context, arg1 *pb.FindByIdTopupRequest) (*pb.ApiResponseTopup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTopup", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTopup indicates an expected call of RestoreTopup.
func (mr *MockTopupServiceServerMockRecorder) RestoreTopup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTopup", reflect.TypeOf((*MockTopupServiceServer)(nil).RestoreTopup), arg0, arg1)
}

// TrashedTopup mocks base method.
func (m *MockTopupServiceServer) TrashedTopup(arg0 context.Context, arg1 *pb.FindByIdTopupRequest) (*pb.ApiResponseTopup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTopup", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTopup indicates an expected call of TrashedTopup.
func (mr *MockTopupServiceServerMockRecorder) TrashedTopup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTopup", reflect.TypeOf((*MockTopupServiceServer)(nil).TrashedTopup), arg0, arg1)
}

// UpdateTopup mocks base method.
func (m *MockTopupServiceServer) UpdateTopup(arg0 context.Context, arg1 *pb.UpdateTopupRequest) (*pb.ApiResponseTopup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopup", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTopup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTopup indicates an expected call of UpdateTopup.
func (mr *MockTopupServiceServerMockRecorder) UpdateTopup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopup", reflect.TypeOf((*MockTopupServiceServer)(nil).UpdateTopup), arg0, arg1)
}

// mustEmbedUnimplementedTopupServiceServer mocks base method.
func (m *MockTopupServiceServer) mustEmbedUnimplementedTopupServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTopupServiceServer")
}

// mustEmbedUnimplementedTopupServiceServer indicates an expected call of mustEmbedUnimplementedTopupServiceServer.
func (mr *MockTopupServiceServerMockRecorder) mustEmbedUnimplementedTopupServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTopupServiceServer", reflect.TypeOf((*MockTopupServiceServer)(nil).mustEmbedUnimplementedTopupServiceServer))
}

// MockUnsafeTopupServiceServer is a mock of UnsafeTopupServiceServer interface.
type MockUnsafeTopupServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTopupServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeTopupServiceServerMockRecorder is the mock recorder for MockUnsafeTopupServiceServer.
type MockUnsafeTopupServiceServerMockRecorder struct {
	mock *MockUnsafeTopupServiceServer
}

// NewMockUnsafeTopupServiceServer creates a new mock instance.
func NewMockUnsafeTopupServiceServer(ctrl *gomock.Controller) *MockUnsafeTopupServiceServer {
	mock := &MockUnsafeTopupServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTopupServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTopupServiceServer) EXPECT() *MockUnsafeTopupServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTopupServiceServer mocks base method.
func (m *MockUnsafeTopupServiceServer) mustEmbedUnimplementedTopupServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTopupServiceServer")
}

// mustEmbedUnimplementedTopupServiceServer indicates an expected call of mustEmbedUnimplementedTopupServiceServer.
func (mr *MockUnsafeTopupServiceServerMockRecorder) mustEmbedUnimplementedTopupServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTopupServiceServer", reflect.TypeOf((*MockUnsafeTopupServiceServer)(nil).mustEmbedUnimplementedTopupServiceServer))
}
