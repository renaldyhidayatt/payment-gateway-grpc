// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pb/withdraw_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/pb/withdraw_grpc.pb.go -destination=internal/pb/mocks/withdraw_grpc_mock.go
//

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	pb "MamangRust/paymentgatewaygrpc/internal/pb"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockWithdrawServiceClient is a mock of WithdrawServiceClient interface.
type MockWithdrawServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawServiceClientMockRecorder
	isgomock struct{}
}

// MockWithdrawServiceClientMockRecorder is the mock recorder for MockWithdrawServiceClient.
type MockWithdrawServiceClientMockRecorder struct {
	mock *MockWithdrawServiceClient
}

// NewMockWithdrawServiceClient creates a new mock instance.
func NewMockWithdrawServiceClient(ctrl *gomock.Controller) *MockWithdrawServiceClient {
	mock := &MockWithdrawServiceClient{ctrl: ctrl}
	mock.recorder = &MockWithdrawServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawServiceClient) EXPECT() *MockWithdrawServiceClientMockRecorder {
	return m.recorder
}

// CreateWithdraw mocks base method.
func (m *MockWithdrawServiceClient) CreateWithdraw(ctx context.Context, in *pb.CreateWithdrawRequest, opts ...grpc.CallOption) (*pb.ApiResponseWithdraw, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWithdraw", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithdraw indicates an expected call of CreateWithdraw.
func (mr *MockWithdrawServiceClientMockRecorder) CreateWithdraw(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdraw", reflect.TypeOf((*MockWithdrawServiceClient)(nil).CreateWithdraw), varargs...)
}

// DeleteAllWithdrawPermanent mocks base method.
func (m *MockWithdrawServiceClient) DeleteAllWithdrawPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseWithdrawAll, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllWithdrawPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseWithdrawAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllWithdrawPermanent indicates an expected call of DeleteAllWithdrawPermanent.
func (mr *MockWithdrawServiceClientMockRecorder) DeleteAllWithdrawPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllWithdrawPermanent", reflect.TypeOf((*MockWithdrawServiceClient)(nil).DeleteAllWithdrawPermanent), varargs...)
}

// DeleteWithdrawPermanent mocks base method.
func (m *MockWithdrawServiceClient) DeleteWithdrawPermanent(ctx context.Context, in *pb.FindByIdWithdrawRequest, opts ...grpc.CallOption) (*pb.ApiResponseWithdrawDelete, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWithdrawPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseWithdrawDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWithdrawPermanent indicates an expected call of DeleteWithdrawPermanent.
func (mr *MockWithdrawServiceClientMockRecorder) DeleteWithdrawPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithdrawPermanent", reflect.TypeOf((*MockWithdrawServiceClient)(nil).DeleteWithdrawPermanent), varargs...)
}

// FindAllWithdraw mocks base method.
func (m *MockWithdrawServiceClient) FindAllWithdraw(ctx context.Context, in *pb.FindAllWithdrawRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationWithdraw, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllWithdraw", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithdraw indicates an expected call of FindAllWithdraw.
func (mr *MockWithdrawServiceClientMockRecorder) FindAllWithdraw(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithdraw", reflect.TypeOf((*MockWithdrawServiceClient)(nil).FindAllWithdraw), varargs...)
}

// FindByActive mocks base method.
func (m *MockWithdrawServiceClient) FindByActive(ctx context.Context, in *pb.FindAllWithdrawRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationWithdrawDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByActive", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationWithdrawDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockWithdrawServiceClientMockRecorder) FindByActive(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockWithdrawServiceClient)(nil).FindByActive), varargs...)
}

// FindByCardNumber mocks base method.
func (m *MockWithdrawServiceClient) FindByCardNumber(ctx context.Context, in *pb.FindByCardNumberRequest, opts ...grpc.CallOption) (*pb.ApiResponsesWithdraw, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByCardNumber", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsesWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockWithdrawServiceClientMockRecorder) FindByCardNumber(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockWithdrawServiceClient)(nil).FindByCardNumber), varargs...)
}

// FindByIdWithdraw mocks base method.
func (m *MockWithdrawServiceClient) FindByIdWithdraw(ctx context.Context, in *pb.FindByIdWithdrawRequest, opts ...grpc.CallOption) (*pb.ApiResponseWithdraw, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByIdWithdraw", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdWithdraw indicates an expected call of FindByIdWithdraw.
func (mr *MockWithdrawServiceClientMockRecorder) FindByIdWithdraw(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdWithdraw", reflect.TypeOf((*MockWithdrawServiceClient)(nil).FindByIdWithdraw), varargs...)
}

// FindByTrashed mocks base method.
func (m *MockWithdrawServiceClient) FindByTrashed(ctx context.Context, in *pb.FindAllWithdrawRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationWithdrawDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByTrashed", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationWithdrawDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockWithdrawServiceClientMockRecorder) FindByTrashed(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockWithdrawServiceClient)(nil).FindByTrashed), varargs...)
}

// RestoreAllWithdraw mocks base method.
func (m *MockWithdrawServiceClient) RestoreAllWithdraw(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ApiResponseWithdrawAll, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreAllWithdraw", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseWithdrawAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllWithdraw indicates an expected call of RestoreAllWithdraw.
func (mr *MockWithdrawServiceClientMockRecorder) RestoreAllWithdraw(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllWithdraw", reflect.TypeOf((*MockWithdrawServiceClient)(nil).RestoreAllWithdraw), varargs...)
}

// RestoreWithdraw mocks base method.
func (m *MockWithdrawServiceClient) RestoreWithdraw(ctx context.Context, in *pb.FindByIdWithdrawRequest, opts ...grpc.CallOption) (*pb.ApiResponseWithdraw, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreWithdraw", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreWithdraw indicates an expected call of RestoreWithdraw.
func (mr *MockWithdrawServiceClientMockRecorder) RestoreWithdraw(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreWithdraw", reflect.TypeOf((*MockWithdrawServiceClient)(nil).RestoreWithdraw), varargs...)
}

// TrashedWithdraw mocks base method.
func (m *MockWithdrawServiceClient) TrashedWithdraw(ctx context.Context, in *pb.FindByIdWithdrawRequest, opts ...grpc.CallOption) (*pb.ApiResponseWithdraw, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrashedWithdraw", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedWithdraw indicates an expected call of TrashedWithdraw.
func (mr *MockWithdrawServiceClientMockRecorder) TrashedWithdraw(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedWithdraw", reflect.TypeOf((*MockWithdrawServiceClient)(nil).TrashedWithdraw), varargs...)
}

// UpdateWithdraw mocks base method.
func (m *MockWithdrawServiceClient) UpdateWithdraw(ctx context.Context, in *pb.UpdateWithdrawRequest, opts ...grpc.CallOption) (*pb.ApiResponseWithdraw, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWithdraw", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithdraw indicates an expected call of UpdateWithdraw.
func (mr *MockWithdrawServiceClientMockRecorder) UpdateWithdraw(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithdraw", reflect.TypeOf((*MockWithdrawServiceClient)(nil).UpdateWithdraw), varargs...)
}

// MockWithdrawServiceServer is a mock of WithdrawServiceServer interface.
type MockWithdrawServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawServiceServerMockRecorder
	isgomock struct{}
}

// MockWithdrawServiceServerMockRecorder is the mock recorder for MockWithdrawServiceServer.
type MockWithdrawServiceServerMockRecorder struct {
	mock *MockWithdrawServiceServer
}

// NewMockWithdrawServiceServer creates a new mock instance.
func NewMockWithdrawServiceServer(ctrl *gomock.Controller) *MockWithdrawServiceServer {
	mock := &MockWithdrawServiceServer{ctrl: ctrl}
	mock.recorder = &MockWithdrawServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawServiceServer) EXPECT() *MockWithdrawServiceServerMockRecorder {
	return m.recorder
}

// CreateWithdraw mocks base method.
func (m *MockWithdrawServiceServer) CreateWithdraw(arg0 context.Context, arg1 *pb.CreateWithdrawRequest) (*pb.ApiResponseWithdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdraw", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithdraw indicates an expected call of CreateWithdraw.
func (mr *MockWithdrawServiceServerMockRecorder) CreateWithdraw(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdraw", reflect.TypeOf((*MockWithdrawServiceServer)(nil).CreateWithdraw), arg0, arg1)
}

// DeleteAllWithdrawPermanent mocks base method.
func (m *MockWithdrawServiceServer) DeleteAllWithdrawPermanent(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseWithdrawAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllWithdrawPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseWithdrawAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllWithdrawPermanent indicates an expected call of DeleteAllWithdrawPermanent.
func (mr *MockWithdrawServiceServerMockRecorder) DeleteAllWithdrawPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllWithdrawPermanent", reflect.TypeOf((*MockWithdrawServiceServer)(nil).DeleteAllWithdrawPermanent), arg0, arg1)
}

// DeleteWithdrawPermanent mocks base method.
func (m *MockWithdrawServiceServer) DeleteWithdrawPermanent(arg0 context.Context, arg1 *pb.FindByIdWithdrawRequest) (*pb.ApiResponseWithdrawDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWithdrawPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseWithdrawDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWithdrawPermanent indicates an expected call of DeleteWithdrawPermanent.
func (mr *MockWithdrawServiceServerMockRecorder) DeleteWithdrawPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithdrawPermanent", reflect.TypeOf((*MockWithdrawServiceServer)(nil).DeleteWithdrawPermanent), arg0, arg1)
}

// FindAllWithdraw mocks base method.
func (m *MockWithdrawServiceServer) FindAllWithdraw(arg0 context.Context, arg1 *pb.FindAllWithdrawRequest) (*pb.ApiResponsePaginationWithdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWithdraw", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithdraw indicates an expected call of FindAllWithdraw.
func (mr *MockWithdrawServiceServerMockRecorder) FindAllWithdraw(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithdraw", reflect.TypeOf((*MockWithdrawServiceServer)(nil).FindAllWithdraw), arg0, arg1)
}

// FindByActive mocks base method.
func (m *MockWithdrawServiceServer) FindByActive(arg0 context.Context, arg1 *pb.FindAllWithdrawRequest) (*pb.ApiResponsePaginationWithdrawDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationWithdrawDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockWithdrawServiceServerMockRecorder) FindByActive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockWithdrawServiceServer)(nil).FindByActive), arg0, arg1)
}

// FindByCardNumber mocks base method.
func (m *MockWithdrawServiceServer) FindByCardNumber(arg0 context.Context, arg1 *pb.FindByCardNumberRequest) (*pb.ApiResponsesWithdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsesWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockWithdrawServiceServerMockRecorder) FindByCardNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockWithdrawServiceServer)(nil).FindByCardNumber), arg0, arg1)
}

// FindByIdWithdraw mocks base method.
func (m *MockWithdrawServiceServer) FindByIdWithdraw(arg0 context.Context, arg1 *pb.FindByIdWithdrawRequest) (*pb.ApiResponseWithdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdWithdraw", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdWithdraw indicates an expected call of FindByIdWithdraw.
func (mr *MockWithdrawServiceServerMockRecorder) FindByIdWithdraw(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdWithdraw", reflect.TypeOf((*MockWithdrawServiceServer)(nil).FindByIdWithdraw), arg0, arg1)
}

// FindByTrashed mocks base method.
func (m *MockWithdrawServiceServer) FindByTrashed(arg0 context.Context, arg1 *pb.FindAllWithdrawRequest) (*pb.ApiResponsePaginationWithdrawDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationWithdrawDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockWithdrawServiceServerMockRecorder) FindByTrashed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockWithdrawServiceServer)(nil).FindByTrashed), arg0, arg1)
}

// RestoreAllWithdraw mocks base method.
func (m *MockWithdrawServiceServer) RestoreAllWithdraw(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ApiResponseWithdrawAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllWithdraw", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseWithdrawAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllWithdraw indicates an expected call of RestoreAllWithdraw.
func (mr *MockWithdrawServiceServerMockRecorder) RestoreAllWithdraw(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllWithdraw", reflect.TypeOf((*MockWithdrawServiceServer)(nil).RestoreAllWithdraw), arg0, arg1)
}

// RestoreWithdraw mocks base method.
func (m *MockWithdrawServiceServer) RestoreWithdraw(arg0 context.Context, arg1 *pb.FindByIdWithdrawRequest) (*pb.ApiResponseWithdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreWithdraw", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreWithdraw indicates an expected call of RestoreWithdraw.
func (mr *MockWithdrawServiceServerMockRecorder) RestoreWithdraw(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreWithdraw", reflect.TypeOf((*MockWithdrawServiceServer)(nil).RestoreWithdraw), arg0, arg1)
}

// TrashedWithdraw mocks base method.
func (m *MockWithdrawServiceServer) TrashedWithdraw(arg0 context.Context, arg1 *pb.FindByIdWithdrawRequest) (*pb.ApiResponseWithdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedWithdraw", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedWithdraw indicates an expected call of TrashedWithdraw.
func (mr *MockWithdrawServiceServerMockRecorder) TrashedWithdraw(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedWithdraw", reflect.TypeOf((*MockWithdrawServiceServer)(nil).TrashedWithdraw), arg0, arg1)
}

// UpdateWithdraw mocks base method.
func (m *MockWithdrawServiceServer) UpdateWithdraw(arg0 context.Context, arg1 *pb.UpdateWithdrawRequest) (*pb.ApiResponseWithdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithdraw", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithdraw indicates an expected call of UpdateWithdraw.
func (mr *MockWithdrawServiceServerMockRecorder) UpdateWithdraw(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithdraw", reflect.TypeOf((*MockWithdrawServiceServer)(nil).UpdateWithdraw), arg0, arg1)
}

// mustEmbedUnimplementedWithdrawServiceServer mocks base method.
func (m *MockWithdrawServiceServer) mustEmbedUnimplementedWithdrawServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWithdrawServiceServer")
}

// mustEmbedUnimplementedWithdrawServiceServer indicates an expected call of mustEmbedUnimplementedWithdrawServiceServer.
func (mr *MockWithdrawServiceServerMockRecorder) mustEmbedUnimplementedWithdrawServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWithdrawServiceServer", reflect.TypeOf((*MockWithdrawServiceServer)(nil).mustEmbedUnimplementedWithdrawServiceServer))
}

// MockUnsafeWithdrawServiceServer is a mock of UnsafeWithdrawServiceServer interface.
type MockUnsafeWithdrawServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeWithdrawServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeWithdrawServiceServerMockRecorder is the mock recorder for MockUnsafeWithdrawServiceServer.
type MockUnsafeWithdrawServiceServerMockRecorder struct {
	mock *MockUnsafeWithdrawServiceServer
}

// NewMockUnsafeWithdrawServiceServer creates a new mock instance.
func NewMockUnsafeWithdrawServiceServer(ctrl *gomock.Controller) *MockUnsafeWithdrawServiceServer {
	mock := &MockUnsafeWithdrawServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeWithdrawServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeWithdrawServiceServer) EXPECT() *MockUnsafeWithdrawServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedWithdrawServiceServer mocks base method.
func (m *MockUnsafeWithdrawServiceServer) mustEmbedUnimplementedWithdrawServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWithdrawServiceServer")
}

// mustEmbedUnimplementedWithdrawServiceServer indicates an expected call of mustEmbedUnimplementedWithdrawServiceServer.
func (mr *MockUnsafeWithdrawServiceServerMockRecorder) mustEmbedUnimplementedWithdrawServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWithdrawServiceServer", reflect.TypeOf((*MockUnsafeWithdrawServiceServer)(nil).mustEmbedUnimplementedWithdrawServiceServer))
}
