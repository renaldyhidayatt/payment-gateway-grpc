// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pb/transfer_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/pb/transfer_grpc.pb.go -destination=internal/pb/mocks/transfer_grpc_mock.go
//

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	pb "MamangRust/paymentgatewaygrpc/internal/pb"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTransferServiceClient is a mock of TransferServiceClient interface.
type MockTransferServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceClientMockRecorder
	isgomock struct{}
}

// MockTransferServiceClientMockRecorder is the mock recorder for MockTransferServiceClient.
type MockTransferServiceClientMockRecorder struct {
	mock *MockTransferServiceClient
}

// NewMockTransferServiceClient creates a new mock instance.
func NewMockTransferServiceClient(ctrl *gomock.Controller) *MockTransferServiceClient {
	mock := &MockTransferServiceClient{ctrl: ctrl}
	mock.recorder = &MockTransferServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferServiceClient) EXPECT() *MockTransferServiceClientMockRecorder {
	return m.recorder
}

// CreateTransfer mocks base method.
func (m *MockTransferServiceClient) CreateTransfer(ctx context.Context, in *pb.CreateTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockTransferServiceClientMockRecorder) CreateTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).CreateTransfer), varargs...)
}

// DeleteTransferPermanent mocks base method.
func (m *MockTransferServiceClient) DeleteTransferPermanent(ctx context.Context, in *pb.FindByIdTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransferDelete, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTransferPermanent", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransferDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransferPermanent indicates an expected call of DeleteTransferPermanent.
func (mr *MockTransferServiceClientMockRecorder) DeleteTransferPermanent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferPermanent", reflect.TypeOf((*MockTransferServiceClient)(nil).DeleteTransferPermanent), varargs...)
}

// FindAllTransfer mocks base method.
func (m *MockTransferServiceClient) FindAllTransfer(ctx context.Context, in *pb.FindAllTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTransfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransfer indicates an expected call of FindAllTransfer.
func (mr *MockTransferServiceClientMockRecorder) FindAllTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).FindAllTransfer), varargs...)
}

// FindByActiveTransfer mocks base method.
func (m *MockTransferServiceClient) FindByActiveTransfer(ctx context.Context, in *pb.FindAllTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTransferDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByActiveTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransferDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActiveTransfer indicates an expected call of FindByActiveTransfer.
func (mr *MockTransferServiceClientMockRecorder) FindByActiveTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActiveTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).FindByActiveTransfer), varargs...)
}

// FindByIdTransfer mocks base method.
func (m *MockTransferServiceClient) FindByIdTransfer(ctx context.Context, in *pb.FindByIdTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByIdTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdTransfer indicates an expected call of FindByIdTransfer.
func (mr *MockTransferServiceClientMockRecorder) FindByIdTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).FindByIdTransfer), varargs...)
}

// FindByTrashedTransfer mocks base method.
func (m *MockTransferServiceClient) FindByTrashedTransfer(ctx context.Context, in *pb.FindAllTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponsePaginationTransferDeleteAt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByTrashedTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransferDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashedTransfer indicates an expected call of FindByTrashedTransfer.
func (mr *MockTransferServiceClientMockRecorder) FindByTrashedTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashedTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).FindByTrashedTransfer), varargs...)
}

// FindTransferByTransferFrom mocks base method.
func (m *MockTransferServiceClient) FindTransferByTransferFrom(ctx context.Context, in *pb.FindTransferByTransferFromRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfers, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindTransferByTransferFrom", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransferByTransferFrom indicates an expected call of FindTransferByTransferFrom.
func (mr *MockTransferServiceClientMockRecorder) FindTransferByTransferFrom(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferFrom", reflect.TypeOf((*MockTransferServiceClient)(nil).FindTransferByTransferFrom), varargs...)
}

// FindTransferByTransferTo mocks base method.
func (m *MockTransferServiceClient) FindTransferByTransferTo(ctx context.Context, in *pb.FindTransferByTransferToRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfers, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindTransferByTransferTo", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransferByTransferTo indicates an expected call of FindTransferByTransferTo.
func (mr *MockTransferServiceClientMockRecorder) FindTransferByTransferTo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferTo", reflect.TypeOf((*MockTransferServiceClient)(nil).FindTransferByTransferTo), varargs...)
}

// RestoreTransfer mocks base method.
func (m *MockTransferServiceClient) RestoreTransfer(ctx context.Context, in *pb.FindByIdTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTransfer indicates an expected call of RestoreTransfer.
func (mr *MockTransferServiceClientMockRecorder) RestoreTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).RestoreTransfer), varargs...)
}

// TrashedTransfer mocks base method.
func (m *MockTransferServiceClient) TrashedTransfer(ctx context.Context, in *pb.FindByIdTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrashedTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTransfer indicates an expected call of TrashedTransfer.
func (mr *MockTransferServiceClientMockRecorder) TrashedTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).TrashedTransfer), varargs...)
}

// UpdateTransfer mocks base method.
func (m *MockTransferServiceClient) UpdateTransfer(ctx context.Context, in *pb.UpdateTransferRequest, opts ...grpc.CallOption) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTransfer", varargs...)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransfer indicates an expected call of UpdateTransfer.
func (mr *MockTransferServiceClientMockRecorder) UpdateTransfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransfer", reflect.TypeOf((*MockTransferServiceClient)(nil).UpdateTransfer), varargs...)
}

// MockTransferServiceServer is a mock of TransferServiceServer interface.
type MockTransferServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceServerMockRecorder
	isgomock struct{}
}

// MockTransferServiceServerMockRecorder is the mock recorder for MockTransferServiceServer.
type MockTransferServiceServerMockRecorder struct {
	mock *MockTransferServiceServer
}

// NewMockTransferServiceServer creates a new mock instance.
func NewMockTransferServiceServer(ctrl *gomock.Controller) *MockTransferServiceServer {
	mock := &MockTransferServiceServer{ctrl: ctrl}
	mock.recorder = &MockTransferServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferServiceServer) EXPECT() *MockTransferServiceServerMockRecorder {
	return m.recorder
}

// CreateTransfer mocks base method.
func (m *MockTransferServiceServer) CreateTransfer(arg0 context.Context, arg1 *pb.CreateTransferRequest) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockTransferServiceServerMockRecorder) CreateTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).CreateTransfer), arg0, arg1)
}

// DeleteTransferPermanent mocks base method.
func (m *MockTransferServiceServer) DeleteTransferPermanent(arg0 context.Context, arg1 *pb.FindByIdTransferRequest) (*pb.ApiResponseTransferDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransferPermanent", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransferDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransferPermanent indicates an expected call of DeleteTransferPermanent.
func (mr *MockTransferServiceServerMockRecorder) DeleteTransferPermanent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferPermanent", reflect.TypeOf((*MockTransferServiceServer)(nil).DeleteTransferPermanent), arg0, arg1)
}

// FindAllTransfer mocks base method.
func (m *MockTransferServiceServer) FindAllTransfer(arg0 context.Context, arg1 *pb.FindAllTransferRequest) (*pb.ApiResponsePaginationTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTransfer indicates an expected call of FindAllTransfer.
func (mr *MockTransferServiceServerMockRecorder) FindAllTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).FindAllTransfer), arg0, arg1)
}

// FindByActiveTransfer mocks base method.
func (m *MockTransferServiceServer) FindByActiveTransfer(arg0 context.Context, arg1 *pb.FindAllTransferRequest) (*pb.ApiResponsePaginationTransferDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActiveTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransferDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActiveTransfer indicates an expected call of FindByActiveTransfer.
func (mr *MockTransferServiceServerMockRecorder) FindByActiveTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActiveTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).FindByActiveTransfer), arg0, arg1)
}

// FindByIdTransfer mocks base method.
func (m *MockTransferServiceServer) FindByIdTransfer(arg0 context.Context, arg1 *pb.FindByIdTransferRequest) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdTransfer indicates an expected call of FindByIdTransfer.
func (mr *MockTransferServiceServerMockRecorder) FindByIdTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).FindByIdTransfer), arg0, arg1)
}

// FindByTrashedTransfer mocks base method.
func (m *MockTransferServiceServer) FindByTrashedTransfer(arg0 context.Context, arg1 *pb.FindAllTransferRequest) (*pb.ApiResponsePaginationTransferDeleteAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashedTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponsePaginationTransferDeleteAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTrashedTransfer indicates an expected call of FindByTrashedTransfer.
func (mr *MockTransferServiceServerMockRecorder) FindByTrashedTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashedTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).FindByTrashedTransfer), arg0, arg1)
}

// FindTransferByTransferFrom mocks base method.
func (m *MockTransferServiceServer) FindTransferByTransferFrom(arg0 context.Context, arg1 *pb.FindTransferByTransferFromRequest) (*pb.ApiResponseTransfers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransferByTransferFrom", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransferByTransferFrom indicates an expected call of FindTransferByTransferFrom.
func (mr *MockTransferServiceServerMockRecorder) FindTransferByTransferFrom(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferFrom", reflect.TypeOf((*MockTransferServiceServer)(nil).FindTransferByTransferFrom), arg0, arg1)
}

// FindTransferByTransferTo mocks base method.
func (m *MockTransferServiceServer) FindTransferByTransferTo(arg0 context.Context, arg1 *pb.FindTransferByTransferToRequest) (*pb.ApiResponseTransfers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransferByTransferTo", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransferByTransferTo indicates an expected call of FindTransferByTransferTo.
func (mr *MockTransferServiceServerMockRecorder) FindTransferByTransferTo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferTo", reflect.TypeOf((*MockTransferServiceServer)(nil).FindTransferByTransferTo), arg0, arg1)
}

// RestoreTransfer mocks base method.
func (m *MockTransferServiceServer) RestoreTransfer(arg0 context.Context, arg1 *pb.FindByIdTransferRequest) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTransfer indicates an expected call of RestoreTransfer.
func (mr *MockTransferServiceServerMockRecorder) RestoreTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).RestoreTransfer), arg0, arg1)
}

// TrashedTransfer mocks base method.
func (m *MockTransferServiceServer) TrashedTransfer(arg0 context.Context, arg1 *pb.FindByIdTransferRequest) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTransfer indicates an expected call of TrashedTransfer.
func (mr *MockTransferServiceServerMockRecorder) TrashedTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).TrashedTransfer), arg0, arg1)
}

// UpdateTransfer mocks base method.
func (m *MockTransferServiceServer) UpdateTransfer(arg0 context.Context, arg1 *pb.UpdateTransferRequest) (*pb.ApiResponseTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransfer", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApiResponseTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransfer indicates an expected call of UpdateTransfer.
func (mr *MockTransferServiceServerMockRecorder) UpdateTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransfer", reflect.TypeOf((*MockTransferServiceServer)(nil).UpdateTransfer), arg0, arg1)
}

// mustEmbedUnimplementedTransferServiceServer mocks base method.
func (m *MockTransferServiceServer) mustEmbedUnimplementedTransferServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTransferServiceServer")
}

// mustEmbedUnimplementedTransferServiceServer indicates an expected call of mustEmbedUnimplementedTransferServiceServer.
func (mr *MockTransferServiceServerMockRecorder) mustEmbedUnimplementedTransferServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTransferServiceServer", reflect.TypeOf((*MockTransferServiceServer)(nil).mustEmbedUnimplementedTransferServiceServer))
}

// MockUnsafeTransferServiceServer is a mock of UnsafeTransferServiceServer interface.
type MockUnsafeTransferServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTransferServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeTransferServiceServerMockRecorder is the mock recorder for MockUnsafeTransferServiceServer.
type MockUnsafeTransferServiceServerMockRecorder struct {
	mock *MockUnsafeTransferServiceServer
}

// NewMockUnsafeTransferServiceServer creates a new mock instance.
func NewMockUnsafeTransferServiceServer(ctrl *gomock.Controller) *MockUnsafeTransferServiceServer {
	mock := &MockUnsafeTransferServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTransferServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTransferServiceServer) EXPECT() *MockUnsafeTransferServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTransferServiceServer mocks base method.
func (m *MockUnsafeTransferServiceServer) mustEmbedUnimplementedTransferServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTransferServiceServer")
}

// mustEmbedUnimplementedTransferServiceServer indicates an expected call of mustEmbedUnimplementedTransferServiceServer.
func (mr *MockUnsafeTransferServiceServerMockRecorder) mustEmbedUnimplementedTransferServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTransferServiceServer", reflect.TypeOf((*MockUnsafeTransferServiceServer)(nil).mustEmbedUnimplementedTransferServiceServer))
}
