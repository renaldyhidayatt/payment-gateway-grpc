// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: transaction.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionService_FindAllTransaction_FullMethodName                    = "/pb.TransactionService/FindAllTransaction"
	TransactionService_FindAllTransactionByCardNumber_FullMethodName        = "/pb.TransactionService/FindAllTransactionByCardNumber"
	TransactionService_FindByIdTransaction_FullMethodName                   = "/pb.TransactionService/FindByIdTransaction"
	TransactionService_FindMonthlyTransactionStatusSuccess_FullMethodName   = "/pb.TransactionService/FindMonthlyTransactionStatusSuccess"
	TransactionService_FindYearlyTransactionStatusSuccess_FullMethodName    = "/pb.TransactionService/FindYearlyTransactionStatusSuccess"
	TransactionService_FindMonthlyTransactionStatusFailed_FullMethodName    = "/pb.TransactionService/FindMonthlyTransactionStatusFailed"
	TransactionService_FindYearlyTransactionStatusFailed_FullMethodName     = "/pb.TransactionService/FindYearlyTransactionStatusFailed"
	TransactionService_FindMonthlyPaymentMethods_FullMethodName             = "/pb.TransactionService/FindMonthlyPaymentMethods"
	TransactionService_FindYearlyPaymentMethods_FullMethodName              = "/pb.TransactionService/FindYearlyPaymentMethods"
	TransactionService_FindMonthlyAmounts_FullMethodName                    = "/pb.TransactionService/FindMonthlyAmounts"
	TransactionService_FindYearlyAmounts_FullMethodName                     = "/pb.TransactionService/FindYearlyAmounts"
	TransactionService_FindMonthlyPaymentMethodsByCardNumber_FullMethodName = "/pb.TransactionService/FindMonthlyPaymentMethodsByCardNumber"
	TransactionService_FindYearlyPaymentMethodsByCardNumber_FullMethodName  = "/pb.TransactionService/FindYearlyPaymentMethodsByCardNumber"
	TransactionService_FindMonthlyAmountsByCardNumber_FullMethodName        = "/pb.TransactionService/FindMonthlyAmountsByCardNumber"
	TransactionService_FindYearlyAmountsByCardNumber_FullMethodName         = "/pb.TransactionService/FindYearlyAmountsByCardNumber"
	TransactionService_FindTransactionByMerchantId_FullMethodName           = "/pb.TransactionService/FindTransactionByMerchantId"
	TransactionService_FindByActiveTransaction_FullMethodName               = "/pb.TransactionService/FindByActiveTransaction"
	TransactionService_FindByTrashedTransaction_FullMethodName              = "/pb.TransactionService/FindByTrashedTransaction"
	TransactionService_CreateTransaction_FullMethodName                     = "/pb.TransactionService/CreateTransaction"
	TransactionService_UpdateTransaction_FullMethodName                     = "/pb.TransactionService/UpdateTransaction"
	TransactionService_TrashedTransaction_FullMethodName                    = "/pb.TransactionService/TrashedTransaction"
	TransactionService_RestoreTransaction_FullMethodName                    = "/pb.TransactionService/RestoreTransaction"
	TransactionService_DeleteTransactionPermanent_FullMethodName            = "/pb.TransactionService/DeleteTransactionPermanent"
	TransactionService_RestoreAllTransaction_FullMethodName                 = "/pb.TransactionService/RestoreAllTransaction"
	TransactionService_DeleteAllTransactionPermanent_FullMethodName         = "/pb.TransactionService/DeleteAllTransactionPermanent"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	FindAllTransaction(ctx context.Context, in *FindAllTransactionRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransaction, error)
	FindAllTransactionByCardNumber(ctx context.Context, in *FindAllTransactionCardNumberRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransaction, error)
	FindByIdTransaction(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error)
	FindMonthlyTransactionStatusSuccess(ctx context.Context, in *FindMonthlyTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionMonthStatusSuccess, error)
	FindYearlyTransactionStatusSuccess(ctx context.Context, in *FindYearTransaction, opts ...grpc.CallOption) (*ApiResponseTransactionYearStatusSuccess, error)
	FindMonthlyTransactionStatusFailed(ctx context.Context, in *FindMonthlyTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionMonthStatusFailed, error)
	FindYearlyTransactionStatusFailed(ctx context.Context, in *FindYearTransaction, opts ...grpc.CallOption) (*ApiResponseTransactionYearStatusFailed, error)
	FindMonthlyPaymentMethods(ctx context.Context, in *FindYearTransaction, opts ...grpc.CallOption) (*ApiResponseTransactionMonthMethod, error)
	FindYearlyPaymentMethods(ctx context.Context, in *FindYearTransaction, opts ...grpc.CallOption) (*ApiResponseTransactionYearMethod, error)
	FindMonthlyAmounts(ctx context.Context, in *FindYearTransaction, opts ...grpc.CallOption) (*ApiResponseTransactionMonthAmount, error)
	FindYearlyAmounts(ctx context.Context, in *FindYearTransaction, opts ...grpc.CallOption) (*ApiResponseTransactionYearAmount, error)
	FindMonthlyPaymentMethodsByCardNumber(ctx context.Context, in *FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionMonthMethod, error)
	FindYearlyPaymentMethodsByCardNumber(ctx context.Context, in *FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionYearMethod, error)
	FindMonthlyAmountsByCardNumber(ctx context.Context, in *FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionMonthAmount, error)
	FindYearlyAmountsByCardNumber(ctx context.Context, in *FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionYearAmount, error)
	FindTransactionByMerchantId(ctx context.Context, in *FindTransactionByMerchantIdRequest, opts ...grpc.CallOption) (*ApiResponseTransactions, error)
	FindByActiveTransaction(ctx context.Context, in *FindAllTransactionRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransactionDeleteAt, error)
	FindByTrashedTransaction(ctx context.Context, in *FindAllTransactionRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransactionDeleteAt, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error)
	UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error)
	TrashedTransaction(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error)
	RestoreTransaction(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error)
	DeleteTransactionPermanent(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionDelete, error)
	RestoreAllTransaction(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransactionAll, error)
	DeleteAllTransactionPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransactionAll, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) FindAllTransaction(ctx context.Context, in *FindAllTransactionRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransaction)
	err := c.cc.Invoke(ctx, TransactionService_FindAllTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindAllTransactionByCardNumber(ctx context.Context, in *FindAllTransactionCardNumberRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransaction)
	err := c.cc.Invoke(ctx, TransactionService_FindAllTransactionByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindByIdTransaction(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransaction)
	err := c.cc.Invoke(ctx, TransactionService_FindByIdTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindMonthlyTransactionStatusSuccess(ctx context.Context, in *FindMonthlyTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionMonthStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthStatusSuccess)
	err := c.cc.Invoke(ctx, TransactionService_FindMonthlyTransactionStatusSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindYearlyTransactionStatusSuccess(ctx context.Context, in *FindYearTransaction, opts ...grpc.CallOption) (*ApiResponseTransactionYearStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearStatusSuccess)
	err := c.cc.Invoke(ctx, TransactionService_FindYearlyTransactionStatusSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindMonthlyTransactionStatusFailed(ctx context.Context, in *FindMonthlyTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionMonthStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthStatusFailed)
	err := c.cc.Invoke(ctx, TransactionService_FindMonthlyTransactionStatusFailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindYearlyTransactionStatusFailed(ctx context.Context, in *FindYearTransaction, opts ...grpc.CallOption) (*ApiResponseTransactionYearStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearStatusFailed)
	err := c.cc.Invoke(ctx, TransactionService_FindYearlyTransactionStatusFailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindMonthlyPaymentMethods(ctx context.Context, in *FindYearTransaction, opts ...grpc.CallOption) (*ApiResponseTransactionMonthMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthMethod)
	err := c.cc.Invoke(ctx, TransactionService_FindMonthlyPaymentMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindYearlyPaymentMethods(ctx context.Context, in *FindYearTransaction, opts ...grpc.CallOption) (*ApiResponseTransactionYearMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearMethod)
	err := c.cc.Invoke(ctx, TransactionService_FindYearlyPaymentMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindMonthlyAmounts(ctx context.Context, in *FindYearTransaction, opts ...grpc.CallOption) (*ApiResponseTransactionMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthAmount)
	err := c.cc.Invoke(ctx, TransactionService_FindMonthlyAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindYearlyAmounts(ctx context.Context, in *FindYearTransaction, opts ...grpc.CallOption) (*ApiResponseTransactionYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearAmount)
	err := c.cc.Invoke(ctx, TransactionService_FindYearlyAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindMonthlyPaymentMethodsByCardNumber(ctx context.Context, in *FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionMonthMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthMethod)
	err := c.cc.Invoke(ctx, TransactionService_FindMonthlyPaymentMethodsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindYearlyPaymentMethodsByCardNumber(ctx context.Context, in *FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionYearMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearMethod)
	err := c.cc.Invoke(ctx, TransactionService_FindYearlyPaymentMethodsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindMonthlyAmountsByCardNumber(ctx context.Context, in *FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthAmount)
	err := c.cc.Invoke(ctx, TransactionService_FindMonthlyAmountsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindYearlyAmountsByCardNumber(ctx context.Context, in *FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearAmount)
	err := c.cc.Invoke(ctx, TransactionService_FindYearlyAmountsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindTransactionByMerchantId(ctx context.Context, in *FindTransactionByMerchantIdRequest, opts ...grpc.CallOption) (*ApiResponseTransactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactions)
	err := c.cc.Invoke(ctx, TransactionService_FindTransactionByMerchantId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindByActiveTransaction(ctx context.Context, in *FindAllTransactionRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransactionDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransactionDeleteAt)
	err := c.cc.Invoke(ctx, TransactionService_FindByActiveTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) FindByTrashedTransaction(ctx context.Context, in *FindAllTransactionRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransactionDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransactionDeleteAt)
	err := c.cc.Invoke(ctx, TransactionService_FindByTrashedTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransaction)
	err := c.cc.Invoke(ctx, TransactionService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransaction)
	err := c.cc.Invoke(ctx, TransactionService_UpdateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) TrashedTransaction(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransaction)
	err := c.cc.Invoke(ctx, TransactionService_TrashedTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) RestoreTransaction(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransaction)
	err := c.cc.Invoke(ctx, TransactionService_RestoreTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeleteTransactionPermanent(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionDelete)
	err := c.cc.Invoke(ctx, TransactionService_DeleteTransactionPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) RestoreAllTransaction(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransactionAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionAll)
	err := c.cc.Invoke(ctx, TransactionService_RestoreAllTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeleteAllTransactionPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransactionAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionAll)
	err := c.cc.Invoke(ctx, TransactionService_DeleteAllTransactionPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility.
type TransactionServiceServer interface {
	FindAllTransaction(context.Context, *FindAllTransactionRequest) (*ApiResponsePaginationTransaction, error)
	FindAllTransactionByCardNumber(context.Context, *FindAllTransactionCardNumberRequest) (*ApiResponsePaginationTransaction, error)
	FindByIdTransaction(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransaction, error)
	FindMonthlyTransactionStatusSuccess(context.Context, *FindMonthlyTransactionStatus) (*ApiResponseTransactionMonthStatusSuccess, error)
	FindYearlyTransactionStatusSuccess(context.Context, *FindYearTransaction) (*ApiResponseTransactionYearStatusSuccess, error)
	FindMonthlyTransactionStatusFailed(context.Context, *FindMonthlyTransactionStatus) (*ApiResponseTransactionMonthStatusFailed, error)
	FindYearlyTransactionStatusFailed(context.Context, *FindYearTransaction) (*ApiResponseTransactionYearStatusFailed, error)
	FindMonthlyPaymentMethods(context.Context, *FindYearTransaction) (*ApiResponseTransactionMonthMethod, error)
	FindYearlyPaymentMethods(context.Context, *FindYearTransaction) (*ApiResponseTransactionYearMethod, error)
	FindMonthlyAmounts(context.Context, *FindYearTransaction) (*ApiResponseTransactionMonthAmount, error)
	FindYearlyAmounts(context.Context, *FindYearTransaction) (*ApiResponseTransactionYearAmount, error)
	FindMonthlyPaymentMethodsByCardNumber(context.Context, *FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionMonthMethod, error)
	FindYearlyPaymentMethodsByCardNumber(context.Context, *FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionYearMethod, error)
	FindMonthlyAmountsByCardNumber(context.Context, *FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionMonthAmount, error)
	FindYearlyAmountsByCardNumber(context.Context, *FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionYearAmount, error)
	FindTransactionByMerchantId(context.Context, *FindTransactionByMerchantIdRequest) (*ApiResponseTransactions, error)
	FindByActiveTransaction(context.Context, *FindAllTransactionRequest) (*ApiResponsePaginationTransactionDeleteAt, error)
	FindByTrashedTransaction(context.Context, *FindAllTransactionRequest) (*ApiResponsePaginationTransactionDeleteAt, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*ApiResponseTransaction, error)
	UpdateTransaction(context.Context, *UpdateTransactionRequest) (*ApiResponseTransaction, error)
	TrashedTransaction(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransaction, error)
	RestoreTransaction(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransaction, error)
	DeleteTransactionPermanent(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransactionDelete, error)
	RestoreAllTransaction(context.Context, *emptypb.Empty) (*ApiResponseTransactionAll, error)
	DeleteAllTransactionPermanent(context.Context, *emptypb.Empty) (*ApiResponseTransactionAll, error)
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionServiceServer struct{}

func (UnimplementedTransactionServiceServer) FindAllTransaction(context.Context, *FindAllTransactionRequest) (*ApiResponsePaginationTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) FindAllTransactionByCardNumber(context.Context, *FindAllTransactionCardNumberRequest) (*ApiResponsePaginationTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTransactionByCardNumber not implemented")
}
func (UnimplementedTransactionServiceServer) FindByIdTransaction(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) FindMonthlyTransactionStatusSuccess(context.Context, *FindMonthlyTransactionStatus) (*ApiResponseTransactionMonthStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransactionStatusSuccess not implemented")
}
func (UnimplementedTransactionServiceServer) FindYearlyTransactionStatusSuccess(context.Context, *FindYearTransaction) (*ApiResponseTransactionYearStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransactionStatusSuccess not implemented")
}
func (UnimplementedTransactionServiceServer) FindMonthlyTransactionStatusFailed(context.Context, *FindMonthlyTransactionStatus) (*ApiResponseTransactionMonthStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransactionStatusFailed not implemented")
}
func (UnimplementedTransactionServiceServer) FindYearlyTransactionStatusFailed(context.Context, *FindYearTransaction) (*ApiResponseTransactionYearStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransactionStatusFailed not implemented")
}
func (UnimplementedTransactionServiceServer) FindMonthlyPaymentMethods(context.Context, *FindYearTransaction) (*ApiResponseTransactionMonthMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyPaymentMethods not implemented")
}
func (UnimplementedTransactionServiceServer) FindYearlyPaymentMethods(context.Context, *FindYearTransaction) (*ApiResponseTransactionYearMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyPaymentMethods not implemented")
}
func (UnimplementedTransactionServiceServer) FindMonthlyAmounts(context.Context, *FindYearTransaction) (*ApiResponseTransactionMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyAmounts not implemented")
}
func (UnimplementedTransactionServiceServer) FindYearlyAmounts(context.Context, *FindYearTransaction) (*ApiResponseTransactionYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyAmounts not implemented")
}
func (UnimplementedTransactionServiceServer) FindMonthlyPaymentMethodsByCardNumber(context.Context, *FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionMonthMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyPaymentMethodsByCardNumber not implemented")
}
func (UnimplementedTransactionServiceServer) FindYearlyPaymentMethodsByCardNumber(context.Context, *FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionYearMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyPaymentMethodsByCardNumber not implemented")
}
func (UnimplementedTransactionServiceServer) FindMonthlyAmountsByCardNumber(context.Context, *FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyAmountsByCardNumber not implemented")
}
func (UnimplementedTransactionServiceServer) FindYearlyAmountsByCardNumber(context.Context, *FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyAmountsByCardNumber not implemented")
}
func (UnimplementedTransactionServiceServer) FindTransactionByMerchantId(context.Context, *FindTransactionByMerchantIdRequest) (*ApiResponseTransactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTransactionByMerchantId not implemented")
}
func (UnimplementedTransactionServiceServer) FindByActiveTransaction(context.Context, *FindAllTransactionRequest) (*ApiResponsePaginationTransactionDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActiveTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) FindByTrashedTransaction(context.Context, *FindAllTransactionRequest) (*ApiResponsePaginationTransactionDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashedTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*ApiResponseTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) UpdateTransaction(context.Context, *UpdateTransactionRequest) (*ApiResponseTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) TrashedTransaction(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) RestoreTransaction(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) DeleteTransactionPermanent(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransactionDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransactionPermanent not implemented")
}
func (UnimplementedTransactionServiceServer) RestoreAllTransaction(context.Context, *emptypb.Empty) (*ApiResponseTransactionAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) DeleteAllTransactionPermanent(context.Context, *emptypb.Empty) (*ApiResponseTransactionAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllTransactionPermanent not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}
func (UnimplementedTransactionServiceServer) testEmbeddedByValue()                            {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_FindAllTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindAllTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindAllTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindAllTransaction(ctx, req.(*FindAllTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindAllTransactionByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransactionCardNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindAllTransactionByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindAllTransactionByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindAllTransactionByCardNumber(ctx, req.(*FindAllTransactionCardNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindByIdTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindByIdTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindByIdTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindByIdTransaction(ctx, req.(*FindByIdTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindMonthlyTransactionStatusSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMonthlyTransactionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindMonthlyTransactionStatusSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindMonthlyTransactionStatusSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindMonthlyTransactionStatusSuccess(ctx, req.(*FindMonthlyTransactionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindYearlyTransactionStatusSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindYearlyTransactionStatusSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindYearlyTransactionStatusSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindYearlyTransactionStatusSuccess(ctx, req.(*FindYearTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindMonthlyTransactionStatusFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMonthlyTransactionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindMonthlyTransactionStatusFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindMonthlyTransactionStatusFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindMonthlyTransactionStatusFailed(ctx, req.(*FindMonthlyTransactionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindYearlyTransactionStatusFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindYearlyTransactionStatusFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindYearlyTransactionStatusFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindYearlyTransactionStatusFailed(ctx, req.(*FindYearTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindMonthlyPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindMonthlyPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindMonthlyPaymentMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindMonthlyPaymentMethods(ctx, req.(*FindYearTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindYearlyPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindYearlyPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindYearlyPaymentMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindYearlyPaymentMethods(ctx, req.(*FindYearTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindMonthlyAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindMonthlyAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindMonthlyAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindMonthlyAmounts(ctx, req.(*FindYearTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindYearlyAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindYearlyAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindYearlyAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindYearlyAmounts(ctx, req.(*FindYearTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindMonthlyPaymentMethodsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByYearCardNumberTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindMonthlyPaymentMethodsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindMonthlyPaymentMethodsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindMonthlyPaymentMethodsByCardNumber(ctx, req.(*FindByYearCardNumberTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindYearlyPaymentMethodsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByYearCardNumberTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindYearlyPaymentMethodsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindYearlyPaymentMethodsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindYearlyPaymentMethodsByCardNumber(ctx, req.(*FindByYearCardNumberTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindMonthlyAmountsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByYearCardNumberTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindMonthlyAmountsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindMonthlyAmountsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindMonthlyAmountsByCardNumber(ctx, req.(*FindByYearCardNumberTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindYearlyAmountsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByYearCardNumberTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindYearlyAmountsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindYearlyAmountsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindYearlyAmountsByCardNumber(ctx, req.(*FindByYearCardNumberTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindTransactionByMerchantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTransactionByMerchantIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindTransactionByMerchantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindTransactionByMerchantId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindTransactionByMerchantId(ctx, req.(*FindTransactionByMerchantIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindByActiveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindByActiveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindByActiveTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindByActiveTransaction(ctx, req.(*FindAllTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_FindByTrashedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).FindByTrashedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_FindByTrashedTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).FindByTrashedTransaction(ctx, req.(*FindAllTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_UpdateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_TrashedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).TrashedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_TrashedTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).TrashedTransaction(ctx, req.(*FindByIdTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_RestoreTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).RestoreTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_RestoreTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).RestoreTransaction(ctx, req.(*FindByIdTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeleteTransactionPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeleteTransactionPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_DeleteTransactionPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeleteTransactionPermanent(ctx, req.(*FindByIdTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_RestoreAllTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).RestoreAllTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_RestoreAllTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).RestoreAllTransaction(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeleteAllTransactionPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeleteAllTransactionPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_DeleteAllTransactionPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeleteAllTransactionPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllTransaction",
			Handler:    _TransactionService_FindAllTransaction_Handler,
		},
		{
			MethodName: "FindAllTransactionByCardNumber",
			Handler:    _TransactionService_FindAllTransactionByCardNumber_Handler,
		},
		{
			MethodName: "FindByIdTransaction",
			Handler:    _TransactionService_FindByIdTransaction_Handler,
		},
		{
			MethodName: "FindMonthlyTransactionStatusSuccess",
			Handler:    _TransactionService_FindMonthlyTransactionStatusSuccess_Handler,
		},
		{
			MethodName: "FindYearlyTransactionStatusSuccess",
			Handler:    _TransactionService_FindYearlyTransactionStatusSuccess_Handler,
		},
		{
			MethodName: "FindMonthlyTransactionStatusFailed",
			Handler:    _TransactionService_FindMonthlyTransactionStatusFailed_Handler,
		},
		{
			MethodName: "FindYearlyTransactionStatusFailed",
			Handler:    _TransactionService_FindYearlyTransactionStatusFailed_Handler,
		},
		{
			MethodName: "FindMonthlyPaymentMethods",
			Handler:    _TransactionService_FindMonthlyPaymentMethods_Handler,
		},
		{
			MethodName: "FindYearlyPaymentMethods",
			Handler:    _TransactionService_FindYearlyPaymentMethods_Handler,
		},
		{
			MethodName: "FindMonthlyAmounts",
			Handler:    _TransactionService_FindMonthlyAmounts_Handler,
		},
		{
			MethodName: "FindYearlyAmounts",
			Handler:    _TransactionService_FindYearlyAmounts_Handler,
		},
		{
			MethodName: "FindMonthlyPaymentMethodsByCardNumber",
			Handler:    _TransactionService_FindMonthlyPaymentMethodsByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyPaymentMethodsByCardNumber",
			Handler:    _TransactionService_FindYearlyPaymentMethodsByCardNumber_Handler,
		},
		{
			MethodName: "FindMonthlyAmountsByCardNumber",
			Handler:    _TransactionService_FindMonthlyAmountsByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyAmountsByCardNumber",
			Handler:    _TransactionService_FindYearlyAmountsByCardNumber_Handler,
		},
		{
			MethodName: "FindTransactionByMerchantId",
			Handler:    _TransactionService_FindTransactionByMerchantId_Handler,
		},
		{
			MethodName: "FindByActiveTransaction",
			Handler:    _TransactionService_FindByActiveTransaction_Handler,
		},
		{
			MethodName: "FindByTrashedTransaction",
			Handler:    _TransactionService_FindByTrashedTransaction_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _TransactionService_CreateTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _TransactionService_UpdateTransaction_Handler,
		},
		{
			MethodName: "TrashedTransaction",
			Handler:    _TransactionService_TrashedTransaction_Handler,
		},
		{
			MethodName: "RestoreTransaction",
			Handler:    _TransactionService_RestoreTransaction_Handler,
		},
		{
			MethodName: "DeleteTransactionPermanent",
			Handler:    _TransactionService_DeleteTransactionPermanent_Handler,
		},
		{
			MethodName: "RestoreAllTransaction",
			Handler:    _TransactionService_RestoreAllTransaction_Handler,
		},
		{
			MethodName: "DeleteAllTransactionPermanent",
			Handler:    _TransactionService_DeleteAllTransactionPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction.proto",
}
