// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: withdraw.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WithdrawService_GetWithdraws_FullMethodName        = "/pb.WithdrawService/GetWithdraws"
	WithdrawService_GetWithdraw_FullMethodName         = "/pb.WithdrawService/GetWithdraw"
	WithdrawService_GetWithdrawByUsers_FullMethodName  = "/pb.WithdrawService/GetWithdrawByUsers"
	WithdrawService_GetWithdrawByUserId_FullMethodName = "/pb.WithdrawService/GetWithdrawByUserId"
	WithdrawService_CreateWithdraw_FullMethodName      = "/pb.WithdrawService/CreateWithdraw"
	WithdrawService_UpdateWithdraw_FullMethodName      = "/pb.WithdrawService/UpdateWithdraw"
	WithdrawService_DeleteWithdraw_FullMethodName      = "/pb.WithdrawService/DeleteWithdraw"
)

// WithdrawServiceClient is the client API for WithdrawService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithdrawServiceClient interface {
	GetWithdraws(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WithdrawsResponse, error)
	GetWithdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	GetWithdrawByUsers(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawsResponse, error)
	GetWithdrawByUserId(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	UpdateWithdraw(ctx context.Context, in *UpdateWithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	DeleteWithdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*DeleteWithdrawResponse, error)
}

type withdrawServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawServiceClient(cc grpc.ClientConnInterface) WithdrawServiceClient {
	return &withdrawServiceClient{cc}
}

func (c *withdrawServiceClient) GetWithdraws(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WithdrawsResponse, error) {
	out := new(WithdrawsResponse)
	err := c.cc.Invoke(ctx, WithdrawService_GetWithdraws_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawServiceClient) GetWithdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, WithdrawService_GetWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawServiceClient) GetWithdrawByUsers(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawsResponse, error) {
	out := new(WithdrawsResponse)
	err := c.cc.Invoke(ctx, WithdrawService_GetWithdrawByUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawServiceClient) GetWithdrawByUserId(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, WithdrawService_GetWithdrawByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawServiceClient) CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, WithdrawService_CreateWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawServiceClient) UpdateWithdraw(ctx context.Context, in *UpdateWithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, WithdrawService_UpdateWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawServiceClient) DeleteWithdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*DeleteWithdrawResponse, error) {
	out := new(DeleteWithdrawResponse)
	err := c.cc.Invoke(ctx, WithdrawService_DeleteWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawServiceServer is the server API for WithdrawService service.
// All implementations must embed UnimplementedWithdrawServiceServer
// for forward compatibility
type WithdrawServiceServer interface {
	GetWithdraws(context.Context, *empty.Empty) (*WithdrawsResponse, error)
	GetWithdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	GetWithdrawByUsers(context.Context, *WithdrawRequest) (*WithdrawsResponse, error)
	GetWithdrawByUserId(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	CreateWithdraw(context.Context, *CreateWithdrawRequest) (*WithdrawResponse, error)
	UpdateWithdraw(context.Context, *UpdateWithdrawRequest) (*WithdrawResponse, error)
	DeleteWithdraw(context.Context, *WithdrawRequest) (*DeleteWithdrawResponse, error)
	mustEmbedUnimplementedWithdrawServiceServer()
}

// UnimplementedWithdrawServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWithdrawServiceServer struct {
}

func (UnimplementedWithdrawServiceServer) GetWithdraws(context.Context, *empty.Empty) (*WithdrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdraws not implemented")
}
func (UnimplementedWithdrawServiceServer) GetWithdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdraw not implemented")
}
func (UnimplementedWithdrawServiceServer) GetWithdrawByUsers(context.Context, *WithdrawRequest) (*WithdrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawByUsers not implemented")
}
func (UnimplementedWithdrawServiceServer) GetWithdrawByUserId(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawByUserId not implemented")
}
func (UnimplementedWithdrawServiceServer) CreateWithdraw(context.Context, *CreateWithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdraw not implemented")
}
func (UnimplementedWithdrawServiceServer) UpdateWithdraw(context.Context, *UpdateWithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithdraw not implemented")
}
func (UnimplementedWithdrawServiceServer) DeleteWithdraw(context.Context, *WithdrawRequest) (*DeleteWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithdraw not implemented")
}
func (UnimplementedWithdrawServiceServer) mustEmbedUnimplementedWithdrawServiceServer() {}

// UnsafeWithdrawServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithdrawServiceServer will
// result in compilation errors.
type UnsafeWithdrawServiceServer interface {
	mustEmbedUnimplementedWithdrawServiceServer()
}

func RegisterWithdrawServiceServer(s grpc.ServiceRegistrar, srv WithdrawServiceServer) {
	s.RegisterService(&WithdrawService_ServiceDesc, srv)
}

func _WithdrawService_GetWithdraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawServiceServer).GetWithdraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawService_GetWithdraws_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawServiceServer).GetWithdraws(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawService_GetWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawServiceServer).GetWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawService_GetWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawServiceServer).GetWithdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawService_GetWithdrawByUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawServiceServer).GetWithdrawByUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawService_GetWithdrawByUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawServiceServer).GetWithdrawByUsers(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawService_GetWithdrawByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawServiceServer).GetWithdrawByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawService_GetWithdrawByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawServiceServer).GetWithdrawByUserId(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawService_CreateWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawServiceServer).CreateWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawService_CreateWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawServiceServer).CreateWithdraw(ctx, req.(*CreateWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawService_UpdateWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawServiceServer).UpdateWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawService_UpdateWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawServiceServer).UpdateWithdraw(ctx, req.(*UpdateWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawService_DeleteWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawServiceServer).DeleteWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawService_DeleteWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawServiceServer).DeleteWithdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WithdrawService_ServiceDesc is the grpc.ServiceDesc for WithdrawService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithdrawService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WithdrawService",
	HandlerType: (*WithdrawServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWithdraws",
			Handler:    _WithdrawService_GetWithdraws_Handler,
		},
		{
			MethodName: "GetWithdraw",
			Handler:    _WithdrawService_GetWithdraw_Handler,
		},
		{
			MethodName: "GetWithdrawByUsers",
			Handler:    _WithdrawService_GetWithdrawByUsers_Handler,
		},
		{
			MethodName: "GetWithdrawByUserId",
			Handler:    _WithdrawService_GetWithdrawByUserId_Handler,
		},
		{
			MethodName: "CreateWithdraw",
			Handler:    _WithdrawService_CreateWithdraw_Handler,
		},
		{
			MethodName: "UpdateWithdraw",
			Handler:    _WithdrawService_UpdateWithdraw_Handler,
		},
		{
			MethodName: "DeleteWithdraw",
			Handler:    _WithdrawService_DeleteWithdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "withdraw.proto",
}
