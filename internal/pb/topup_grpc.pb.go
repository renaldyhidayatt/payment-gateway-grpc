// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: topup.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TopupService_FindAllTopup_FullMethodName          = "/pb.TopupService/FindAllTopup"
	TopupService_FindByIdTopup_FullMethodName         = "/pb.TopupService/FindByIdTopup"
	TopupService_FindByCardNumberTopup_FullMethodName = "/pb.TopupService/FindByCardNumberTopup"
	TopupService_FindByActive_FullMethodName          = "/pb.TopupService/FindByActive"
	TopupService_FindByTrashed_FullMethodName         = "/pb.TopupService/FindByTrashed"
	TopupService_CreateTopup_FullMethodName           = "/pb.TopupService/CreateTopup"
	TopupService_UpdateTopup_FullMethodName           = "/pb.TopupService/UpdateTopup"
	TopupService_TrashedTopup_FullMethodName          = "/pb.TopupService/TrashedTopup"
	TopupService_RestoreTopup_FullMethodName          = "/pb.TopupService/RestoreTopup"
	TopupService_DeleteTopupPermanent_FullMethodName  = "/pb.TopupService/DeleteTopupPermanent"
)

// TopupServiceClient is the client API for TopupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopupServiceClient interface {
	FindAllTopup(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopup, error)
	FindByIdTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	FindByCardNumberTopup(ctx context.Context, in *FindByCardNumberTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	FindByActive(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponsesTopup, error)
	FindByTrashed(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponsesTopup, error)
	CreateTopup(ctx context.Context, in *CreateTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	UpdateTopup(ctx context.Context, in *UpdateTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	TrashedTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	RestoreTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	DeleteTopupPermanent(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopupDelete, error)
}

type topupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopupServiceClient(cc grpc.ClientConnInterface) TopupServiceClient {
	return &topupServiceClient{cc}
}

func (c *topupServiceClient) FindAllTopup(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTopup)
	err := c.cc.Invoke(ctx, TopupService_FindAllTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindByIdTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupService_FindByIdTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindByCardNumberTopup(ctx context.Context, in *FindByCardNumberTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupService_FindByCardNumberTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindByActive(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponsesTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsesTopup)
	err := c.cc.Invoke(ctx, TopupService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindByTrashed(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponsesTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsesTopup)
	err := c.cc.Invoke(ctx, TopupService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) CreateTopup(ctx context.Context, in *CreateTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupService_CreateTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) UpdateTopup(ctx context.Context, in *UpdateTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupService_UpdateTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) TrashedTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupService_TrashedTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) RestoreTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupService_RestoreTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) DeleteTopupPermanent(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopupDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupDelete)
	err := c.cc.Invoke(ctx, TopupService_DeleteTopupPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopupServiceServer is the server API for TopupService service.
// All implementations must embed UnimplementedTopupServiceServer
// for forward compatibility.
type TopupServiceServer interface {
	FindAllTopup(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopup, error)
	FindByIdTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error)
	FindByCardNumberTopup(context.Context, *FindByCardNumberTopupRequest) (*ApiResponseTopup, error)
	FindByActive(context.Context, *emptypb.Empty) (*ApiResponsesTopup, error)
	FindByTrashed(context.Context, *emptypb.Empty) (*ApiResponsesTopup, error)
	CreateTopup(context.Context, *CreateTopupRequest) (*ApiResponseTopup, error)
	UpdateTopup(context.Context, *UpdateTopupRequest) (*ApiResponseTopup, error)
	TrashedTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error)
	RestoreTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error)
	DeleteTopupPermanent(context.Context, *FindByIdTopupRequest) (*ApiResponseTopupDelete, error)
	mustEmbedUnimplementedTopupServiceServer()
}

// UnimplementedTopupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTopupServiceServer struct{}

func (UnimplementedTopupServiceServer) FindAllTopup(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTopup not implemented")
}
func (UnimplementedTopupServiceServer) FindByIdTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdTopup not implemented")
}
func (UnimplementedTopupServiceServer) FindByCardNumberTopup(context.Context, *FindByCardNumberTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCardNumberTopup not implemented")
}
func (UnimplementedTopupServiceServer) FindByActive(context.Context, *emptypb.Empty) (*ApiResponsesTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedTopupServiceServer) FindByTrashed(context.Context, *emptypb.Empty) (*ApiResponsesTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedTopupServiceServer) CreateTopup(context.Context, *CreateTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopup not implemented")
}
func (UnimplementedTopupServiceServer) UpdateTopup(context.Context, *UpdateTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopup not implemented")
}
func (UnimplementedTopupServiceServer) TrashedTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedTopup not implemented")
}
func (UnimplementedTopupServiceServer) RestoreTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreTopup not implemented")
}
func (UnimplementedTopupServiceServer) DeleteTopupPermanent(context.Context, *FindByIdTopupRequest) (*ApiResponseTopupDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopupPermanent not implemented")
}
func (UnimplementedTopupServiceServer) mustEmbedUnimplementedTopupServiceServer() {}
func (UnimplementedTopupServiceServer) testEmbeddedByValue()                      {}

// UnsafeTopupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopupServiceServer will
// result in compilation errors.
type UnsafeTopupServiceServer interface {
	mustEmbedUnimplementedTopupServiceServer()
}

func RegisterTopupServiceServer(s grpc.ServiceRegistrar, srv TopupServiceServer) {
	// If the following call pancis, it indicates UnimplementedTopupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TopupService_ServiceDesc, srv)
}

func _TopupService_FindAllTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindAllTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindAllTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindAllTopup(ctx, req.(*FindAllTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindByIdTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindByIdTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindByIdTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindByIdTopup(ctx, req.(*FindByIdTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindByCardNumberTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByCardNumberTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindByCardNumberTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindByCardNumberTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindByCardNumberTopup(ctx, req.(*FindByCardNumberTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindByActive(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindByTrashed(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_CreateTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).CreateTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_CreateTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).CreateTopup(ctx, req.(*CreateTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_UpdateTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).UpdateTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_UpdateTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).UpdateTopup(ctx, req.(*UpdateTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_TrashedTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).TrashedTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_TrashedTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).TrashedTopup(ctx, req.(*FindByIdTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_RestoreTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).RestoreTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_RestoreTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).RestoreTopup(ctx, req.(*FindByIdTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_DeleteTopupPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).DeleteTopupPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_DeleteTopupPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).DeleteTopupPermanent(ctx, req.(*FindByIdTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopupService_ServiceDesc is the grpc.ServiceDesc for TopupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TopupService",
	HandlerType: (*TopupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllTopup",
			Handler:    _TopupService_FindAllTopup_Handler,
		},
		{
			MethodName: "FindByIdTopup",
			Handler:    _TopupService_FindByIdTopup_Handler,
		},
		{
			MethodName: "FindByCardNumberTopup",
			Handler:    _TopupService_FindByCardNumberTopup_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _TopupService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _TopupService_FindByTrashed_Handler,
		},
		{
			MethodName: "CreateTopup",
			Handler:    _TopupService_CreateTopup_Handler,
		},
		{
			MethodName: "UpdateTopup",
			Handler:    _TopupService_UpdateTopup_Handler,
		},
		{
			MethodName: "TrashedTopup",
			Handler:    _TopupService_TrashedTopup_Handler,
		},
		{
			MethodName: "RestoreTopup",
			Handler:    _TopupService_RestoreTopup_Handler,
		},
		{
			MethodName: "DeleteTopupPermanent",
			Handler:    _TopupService_DeleteTopupPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topup.proto",
}
