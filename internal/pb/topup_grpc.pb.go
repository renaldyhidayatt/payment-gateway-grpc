// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: topup.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TopupService_FindAllTopup_FullMethodName                        = "/pb.TopupService/FindAllTopup"
	TopupService_FindAllTopupByCardNumber_FullMethodName            = "/pb.TopupService/FindAllTopupByCardNumber"
	TopupService_FindByIdTopup_FullMethodName                       = "/pb.TopupService/FindByIdTopup"
	TopupService_FindMonthlyTopupStatusSuccess_FullMethodName       = "/pb.TopupService/FindMonthlyTopupStatusSuccess"
	TopupService_FindYearlyTopupStatusSuccess_FullMethodName        = "/pb.TopupService/FindYearlyTopupStatusSuccess"
	TopupService_FindMonthlyTopupStatusFailed_FullMethodName        = "/pb.TopupService/FindMonthlyTopupStatusFailed"
	TopupService_FindYearlyTopupStatusFailed_FullMethodName         = "/pb.TopupService/FindYearlyTopupStatusFailed"
	TopupService_FindMonthlyTopupMethods_FullMethodName             = "/pb.TopupService/FindMonthlyTopupMethods"
	TopupService_FindYearlyTopupMethods_FullMethodName              = "/pb.TopupService/FindYearlyTopupMethods"
	TopupService_FindMonthlyTopupAmounts_FullMethodName             = "/pb.TopupService/FindMonthlyTopupAmounts"
	TopupService_FindYearlyTopupAmounts_FullMethodName              = "/pb.TopupService/FindYearlyTopupAmounts"
	TopupService_FindMonthlyTopupMethodsByCardNumber_FullMethodName = "/pb.TopupService/FindMonthlyTopupMethodsByCardNumber"
	TopupService_FindYearlyTopupMethodsByCardNumber_FullMethodName  = "/pb.TopupService/FindYearlyTopupMethodsByCardNumber"
	TopupService_FindMonthlyTopupAmountsByCardNumber_FullMethodName = "/pb.TopupService/FindMonthlyTopupAmountsByCardNumber"
	TopupService_FindYearlyTopupAmountsByCardNumber_FullMethodName  = "/pb.TopupService/FindYearlyTopupAmountsByCardNumber"
	TopupService_FindByCardNumberTopup_FullMethodName               = "/pb.TopupService/FindByCardNumberTopup"
	TopupService_FindByActive_FullMethodName                        = "/pb.TopupService/FindByActive"
	TopupService_FindByTrashed_FullMethodName                       = "/pb.TopupService/FindByTrashed"
	TopupService_CreateTopup_FullMethodName                         = "/pb.TopupService/CreateTopup"
	TopupService_UpdateTopup_FullMethodName                         = "/pb.TopupService/UpdateTopup"
	TopupService_TrashedTopup_FullMethodName                        = "/pb.TopupService/TrashedTopup"
	TopupService_RestoreTopup_FullMethodName                        = "/pb.TopupService/RestoreTopup"
	TopupService_DeleteTopupPermanent_FullMethodName                = "/pb.TopupService/DeleteTopupPermanent"
	TopupService_RestoreAllTopup_FullMethodName                     = "/pb.TopupService/RestoreAllTopup"
	TopupService_DeleteAllTopupPermanent_FullMethodName             = "/pb.TopupService/DeleteAllTopupPermanent"
)

// TopupServiceClient is the client API for TopupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopupServiceClient interface {
	FindAllTopup(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopup, error)
	FindAllTopupByCardNumber(ctx context.Context, in *FindAllTopupByCardNumberRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopup, error)
	FindByIdTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	FindMonthlyTopupStatusSuccess(ctx context.Context, in *FindMonthlyTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupMonthStatusSuccess, error)
	FindYearlyTopupStatusSuccess(ctx context.Context, in *FindYearTopup, opts ...grpc.CallOption) (*ApiResponseTopupYearStatusSuccess, error)
	FindMonthlyTopupStatusFailed(ctx context.Context, in *FindMonthlyTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupMonthStatusFailed, error)
	FindYearlyTopupStatusFailed(ctx context.Context, in *FindYearTopup, opts ...grpc.CallOption) (*ApiResponseTopupYearStatusFailed, error)
	FindMonthlyTopupMethods(ctx context.Context, in *FindYearTopup, opts ...grpc.CallOption) (*ApiResponseTopupMonthMethod, error)
	FindYearlyTopupMethods(ctx context.Context, in *FindYearTopup, opts ...grpc.CallOption) (*ApiResponseTopupYearMethod, error)
	FindMonthlyTopupAmounts(ctx context.Context, in *FindYearTopup, opts ...grpc.CallOption) (*ApiResponseTopupMonthAmount, error)
	FindYearlyTopupAmounts(ctx context.Context, in *FindYearTopup, opts ...grpc.CallOption) (*ApiResponseTopupYearAmount, error)
	FindMonthlyTopupMethodsByCardNumber(ctx context.Context, in *FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupMonthMethod, error)
	FindYearlyTopupMethodsByCardNumber(ctx context.Context, in *FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupYearMethod, error)
	FindMonthlyTopupAmountsByCardNumber(ctx context.Context, in *FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupMonthAmount, error)
	FindYearlyTopupAmountsByCardNumber(ctx context.Context, in *FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupYearAmount, error)
	FindByCardNumberTopup(ctx context.Context, in *FindByCardNumberTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	FindByActive(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopupDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopupDeleteAt, error)
	CreateTopup(ctx context.Context, in *CreateTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	UpdateTopup(ctx context.Context, in *UpdateTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	TrashedTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	RestoreTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	DeleteTopupPermanent(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopupDelete, error)
	RestoreAllTopup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTopupAll, error)
	DeleteAllTopupPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTopupAll, error)
}

type topupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopupServiceClient(cc grpc.ClientConnInterface) TopupServiceClient {
	return &topupServiceClient{cc}
}

func (c *topupServiceClient) FindAllTopup(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTopup)
	err := c.cc.Invoke(ctx, TopupService_FindAllTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindAllTopupByCardNumber(ctx context.Context, in *FindAllTopupByCardNumberRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTopup)
	err := c.cc.Invoke(ctx, TopupService_FindAllTopupByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindByIdTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupService_FindByIdTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindMonthlyTopupStatusSuccess(ctx context.Context, in *FindMonthlyTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupMonthStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthStatusSuccess)
	err := c.cc.Invoke(ctx, TopupService_FindMonthlyTopupStatusSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindYearlyTopupStatusSuccess(ctx context.Context, in *FindYearTopup, opts ...grpc.CallOption) (*ApiResponseTopupYearStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearStatusSuccess)
	err := c.cc.Invoke(ctx, TopupService_FindYearlyTopupStatusSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindMonthlyTopupStatusFailed(ctx context.Context, in *FindMonthlyTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupMonthStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthStatusFailed)
	err := c.cc.Invoke(ctx, TopupService_FindMonthlyTopupStatusFailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindYearlyTopupStatusFailed(ctx context.Context, in *FindYearTopup, opts ...grpc.CallOption) (*ApiResponseTopupYearStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearStatusFailed)
	err := c.cc.Invoke(ctx, TopupService_FindYearlyTopupStatusFailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindMonthlyTopupMethods(ctx context.Context, in *FindYearTopup, opts ...grpc.CallOption) (*ApiResponseTopupMonthMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthMethod)
	err := c.cc.Invoke(ctx, TopupService_FindMonthlyTopupMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindYearlyTopupMethods(ctx context.Context, in *FindYearTopup, opts ...grpc.CallOption) (*ApiResponseTopupYearMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearMethod)
	err := c.cc.Invoke(ctx, TopupService_FindYearlyTopupMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindMonthlyTopupAmounts(ctx context.Context, in *FindYearTopup, opts ...grpc.CallOption) (*ApiResponseTopupMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthAmount)
	err := c.cc.Invoke(ctx, TopupService_FindMonthlyTopupAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindYearlyTopupAmounts(ctx context.Context, in *FindYearTopup, opts ...grpc.CallOption) (*ApiResponseTopupYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearAmount)
	err := c.cc.Invoke(ctx, TopupService_FindYearlyTopupAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindMonthlyTopupMethodsByCardNumber(ctx context.Context, in *FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupMonthMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthMethod)
	err := c.cc.Invoke(ctx, TopupService_FindMonthlyTopupMethodsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindYearlyTopupMethodsByCardNumber(ctx context.Context, in *FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupYearMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearMethod)
	err := c.cc.Invoke(ctx, TopupService_FindYearlyTopupMethodsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindMonthlyTopupAmountsByCardNumber(ctx context.Context, in *FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthAmount)
	err := c.cc.Invoke(ctx, TopupService_FindMonthlyTopupAmountsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindYearlyTopupAmountsByCardNumber(ctx context.Context, in *FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearAmount)
	err := c.cc.Invoke(ctx, TopupService_FindYearlyTopupAmountsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindByCardNumberTopup(ctx context.Context, in *FindByCardNumberTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupService_FindByCardNumberTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindByActive(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopupDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTopupDeleteAt)
	err := c.cc.Invoke(ctx, TopupService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) FindByTrashed(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopupDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTopupDeleteAt)
	err := c.cc.Invoke(ctx, TopupService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) CreateTopup(ctx context.Context, in *CreateTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupService_CreateTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) UpdateTopup(ctx context.Context, in *UpdateTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupService_UpdateTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) TrashedTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupService_TrashedTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) RestoreTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupService_RestoreTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) DeleteTopupPermanent(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopupDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupDelete)
	err := c.cc.Invoke(ctx, TopupService_DeleteTopupPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) RestoreAllTopup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTopupAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupAll)
	err := c.cc.Invoke(ctx, TopupService_RestoreAllTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupServiceClient) DeleteAllTopupPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTopupAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupAll)
	err := c.cc.Invoke(ctx, TopupService_DeleteAllTopupPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopupServiceServer is the server API for TopupService service.
// All implementations must embed UnimplementedTopupServiceServer
// for forward compatibility.
type TopupServiceServer interface {
	FindAllTopup(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopup, error)
	FindAllTopupByCardNumber(context.Context, *FindAllTopupByCardNumberRequest) (*ApiResponsePaginationTopup, error)
	FindByIdTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error)
	FindMonthlyTopupStatusSuccess(context.Context, *FindMonthlyTopupStatus) (*ApiResponseTopupMonthStatusSuccess, error)
	FindYearlyTopupStatusSuccess(context.Context, *FindYearTopup) (*ApiResponseTopupYearStatusSuccess, error)
	FindMonthlyTopupStatusFailed(context.Context, *FindMonthlyTopupStatus) (*ApiResponseTopupMonthStatusFailed, error)
	FindYearlyTopupStatusFailed(context.Context, *FindYearTopup) (*ApiResponseTopupYearStatusFailed, error)
	FindMonthlyTopupMethods(context.Context, *FindYearTopup) (*ApiResponseTopupMonthMethod, error)
	FindYearlyTopupMethods(context.Context, *FindYearTopup) (*ApiResponseTopupYearMethod, error)
	FindMonthlyTopupAmounts(context.Context, *FindYearTopup) (*ApiResponseTopupMonthAmount, error)
	FindYearlyTopupAmounts(context.Context, *FindYearTopup) (*ApiResponseTopupYearAmount, error)
	FindMonthlyTopupMethodsByCardNumber(context.Context, *FindYearTopupCardNumber) (*ApiResponseTopupMonthMethod, error)
	FindYearlyTopupMethodsByCardNumber(context.Context, *FindYearTopupCardNumber) (*ApiResponseTopupYearMethod, error)
	FindMonthlyTopupAmountsByCardNumber(context.Context, *FindYearTopupCardNumber) (*ApiResponseTopupMonthAmount, error)
	FindYearlyTopupAmountsByCardNumber(context.Context, *FindYearTopupCardNumber) (*ApiResponseTopupYearAmount, error)
	FindByCardNumberTopup(context.Context, *FindByCardNumberTopupRequest) (*ApiResponseTopup, error)
	FindByActive(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopupDeleteAt, error)
	FindByTrashed(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopupDeleteAt, error)
	CreateTopup(context.Context, *CreateTopupRequest) (*ApiResponseTopup, error)
	UpdateTopup(context.Context, *UpdateTopupRequest) (*ApiResponseTopup, error)
	TrashedTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error)
	RestoreTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error)
	DeleteTopupPermanent(context.Context, *FindByIdTopupRequest) (*ApiResponseTopupDelete, error)
	RestoreAllTopup(context.Context, *emptypb.Empty) (*ApiResponseTopupAll, error)
	DeleteAllTopupPermanent(context.Context, *emptypb.Empty) (*ApiResponseTopupAll, error)
	mustEmbedUnimplementedTopupServiceServer()
}

// UnimplementedTopupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTopupServiceServer struct{}

func (UnimplementedTopupServiceServer) FindAllTopup(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTopup not implemented")
}
func (UnimplementedTopupServiceServer) FindAllTopupByCardNumber(context.Context, *FindAllTopupByCardNumberRequest) (*ApiResponsePaginationTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTopupByCardNumber not implemented")
}
func (UnimplementedTopupServiceServer) FindByIdTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdTopup not implemented")
}
func (UnimplementedTopupServiceServer) FindMonthlyTopupStatusSuccess(context.Context, *FindMonthlyTopupStatus) (*ApiResponseTopupMonthStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupStatusSuccess not implemented")
}
func (UnimplementedTopupServiceServer) FindYearlyTopupStatusSuccess(context.Context, *FindYearTopup) (*ApiResponseTopupYearStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupStatusSuccess not implemented")
}
func (UnimplementedTopupServiceServer) FindMonthlyTopupStatusFailed(context.Context, *FindMonthlyTopupStatus) (*ApiResponseTopupMonthStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupStatusFailed not implemented")
}
func (UnimplementedTopupServiceServer) FindYearlyTopupStatusFailed(context.Context, *FindYearTopup) (*ApiResponseTopupYearStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupStatusFailed not implemented")
}
func (UnimplementedTopupServiceServer) FindMonthlyTopupMethods(context.Context, *FindYearTopup) (*ApiResponseTopupMonthMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupMethods not implemented")
}
func (UnimplementedTopupServiceServer) FindYearlyTopupMethods(context.Context, *FindYearTopup) (*ApiResponseTopupYearMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupMethods not implemented")
}
func (UnimplementedTopupServiceServer) FindMonthlyTopupAmounts(context.Context, *FindYearTopup) (*ApiResponseTopupMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupAmounts not implemented")
}
func (UnimplementedTopupServiceServer) FindYearlyTopupAmounts(context.Context, *FindYearTopup) (*ApiResponseTopupYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupAmounts not implemented")
}
func (UnimplementedTopupServiceServer) FindMonthlyTopupMethodsByCardNumber(context.Context, *FindYearTopupCardNumber) (*ApiResponseTopupMonthMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupMethodsByCardNumber not implemented")
}
func (UnimplementedTopupServiceServer) FindYearlyTopupMethodsByCardNumber(context.Context, *FindYearTopupCardNumber) (*ApiResponseTopupYearMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupMethodsByCardNumber not implemented")
}
func (UnimplementedTopupServiceServer) FindMonthlyTopupAmountsByCardNumber(context.Context, *FindYearTopupCardNumber) (*ApiResponseTopupMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupAmountsByCardNumber not implemented")
}
func (UnimplementedTopupServiceServer) FindYearlyTopupAmountsByCardNumber(context.Context, *FindYearTopupCardNumber) (*ApiResponseTopupYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupAmountsByCardNumber not implemented")
}
func (UnimplementedTopupServiceServer) FindByCardNumberTopup(context.Context, *FindByCardNumberTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCardNumberTopup not implemented")
}
func (UnimplementedTopupServiceServer) FindByActive(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopupDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedTopupServiceServer) FindByTrashed(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopupDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedTopupServiceServer) CreateTopup(context.Context, *CreateTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopup not implemented")
}
func (UnimplementedTopupServiceServer) UpdateTopup(context.Context, *UpdateTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopup not implemented")
}
func (UnimplementedTopupServiceServer) TrashedTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedTopup not implemented")
}
func (UnimplementedTopupServiceServer) RestoreTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreTopup not implemented")
}
func (UnimplementedTopupServiceServer) DeleteTopupPermanent(context.Context, *FindByIdTopupRequest) (*ApiResponseTopupDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopupPermanent not implemented")
}
func (UnimplementedTopupServiceServer) RestoreAllTopup(context.Context, *emptypb.Empty) (*ApiResponseTopupAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllTopup not implemented")
}
func (UnimplementedTopupServiceServer) DeleteAllTopupPermanent(context.Context, *emptypb.Empty) (*ApiResponseTopupAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllTopupPermanent not implemented")
}
func (UnimplementedTopupServiceServer) mustEmbedUnimplementedTopupServiceServer() {}
func (UnimplementedTopupServiceServer) testEmbeddedByValue()                      {}

// UnsafeTopupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopupServiceServer will
// result in compilation errors.
type UnsafeTopupServiceServer interface {
	mustEmbedUnimplementedTopupServiceServer()
}

func RegisterTopupServiceServer(s grpc.ServiceRegistrar, srv TopupServiceServer) {
	// If the following call pancis, it indicates UnimplementedTopupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TopupService_ServiceDesc, srv)
}

func _TopupService_FindAllTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindAllTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindAllTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindAllTopup(ctx, req.(*FindAllTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindAllTopupByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTopupByCardNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindAllTopupByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindAllTopupByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindAllTopupByCardNumber(ctx, req.(*FindAllTopupByCardNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindByIdTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindByIdTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindByIdTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindByIdTopup(ctx, req.(*FindByIdTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindMonthlyTopupStatusSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMonthlyTopupStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindMonthlyTopupStatusSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindMonthlyTopupStatusSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindMonthlyTopupStatusSuccess(ctx, req.(*FindMonthlyTopupStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindYearlyTopupStatusSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTopup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindYearlyTopupStatusSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindYearlyTopupStatusSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindYearlyTopupStatusSuccess(ctx, req.(*FindYearTopup))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindMonthlyTopupStatusFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMonthlyTopupStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindMonthlyTopupStatusFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindMonthlyTopupStatusFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindMonthlyTopupStatusFailed(ctx, req.(*FindMonthlyTopupStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindYearlyTopupStatusFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTopup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindYearlyTopupStatusFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindYearlyTopupStatusFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindYearlyTopupStatusFailed(ctx, req.(*FindYearTopup))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindMonthlyTopupMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTopup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindMonthlyTopupMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindMonthlyTopupMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindMonthlyTopupMethods(ctx, req.(*FindYearTopup))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindYearlyTopupMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTopup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindYearlyTopupMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindYearlyTopupMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindYearlyTopupMethods(ctx, req.(*FindYearTopup))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindMonthlyTopupAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTopup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindMonthlyTopupAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindMonthlyTopupAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindMonthlyTopupAmounts(ctx, req.(*FindYearTopup))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindYearlyTopupAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTopup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindYearlyTopupAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindYearlyTopupAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindYearlyTopupAmounts(ctx, req.(*FindYearTopup))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindMonthlyTopupMethodsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTopupCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindMonthlyTopupMethodsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindMonthlyTopupMethodsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindMonthlyTopupMethodsByCardNumber(ctx, req.(*FindYearTopupCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindYearlyTopupMethodsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTopupCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindYearlyTopupMethodsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindYearlyTopupMethodsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindYearlyTopupMethodsByCardNumber(ctx, req.(*FindYearTopupCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindMonthlyTopupAmountsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTopupCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindMonthlyTopupAmountsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindMonthlyTopupAmountsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindMonthlyTopupAmountsByCardNumber(ctx, req.(*FindYearTopupCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindYearlyTopupAmountsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearTopupCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindYearlyTopupAmountsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindYearlyTopupAmountsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindYearlyTopupAmountsByCardNumber(ctx, req.(*FindYearTopupCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindByCardNumberTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByCardNumberTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindByCardNumberTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindByCardNumberTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindByCardNumberTopup(ctx, req.(*FindByCardNumberTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindByActive(ctx, req.(*FindAllTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).FindByTrashed(ctx, req.(*FindAllTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_CreateTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).CreateTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_CreateTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).CreateTopup(ctx, req.(*CreateTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_UpdateTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).UpdateTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_UpdateTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).UpdateTopup(ctx, req.(*UpdateTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_TrashedTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).TrashedTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_TrashedTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).TrashedTopup(ctx, req.(*FindByIdTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_RestoreTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).RestoreTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_RestoreTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).RestoreTopup(ctx, req.(*FindByIdTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_DeleteTopupPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).DeleteTopupPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_DeleteTopupPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).DeleteTopupPermanent(ctx, req.(*FindByIdTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_RestoreAllTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).RestoreAllTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_RestoreAllTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).RestoreAllTopup(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupService_DeleteAllTopupPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupServiceServer).DeleteAllTopupPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupService_DeleteAllTopupPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupServiceServer).DeleteAllTopupPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TopupService_ServiceDesc is the grpc.ServiceDesc for TopupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TopupService",
	HandlerType: (*TopupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllTopup",
			Handler:    _TopupService_FindAllTopup_Handler,
		},
		{
			MethodName: "FindAllTopupByCardNumber",
			Handler:    _TopupService_FindAllTopupByCardNumber_Handler,
		},
		{
			MethodName: "FindByIdTopup",
			Handler:    _TopupService_FindByIdTopup_Handler,
		},
		{
			MethodName: "FindMonthlyTopupStatusSuccess",
			Handler:    _TopupService_FindMonthlyTopupStatusSuccess_Handler,
		},
		{
			MethodName: "FindYearlyTopupStatusSuccess",
			Handler:    _TopupService_FindYearlyTopupStatusSuccess_Handler,
		},
		{
			MethodName: "FindMonthlyTopupStatusFailed",
			Handler:    _TopupService_FindMonthlyTopupStatusFailed_Handler,
		},
		{
			MethodName: "FindYearlyTopupStatusFailed",
			Handler:    _TopupService_FindYearlyTopupStatusFailed_Handler,
		},
		{
			MethodName: "FindMonthlyTopupMethods",
			Handler:    _TopupService_FindMonthlyTopupMethods_Handler,
		},
		{
			MethodName: "FindYearlyTopupMethods",
			Handler:    _TopupService_FindYearlyTopupMethods_Handler,
		},
		{
			MethodName: "FindMonthlyTopupAmounts",
			Handler:    _TopupService_FindMonthlyTopupAmounts_Handler,
		},
		{
			MethodName: "FindYearlyTopupAmounts",
			Handler:    _TopupService_FindYearlyTopupAmounts_Handler,
		},
		{
			MethodName: "FindMonthlyTopupMethodsByCardNumber",
			Handler:    _TopupService_FindMonthlyTopupMethodsByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTopupMethodsByCardNumber",
			Handler:    _TopupService_FindYearlyTopupMethodsByCardNumber_Handler,
		},
		{
			MethodName: "FindMonthlyTopupAmountsByCardNumber",
			Handler:    _TopupService_FindMonthlyTopupAmountsByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTopupAmountsByCardNumber",
			Handler:    _TopupService_FindYearlyTopupAmountsByCardNumber_Handler,
		},
		{
			MethodName: "FindByCardNumberTopup",
			Handler:    _TopupService_FindByCardNumberTopup_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _TopupService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _TopupService_FindByTrashed_Handler,
		},
		{
			MethodName: "CreateTopup",
			Handler:    _TopupService_CreateTopup_Handler,
		},
		{
			MethodName: "UpdateTopup",
			Handler:    _TopupService_UpdateTopup_Handler,
		},
		{
			MethodName: "TrashedTopup",
			Handler:    _TopupService_TrashedTopup_Handler,
		},
		{
			MethodName: "RestoreTopup",
			Handler:    _TopupService_RestoreTopup_Handler,
		},
		{
			MethodName: "DeleteTopupPermanent",
			Handler:    _TopupService_DeleteTopupPermanent_Handler,
		},
		{
			MethodName: "RestoreAllTopup",
			Handler:    _TopupService_RestoreAllTopup_Handler,
		},
		{
			MethodName: "DeleteAllTopupPermanent",
			Handler:    _TopupService_DeleteAllTopupPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topup.proto",
}
