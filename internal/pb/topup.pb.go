// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: topup.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FindAllTopupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Search        string                 `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindAllTopupRequest) Reset() {
	*x = FindAllTopupRequest{}
	mi := &file_topup_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindAllTopupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllTopupRequest) ProtoMessage() {}

func (x *FindAllTopupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllTopupRequest.ProtoReflect.Descriptor instead.
func (*FindAllTopupRequest) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{0}
}

func (x *FindAllTopupRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindAllTopupRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FindAllTopupRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type FindByIdTopupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TopupId       int32                  `protobuf:"varint,1,opt,name=topup_id,json=topupId,proto3" json:"topup_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindByIdTopupRequest) Reset() {
	*x = FindByIdTopupRequest{}
	mi := &file_topup_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByIdTopupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByIdTopupRequest) ProtoMessage() {}

func (x *FindByIdTopupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByIdTopupRequest.ProtoReflect.Descriptor instead.
func (*FindByIdTopupRequest) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{1}
}

func (x *FindByIdTopupRequest) GetTopupId() int32 {
	if x != nil {
		return x.TopupId
	}
	return 0
}

type FindMonthlyTopupStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          int32                  `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month         int32                  `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindMonthlyTopupStatus) Reset() {
	*x = FindMonthlyTopupStatus{}
	mi := &file_topup_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindMonthlyTopupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMonthlyTopupStatus) ProtoMessage() {}

func (x *FindMonthlyTopupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMonthlyTopupStatus.ProtoReflect.Descriptor instead.
func (*FindMonthlyTopupStatus) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{2}
}

func (x *FindMonthlyTopupStatus) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FindMonthlyTopupStatus) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

type FindByCardNumberTopupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CardNumber    string                 `protobuf:"bytes,1,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	Year          int32                  `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindByCardNumberTopupRequest) Reset() {
	*x = FindByCardNumberTopupRequest{}
	mi := &file_topup_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByCardNumberTopupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByCardNumberTopupRequest) ProtoMessage() {}

func (x *FindByCardNumberTopupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByCardNumberTopupRequest.ProtoReflect.Descriptor instead.
func (*FindByCardNumberTopupRequest) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{3}
}

func (x *FindByCardNumberTopupRequest) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *FindByCardNumberTopupRequest) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type FindYearTopup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          int32                  `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindYearTopup) Reset() {
	*x = FindYearTopup{}
	mi := &file_topup_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindYearTopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindYearTopup) ProtoMessage() {}

func (x *FindYearTopup) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindYearTopup.ProtoReflect.Descriptor instead.
func (*FindYearTopup) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{4}
}

func (x *FindYearTopup) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type FindYearTopupCardNumber struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CardNumber    string                 `protobuf:"bytes,1,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	Year          int32                  `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindYearTopupCardNumber) Reset() {
	*x = FindYearTopupCardNumber{}
	mi := &file_topup_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindYearTopupCardNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindYearTopupCardNumber) ProtoMessage() {}

func (x *FindYearTopupCardNumber) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindYearTopupCardNumber.ProtoReflect.Descriptor instead.
func (*FindYearTopupCardNumber) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{5}
}

func (x *FindYearTopupCardNumber) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *FindYearTopupCardNumber) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type CreateTopupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CardNumber    string                 `protobuf:"bytes,1,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	TopupNo       string                 `protobuf:"bytes,2,opt,name=topup_no,json=topupNo,proto3" json:"topup_no,omitempty"`
	TopupAmount   int32                  `protobuf:"varint,3,opt,name=topup_amount,json=topupAmount,proto3" json:"topup_amount,omitempty"`
	TopupMethod   string                 `protobuf:"bytes,4,opt,name=topup_method,json=topupMethod,proto3" json:"topup_method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTopupRequest) Reset() {
	*x = CreateTopupRequest{}
	mi := &file_topup_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTopupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopupRequest) ProtoMessage() {}

func (x *CreateTopupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopupRequest.ProtoReflect.Descriptor instead.
func (*CreateTopupRequest) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTopupRequest) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *CreateTopupRequest) GetTopupNo() string {
	if x != nil {
		return x.TopupNo
	}
	return ""
}

func (x *CreateTopupRequest) GetTopupAmount() int32 {
	if x != nil {
		return x.TopupAmount
	}
	return 0
}

func (x *CreateTopupRequest) GetTopupMethod() string {
	if x != nil {
		return x.TopupMethod
	}
	return ""
}

type UpdateTopupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TopupId       int32                  `protobuf:"varint,1,opt,name=topup_id,json=topupId,proto3" json:"topup_id,omitempty"`
	CardNumber    string                 `protobuf:"bytes,2,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	TopupAmount   int32                  `protobuf:"varint,3,opt,name=topup_amount,json=topupAmount,proto3" json:"topup_amount,omitempty"`
	TopupMethod   string                 `protobuf:"bytes,4,opt,name=topup_method,json=topupMethod,proto3" json:"topup_method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTopupRequest) Reset() {
	*x = UpdateTopupRequest{}
	mi := &file_topup_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTopupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopupRequest) ProtoMessage() {}

func (x *UpdateTopupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopupRequest.ProtoReflect.Descriptor instead.
func (*UpdateTopupRequest) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTopupRequest) GetTopupId() int32 {
	if x != nil {
		return x.TopupId
	}
	return 0
}

func (x *UpdateTopupRequest) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *UpdateTopupRequest) GetTopupAmount() int32 {
	if x != nil {
		return x.TopupAmount
	}
	return 0
}

func (x *UpdateTopupRequest) GetTopupMethod() string {
	if x != nil {
		return x.TopupMethod
	}
	return ""
}

type TopupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CardNumber    string                 `protobuf:"bytes,2,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	TopupNo       string                 `protobuf:"bytes,3,opt,name=topup_no,json=topupNo,proto3" json:"topup_no,omitempty"`
	TopupAmount   int32                  `protobuf:"varint,4,opt,name=topup_amount,json=topupAmount,proto3" json:"topup_amount,omitempty"`
	TopupMethod   string                 `protobuf:"bytes,5,opt,name=topup_method,json=topupMethod,proto3" json:"topup_method,omitempty"`
	TopupTime     string                 `protobuf:"bytes,6,opt,name=topup_time,json=topupTime,proto3" json:"topup_time,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopupResponse) Reset() {
	*x = TopupResponse{}
	mi := &file_topup_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopupResponse) ProtoMessage() {}

func (x *TopupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopupResponse.ProtoReflect.Descriptor instead.
func (*TopupResponse) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{8}
}

func (x *TopupResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TopupResponse) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *TopupResponse) GetTopupNo() string {
	if x != nil {
		return x.TopupNo
	}
	return ""
}

func (x *TopupResponse) GetTopupAmount() int32 {
	if x != nil {
		return x.TopupAmount
	}
	return 0
}

func (x *TopupResponse) GetTopupMethod() string {
	if x != nil {
		return x.TopupMethod
	}
	return ""
}

func (x *TopupResponse) GetTopupTime() string {
	if x != nil {
		return x.TopupTime
	}
	return ""
}

func (x *TopupResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TopupResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type TopupResponseDeleteAt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CardNumber    string                 `protobuf:"bytes,2,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	TopupNo       string                 `protobuf:"bytes,3,opt,name=topup_no,json=topupNo,proto3" json:"topup_no,omitempty"`
	TopupAmount   int32                  `protobuf:"varint,4,opt,name=topup_amount,json=topupAmount,proto3" json:"topup_amount,omitempty"`
	TopupMethod   string                 `protobuf:"bytes,5,opt,name=topup_method,json=topupMethod,proto3" json:"topup_method,omitempty"`
	TopupTime     string                 `protobuf:"bytes,6,opt,name=topup_time,json=topupTime,proto3" json:"topup_time,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt     string                 `protobuf:"bytes,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopupResponseDeleteAt) Reset() {
	*x = TopupResponseDeleteAt{}
	mi := &file_topup_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopupResponseDeleteAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopupResponseDeleteAt) ProtoMessage() {}

func (x *TopupResponseDeleteAt) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopupResponseDeleteAt.ProtoReflect.Descriptor instead.
func (*TopupResponseDeleteAt) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{9}
}

func (x *TopupResponseDeleteAt) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TopupResponseDeleteAt) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *TopupResponseDeleteAt) GetTopupNo() string {
	if x != nil {
		return x.TopupNo
	}
	return ""
}

func (x *TopupResponseDeleteAt) GetTopupAmount() int32 {
	if x != nil {
		return x.TopupAmount
	}
	return 0
}

func (x *TopupResponseDeleteAt) GetTopupMethod() string {
	if x != nil {
		return x.TopupMethod
	}
	return ""
}

func (x *TopupResponseDeleteAt) GetTopupTime() string {
	if x != nil {
		return x.TopupTime
	}
	return ""
}

func (x *TopupResponseDeleteAt) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TopupResponseDeleteAt) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *TopupResponseDeleteAt) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type TopupMonthStatusSuccessResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          string                 `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	Month         string                 `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"`
	TotalSuccess  int32                  `protobuf:"varint,3,opt,name=total_success,json=totalSuccess,proto3" json:"total_success,omitempty"`
	TotalAmount   int32                  `protobuf:"varint,4,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopupMonthStatusSuccessResponse) Reset() {
	*x = TopupMonthStatusSuccessResponse{}
	mi := &file_topup_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopupMonthStatusSuccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopupMonthStatusSuccessResponse) ProtoMessage() {}

func (x *TopupMonthStatusSuccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopupMonthStatusSuccessResponse.ProtoReflect.Descriptor instead.
func (*TopupMonthStatusSuccessResponse) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{10}
}

func (x *TopupMonthStatusSuccessResponse) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *TopupMonthStatusSuccessResponse) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *TopupMonthStatusSuccessResponse) GetTotalSuccess() int32 {
	if x != nil {
		return x.TotalSuccess
	}
	return 0
}

func (x *TopupMonthStatusSuccessResponse) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type TopupYearStatusSuccessResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          string                 `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	TotalSuccess  int32                  `protobuf:"varint,2,opt,name=total_success,json=totalSuccess,proto3" json:"total_success,omitempty"`
	TotalAmount   int32                  `protobuf:"varint,4,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopupYearStatusSuccessResponse) Reset() {
	*x = TopupYearStatusSuccessResponse{}
	mi := &file_topup_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopupYearStatusSuccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopupYearStatusSuccessResponse) ProtoMessage() {}

func (x *TopupYearStatusSuccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopupYearStatusSuccessResponse.ProtoReflect.Descriptor instead.
func (*TopupYearStatusSuccessResponse) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{11}
}

func (x *TopupYearStatusSuccessResponse) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *TopupYearStatusSuccessResponse) GetTotalSuccess() int32 {
	if x != nil {
		return x.TotalSuccess
	}
	return 0
}

func (x *TopupYearStatusSuccessResponse) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type TopupMonthStatusFailedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          string                 `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	Month         string                 `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"`
	TotalFailed   int32                  `protobuf:"varint,3,opt,name=total_failed,json=totalFailed,proto3" json:"total_failed,omitempty"`
	TotalAmount   int32                  `protobuf:"varint,4,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopupMonthStatusFailedResponse) Reset() {
	*x = TopupMonthStatusFailedResponse{}
	mi := &file_topup_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopupMonthStatusFailedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopupMonthStatusFailedResponse) ProtoMessage() {}

func (x *TopupMonthStatusFailedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopupMonthStatusFailedResponse.ProtoReflect.Descriptor instead.
func (*TopupMonthStatusFailedResponse) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{12}
}

func (x *TopupMonthStatusFailedResponse) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *TopupMonthStatusFailedResponse) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *TopupMonthStatusFailedResponse) GetTotalFailed() int32 {
	if x != nil {
		return x.TotalFailed
	}
	return 0
}

func (x *TopupMonthStatusFailedResponse) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type TopupYearStatusFailedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          string                 `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	TotalFailed   int32                  `protobuf:"varint,2,opt,name=total_failed,json=totalFailed,proto3" json:"total_failed,omitempty"`
	TotalAmount   int32                  `protobuf:"varint,4,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopupYearStatusFailedResponse) Reset() {
	*x = TopupYearStatusFailedResponse{}
	mi := &file_topup_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopupYearStatusFailedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopupYearStatusFailedResponse) ProtoMessage() {}

func (x *TopupYearStatusFailedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopupYearStatusFailedResponse.ProtoReflect.Descriptor instead.
func (*TopupYearStatusFailedResponse) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{13}
}

func (x *TopupYearStatusFailedResponse) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *TopupYearStatusFailedResponse) GetTotalFailed() int32 {
	if x != nil {
		return x.TotalFailed
	}
	return 0
}

func (x *TopupYearStatusFailedResponse) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type TopupMonthMethodResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Month         string                 `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	TopupMethod   string                 `protobuf:"bytes,2,opt,name=topup_method,json=topupMethod,proto3" json:"topup_method,omitempty"`
	TotalTopups   int32                  `protobuf:"varint,3,opt,name=total_topups,json=totalTopups,proto3" json:"total_topups,omitempty"`
	TotalAmount   int32                  `protobuf:"varint,4,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopupMonthMethodResponse) Reset() {
	*x = TopupMonthMethodResponse{}
	mi := &file_topup_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopupMonthMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopupMonthMethodResponse) ProtoMessage() {}

func (x *TopupMonthMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopupMonthMethodResponse.ProtoReflect.Descriptor instead.
func (*TopupMonthMethodResponse) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{14}
}

func (x *TopupMonthMethodResponse) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *TopupMonthMethodResponse) GetTopupMethod() string {
	if x != nil {
		return x.TopupMethod
	}
	return ""
}

func (x *TopupMonthMethodResponse) GetTotalTopups() int32 {
	if x != nil {
		return x.TotalTopups
	}
	return 0
}

func (x *TopupMonthMethodResponse) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type TopupYearlyMethodResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          string                 `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	TopupMethod   string                 `protobuf:"bytes,2,opt,name=topup_method,json=topupMethod,proto3" json:"topup_method,omitempty"`
	TotalTopups   int32                  `protobuf:"varint,3,opt,name=total_topups,json=totalTopups,proto3" json:"total_topups,omitempty"`
	TotalAmount   int32                  `protobuf:"varint,4,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopupYearlyMethodResponse) Reset() {
	*x = TopupYearlyMethodResponse{}
	mi := &file_topup_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopupYearlyMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopupYearlyMethodResponse) ProtoMessage() {}

func (x *TopupYearlyMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopupYearlyMethodResponse.ProtoReflect.Descriptor instead.
func (*TopupYearlyMethodResponse) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{15}
}

func (x *TopupYearlyMethodResponse) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *TopupYearlyMethodResponse) GetTopupMethod() string {
	if x != nil {
		return x.TopupMethod
	}
	return ""
}

func (x *TopupYearlyMethodResponse) GetTotalTopups() int32 {
	if x != nil {
		return x.TotalTopups
	}
	return 0
}

func (x *TopupYearlyMethodResponse) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type TopupMonthAmountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Month         string                 `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	TotalAmount   int32                  `protobuf:"varint,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopupMonthAmountResponse) Reset() {
	*x = TopupMonthAmountResponse{}
	mi := &file_topup_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopupMonthAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopupMonthAmountResponse) ProtoMessage() {}

func (x *TopupMonthAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopupMonthAmountResponse.ProtoReflect.Descriptor instead.
func (*TopupMonthAmountResponse) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{16}
}

func (x *TopupMonthAmountResponse) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *TopupMonthAmountResponse) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type TopupYearlyAmountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          string                 `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	TotalAmount   int32                  `protobuf:"varint,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopupYearlyAmountResponse) Reset() {
	*x = TopupYearlyAmountResponse{}
	mi := &file_topup_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopupYearlyAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopupYearlyAmountResponse) ProtoMessage() {}

func (x *TopupYearlyAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopupYearlyAmountResponse.ProtoReflect.Descriptor instead.
func (*TopupYearlyAmountResponse) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{17}
}

func (x *TopupYearlyAmountResponse) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *TopupYearlyAmountResponse) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type ApiResponseTopupMonthStatusSuccess struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Status        string                             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*TopupMonthStatusSuccessResponse `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseTopupMonthStatusSuccess) Reset() {
	*x = ApiResponseTopupMonthStatusSuccess{}
	mi := &file_topup_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseTopupMonthStatusSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseTopupMonthStatusSuccess) ProtoMessage() {}

func (x *ApiResponseTopupMonthStatusSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseTopupMonthStatusSuccess.ProtoReflect.Descriptor instead.
func (*ApiResponseTopupMonthStatusSuccess) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{18}
}

func (x *ApiResponseTopupMonthStatusSuccess) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseTopupMonthStatusSuccess) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseTopupMonthStatusSuccess) GetData() []*TopupMonthStatusSuccessResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseTopupYearStatusSuccess struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Status        string                            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*TopupYearStatusSuccessResponse `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseTopupYearStatusSuccess) Reset() {
	*x = ApiResponseTopupYearStatusSuccess{}
	mi := &file_topup_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseTopupYearStatusSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseTopupYearStatusSuccess) ProtoMessage() {}

func (x *ApiResponseTopupYearStatusSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseTopupYearStatusSuccess.ProtoReflect.Descriptor instead.
func (*ApiResponseTopupYearStatusSuccess) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{19}
}

func (x *ApiResponseTopupYearStatusSuccess) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseTopupYearStatusSuccess) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseTopupYearStatusSuccess) GetData() []*TopupYearStatusSuccessResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseTopupMonthStatusFailed struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Status        string                            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*TopupMonthStatusFailedResponse `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseTopupMonthStatusFailed) Reset() {
	*x = ApiResponseTopupMonthStatusFailed{}
	mi := &file_topup_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseTopupMonthStatusFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseTopupMonthStatusFailed) ProtoMessage() {}

func (x *ApiResponseTopupMonthStatusFailed) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseTopupMonthStatusFailed.ProtoReflect.Descriptor instead.
func (*ApiResponseTopupMonthStatusFailed) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{20}
}

func (x *ApiResponseTopupMonthStatusFailed) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseTopupMonthStatusFailed) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseTopupMonthStatusFailed) GetData() []*TopupMonthStatusFailedResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseTopupYearStatusFailed struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Status        string                           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*TopupYearStatusFailedResponse `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseTopupYearStatusFailed) Reset() {
	*x = ApiResponseTopupYearStatusFailed{}
	mi := &file_topup_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseTopupYearStatusFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseTopupYearStatusFailed) ProtoMessage() {}

func (x *ApiResponseTopupYearStatusFailed) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseTopupYearStatusFailed.ProtoReflect.Descriptor instead.
func (*ApiResponseTopupYearStatusFailed) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{21}
}

func (x *ApiResponseTopupYearStatusFailed) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseTopupYearStatusFailed) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseTopupYearStatusFailed) GetData() []*TopupYearStatusFailedResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseTopupMonthMethod struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Status        string                      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*TopupMonthMethodResponse `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseTopupMonthMethod) Reset() {
	*x = ApiResponseTopupMonthMethod{}
	mi := &file_topup_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseTopupMonthMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseTopupMonthMethod) ProtoMessage() {}

func (x *ApiResponseTopupMonthMethod) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseTopupMonthMethod.ProtoReflect.Descriptor instead.
func (*ApiResponseTopupMonthMethod) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{22}
}

func (x *ApiResponseTopupMonthMethod) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseTopupMonthMethod) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseTopupMonthMethod) GetData() []*TopupMonthMethodResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseTopupYearMethod struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Status        string                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*TopupYearlyMethodResponse `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseTopupYearMethod) Reset() {
	*x = ApiResponseTopupYearMethod{}
	mi := &file_topup_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseTopupYearMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseTopupYearMethod) ProtoMessage() {}

func (x *ApiResponseTopupYearMethod) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseTopupYearMethod.ProtoReflect.Descriptor instead.
func (*ApiResponseTopupYearMethod) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{23}
}

func (x *ApiResponseTopupYearMethod) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseTopupYearMethod) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseTopupYearMethod) GetData() []*TopupYearlyMethodResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseTopupMonthAmount struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Status        string                      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*TopupMonthAmountResponse `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseTopupMonthAmount) Reset() {
	*x = ApiResponseTopupMonthAmount{}
	mi := &file_topup_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseTopupMonthAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseTopupMonthAmount) ProtoMessage() {}

func (x *ApiResponseTopupMonthAmount) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseTopupMonthAmount.ProtoReflect.Descriptor instead.
func (*ApiResponseTopupMonthAmount) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{24}
}

func (x *ApiResponseTopupMonthAmount) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseTopupMonthAmount) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseTopupMonthAmount) GetData() []*TopupMonthAmountResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseTopupYearAmount struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Status        string                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*TopupYearlyAmountResponse `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseTopupYearAmount) Reset() {
	*x = ApiResponseTopupYearAmount{}
	mi := &file_topup_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseTopupYearAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseTopupYearAmount) ProtoMessage() {}

func (x *ApiResponseTopupYearAmount) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseTopupYearAmount.ProtoReflect.Descriptor instead.
func (*ApiResponseTopupYearAmount) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{25}
}

func (x *ApiResponseTopupYearAmount) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseTopupYearAmount) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseTopupYearAmount) GetData() []*TopupYearlyAmountResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseTopup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          *TopupResponse         `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseTopup) Reset() {
	*x = ApiResponseTopup{}
	mi := &file_topup_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseTopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseTopup) ProtoMessage() {}

func (x *ApiResponseTopup) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseTopup.ProtoReflect.Descriptor instead.
func (*ApiResponseTopup) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{26}
}

func (x *ApiResponseTopup) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseTopup) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseTopup) GetData() *TopupResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponsesTopup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*TopupResponse       `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponsesTopup) Reset() {
	*x = ApiResponsesTopup{}
	mi := &file_topup_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponsesTopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponsesTopup) ProtoMessage() {}

func (x *ApiResponsesTopup) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponsesTopup.ProtoReflect.Descriptor instead.
func (*ApiResponsesTopup) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{27}
}

func (x *ApiResponsesTopup) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponsesTopup) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponsesTopup) GetData() []*TopupResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponsePaginationTopup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*TopupResponse       `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Pagination    *PaginationMeta        `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponsePaginationTopup) Reset() {
	*x = ApiResponsePaginationTopup{}
	mi := &file_topup_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponsePaginationTopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponsePaginationTopup) ProtoMessage() {}

func (x *ApiResponsePaginationTopup) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponsePaginationTopup.ProtoReflect.Descriptor instead.
func (*ApiResponsePaginationTopup) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{28}
}

func (x *ApiResponsePaginationTopup) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponsePaginationTopup) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponsePaginationTopup) GetData() []*TopupResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ApiResponsePaginationTopup) GetPagination() *PaginationMeta {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ApiResponsePaginationTopupDeleteAt struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Status        string                   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*TopupResponseDeleteAt `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Pagination    *PaginationMeta          `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponsePaginationTopupDeleteAt) Reset() {
	*x = ApiResponsePaginationTopupDeleteAt{}
	mi := &file_topup_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponsePaginationTopupDeleteAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponsePaginationTopupDeleteAt) ProtoMessage() {}

func (x *ApiResponsePaginationTopupDeleteAt) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponsePaginationTopupDeleteAt.ProtoReflect.Descriptor instead.
func (*ApiResponsePaginationTopupDeleteAt) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{29}
}

func (x *ApiResponsePaginationTopupDeleteAt) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponsePaginationTopupDeleteAt) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponsePaginationTopupDeleteAt) GetData() []*TopupResponseDeleteAt {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ApiResponsePaginationTopupDeleteAt) GetPagination() *PaginationMeta {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ApiResponseTopupDelete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseTopupDelete) Reset() {
	*x = ApiResponseTopupDelete{}
	mi := &file_topup_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseTopupDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseTopupDelete) ProtoMessage() {}

func (x *ApiResponseTopupDelete) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseTopupDelete.ProtoReflect.Descriptor instead.
func (*ApiResponseTopupDelete) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{30}
}

func (x *ApiResponseTopupDelete) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseTopupDelete) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ApiResponseTopupAll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseTopupAll) Reset() {
	*x = ApiResponseTopupAll{}
	mi := &file_topup_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseTopupAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseTopupAll) ProtoMessage() {}

func (x *ApiResponseTopupAll) ProtoReflect() protoreflect.Message {
	mi := &file_topup_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseTopupAll.ProtoReflect.Descriptor instead.
func (*ApiResponseTopupAll) Descriptor() ([]byte, []int) {
	return file_topup_proto_rawDescGZIP(), []int{31}
}

func (x *ApiResponseTopupAll) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseTopupAll) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_topup_proto protoreflect.FileDescriptor

var file_topup_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x13, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x31, 0x0a, 0x14, 0x46, 0x69, 0x6e,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x16,
	0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x22, 0x53, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x23, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61,
	0x72, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x4e, 0x0a, 0x17, 0x46, 0x69,
	0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x4e, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x70, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f,
	0x70, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f,
	0x70, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f,
	0x70, 0x75, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70,
	0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xfe, 0x01, 0x0a,
	0x0d, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x70, 0x75, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa5, 0x02,
	0x0a, 0x15, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x75,
	0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x75,
	0x70, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x75, 0x70,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f,
	0x70, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70,
	0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6f, 0x70, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x1f, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x1e, 0x54,
	0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x1e, 0x54, 0x6f,
	0x70, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x1d,
	0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x54, 0x6f, 0x70, 0x75,
	0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x70, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61,
	0x72, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x70,
	0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x53,
	0x0a, 0x18, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x19, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61, 0x72,
	0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x22, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65,
	0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x20, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65,
	0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70,
	0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x1a,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x59, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x81, 0x01, 0x0a, 0x1b, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x6f, 0x70, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61,
	0x72, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6b, 0x0a, 0x10, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x11, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xa9, 0x01, 0x0a, 0x1a, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x75,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9,
	0x01, 0x0a, 0x22, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x16, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x47, 0x0a, 0x13, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0xc2, 0x0f, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x70,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x46, 0x69, 0x6e,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x65, 0x0a, 0x1d, 0x46, 0x69,
	0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x00, 0x12, 0x5a, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x54,
	0x6f, 0x70, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x54,
	0x6f, 0x70, 0x75, 0x70, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x63, 0x0a,
	0x1c, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f,
	0x70, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79,
	0x54, 0x6f, 0x70, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x54,
	0x6f, 0x70, 0x75, 0x70, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17,
	0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x59, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x16, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x59, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x59, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17,
	0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x59, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x16, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x59, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x23,
	0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61,
	0x72, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c,
	0x79, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x70,
	0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70,
	0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x54, 0x6f, 0x70,
	0x75, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59,
	0x65, 0x61, 0x72, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x20, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x4f, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79,
	0x54, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x70, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70,
	0x75, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x70,
	0x75, 0x70, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64,
	0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70,
	0x75, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x70,
	0x75, 0x70, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64,
	0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70,
	0x75, 0x70, 0x12, 0x4c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x75,
	0x70, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x6f,
	0x70, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75,
	0x70, 0x41, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x41,
	0x6c, 0x6c, 0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29, 0x4d, 0x61, 0x6d, 0x61, 0x6e, 0x67, 0x52, 0x75,
	0x73, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_topup_proto_rawDescOnce sync.Once
	file_topup_proto_rawDescData = file_topup_proto_rawDesc
)

func file_topup_proto_rawDescGZIP() []byte {
	file_topup_proto_rawDescOnce.Do(func() {
		file_topup_proto_rawDescData = protoimpl.X.CompressGZIP(file_topup_proto_rawDescData)
	})
	return file_topup_proto_rawDescData
}

var file_topup_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_topup_proto_goTypes = []any{
	(*FindAllTopupRequest)(nil),                // 0: pb.FindAllTopupRequest
	(*FindByIdTopupRequest)(nil),               // 1: pb.FindByIdTopupRequest
	(*FindMonthlyTopupStatus)(nil),             // 2: pb.FindMonthlyTopupStatus
	(*FindByCardNumberTopupRequest)(nil),       // 3: pb.FindByCardNumberTopupRequest
	(*FindYearTopup)(nil),                      // 4: pb.FindYearTopup
	(*FindYearTopupCardNumber)(nil),            // 5: pb.FindYearTopupCardNumber
	(*CreateTopupRequest)(nil),                 // 6: pb.CreateTopupRequest
	(*UpdateTopupRequest)(nil),                 // 7: pb.UpdateTopupRequest
	(*TopupResponse)(nil),                      // 8: pb.TopupResponse
	(*TopupResponseDeleteAt)(nil),              // 9: pb.TopupResponseDeleteAt
	(*TopupMonthStatusSuccessResponse)(nil),    // 10: pb.TopupMonthStatusSuccessResponse
	(*TopupYearStatusSuccessResponse)(nil),     // 11: pb.TopupYearStatusSuccessResponse
	(*TopupMonthStatusFailedResponse)(nil),     // 12: pb.TopupMonthStatusFailedResponse
	(*TopupYearStatusFailedResponse)(nil),      // 13: pb.TopupYearStatusFailedResponse
	(*TopupMonthMethodResponse)(nil),           // 14: pb.TopupMonthMethodResponse
	(*TopupYearlyMethodResponse)(nil),          // 15: pb.TopupYearlyMethodResponse
	(*TopupMonthAmountResponse)(nil),           // 16: pb.TopupMonthAmountResponse
	(*TopupYearlyAmountResponse)(nil),          // 17: pb.TopupYearlyAmountResponse
	(*ApiResponseTopupMonthStatusSuccess)(nil), // 18: pb.ApiResponseTopupMonthStatusSuccess
	(*ApiResponseTopupYearStatusSuccess)(nil),  // 19: pb.ApiResponseTopupYearStatusSuccess
	(*ApiResponseTopupMonthStatusFailed)(nil),  // 20: pb.ApiResponseTopupMonthStatusFailed
	(*ApiResponseTopupYearStatusFailed)(nil),   // 21: pb.ApiResponseTopupYearStatusFailed
	(*ApiResponseTopupMonthMethod)(nil),        // 22: pb.ApiResponseTopupMonthMethod
	(*ApiResponseTopupYearMethod)(nil),         // 23: pb.ApiResponseTopupYearMethod
	(*ApiResponseTopupMonthAmount)(nil),        // 24: pb.ApiResponseTopupMonthAmount
	(*ApiResponseTopupYearAmount)(nil),         // 25: pb.ApiResponseTopupYearAmount
	(*ApiResponseTopup)(nil),                   // 26: pb.ApiResponseTopup
	(*ApiResponsesTopup)(nil),                  // 27: pb.ApiResponsesTopup
	(*ApiResponsePaginationTopup)(nil),         // 28: pb.ApiResponsePaginationTopup
	(*ApiResponsePaginationTopupDeleteAt)(nil), // 29: pb.ApiResponsePaginationTopupDeleteAt
	(*ApiResponseTopupDelete)(nil),             // 30: pb.ApiResponseTopupDelete
	(*ApiResponseTopupAll)(nil),                // 31: pb.ApiResponseTopupAll
	(*PaginationMeta)(nil),                     // 32: pb.PaginationMeta
	(*emptypb.Empty)(nil),                      // 33: google.protobuf.Empty
}
var file_topup_proto_depIdxs = []int32{
	10, // 0: pb.ApiResponseTopupMonthStatusSuccess.data:type_name -> pb.TopupMonthStatusSuccessResponse
	11, // 1: pb.ApiResponseTopupYearStatusSuccess.data:type_name -> pb.TopupYearStatusSuccessResponse
	12, // 2: pb.ApiResponseTopupMonthStatusFailed.data:type_name -> pb.TopupMonthStatusFailedResponse
	13, // 3: pb.ApiResponseTopupYearStatusFailed.data:type_name -> pb.TopupYearStatusFailedResponse
	14, // 4: pb.ApiResponseTopupMonthMethod.data:type_name -> pb.TopupMonthMethodResponse
	15, // 5: pb.ApiResponseTopupYearMethod.data:type_name -> pb.TopupYearlyMethodResponse
	16, // 6: pb.ApiResponseTopupMonthAmount.data:type_name -> pb.TopupMonthAmountResponse
	17, // 7: pb.ApiResponseTopupYearAmount.data:type_name -> pb.TopupYearlyAmountResponse
	8,  // 8: pb.ApiResponseTopup.data:type_name -> pb.TopupResponse
	8,  // 9: pb.ApiResponsesTopup.data:type_name -> pb.TopupResponse
	8,  // 10: pb.ApiResponsePaginationTopup.data:type_name -> pb.TopupResponse
	32, // 11: pb.ApiResponsePaginationTopup.pagination:type_name -> pb.PaginationMeta
	9,  // 12: pb.ApiResponsePaginationTopupDeleteAt.data:type_name -> pb.TopupResponseDeleteAt
	32, // 13: pb.ApiResponsePaginationTopupDeleteAt.pagination:type_name -> pb.PaginationMeta
	0,  // 14: pb.TopupService.FindAllTopup:input_type -> pb.FindAllTopupRequest
	1,  // 15: pb.TopupService.FindByIdTopup:input_type -> pb.FindByIdTopupRequest
	2,  // 16: pb.TopupService.FindMonthlyTopupStatusSuccess:input_type -> pb.FindMonthlyTopupStatus
	4,  // 17: pb.TopupService.FindYearlyTopupStatusSuccess:input_type -> pb.FindYearTopup
	2,  // 18: pb.TopupService.FindMonthlyTopupStatusFailed:input_type -> pb.FindMonthlyTopupStatus
	4,  // 19: pb.TopupService.FindYearlyTopupStatusFailed:input_type -> pb.FindYearTopup
	4,  // 20: pb.TopupService.FindMonthlyTopupMethods:input_type -> pb.FindYearTopup
	4,  // 21: pb.TopupService.FindYearlyTopupMethods:input_type -> pb.FindYearTopup
	4,  // 22: pb.TopupService.FindMonthlyTopupAmounts:input_type -> pb.FindYearTopup
	4,  // 23: pb.TopupService.FindYearlyTopupAmounts:input_type -> pb.FindYearTopup
	5,  // 24: pb.TopupService.FindMonthlyTopupMethodsByCardNumber:input_type -> pb.FindYearTopupCardNumber
	5,  // 25: pb.TopupService.FindYearlyTopupMethodsByCardNumber:input_type -> pb.FindYearTopupCardNumber
	5,  // 26: pb.TopupService.FindMonthlyTopupAmountsByCardNumber:input_type -> pb.FindYearTopupCardNumber
	5,  // 27: pb.TopupService.FindYearlyTopupAmountsByCardNumber:input_type -> pb.FindYearTopupCardNumber
	3,  // 28: pb.TopupService.FindByCardNumberTopup:input_type -> pb.FindByCardNumberTopupRequest
	0,  // 29: pb.TopupService.FindByActive:input_type -> pb.FindAllTopupRequest
	0,  // 30: pb.TopupService.FindByTrashed:input_type -> pb.FindAllTopupRequest
	6,  // 31: pb.TopupService.CreateTopup:input_type -> pb.CreateTopupRequest
	7,  // 32: pb.TopupService.UpdateTopup:input_type -> pb.UpdateTopupRequest
	1,  // 33: pb.TopupService.TrashedTopup:input_type -> pb.FindByIdTopupRequest
	1,  // 34: pb.TopupService.RestoreTopup:input_type -> pb.FindByIdTopupRequest
	1,  // 35: pb.TopupService.DeleteTopupPermanent:input_type -> pb.FindByIdTopupRequest
	33, // 36: pb.TopupService.RestoreAllTopup:input_type -> google.protobuf.Empty
	33, // 37: pb.TopupService.DeleteAllTopupPermanent:input_type -> google.protobuf.Empty
	28, // 38: pb.TopupService.FindAllTopup:output_type -> pb.ApiResponsePaginationTopup
	26, // 39: pb.TopupService.FindByIdTopup:output_type -> pb.ApiResponseTopup
	18, // 40: pb.TopupService.FindMonthlyTopupStatusSuccess:output_type -> pb.ApiResponseTopupMonthStatusSuccess
	19, // 41: pb.TopupService.FindYearlyTopupStatusSuccess:output_type -> pb.ApiResponseTopupYearStatusSuccess
	20, // 42: pb.TopupService.FindMonthlyTopupStatusFailed:output_type -> pb.ApiResponseTopupMonthStatusFailed
	21, // 43: pb.TopupService.FindYearlyTopupStatusFailed:output_type -> pb.ApiResponseTopupYearStatusFailed
	22, // 44: pb.TopupService.FindMonthlyTopupMethods:output_type -> pb.ApiResponseTopupMonthMethod
	23, // 45: pb.TopupService.FindYearlyTopupMethods:output_type -> pb.ApiResponseTopupYearMethod
	24, // 46: pb.TopupService.FindMonthlyTopupAmounts:output_type -> pb.ApiResponseTopupMonthAmount
	25, // 47: pb.TopupService.FindYearlyTopupAmounts:output_type -> pb.ApiResponseTopupYearAmount
	22, // 48: pb.TopupService.FindMonthlyTopupMethodsByCardNumber:output_type -> pb.ApiResponseTopupMonthMethod
	23, // 49: pb.TopupService.FindYearlyTopupMethodsByCardNumber:output_type -> pb.ApiResponseTopupYearMethod
	24, // 50: pb.TopupService.FindMonthlyTopupAmountsByCardNumber:output_type -> pb.ApiResponseTopupMonthAmount
	25, // 51: pb.TopupService.FindYearlyTopupAmountsByCardNumber:output_type -> pb.ApiResponseTopupYearAmount
	26, // 52: pb.TopupService.FindByCardNumberTopup:output_type -> pb.ApiResponseTopup
	29, // 53: pb.TopupService.FindByActive:output_type -> pb.ApiResponsePaginationTopupDeleteAt
	29, // 54: pb.TopupService.FindByTrashed:output_type -> pb.ApiResponsePaginationTopupDeleteAt
	26, // 55: pb.TopupService.CreateTopup:output_type -> pb.ApiResponseTopup
	26, // 56: pb.TopupService.UpdateTopup:output_type -> pb.ApiResponseTopup
	26, // 57: pb.TopupService.TrashedTopup:output_type -> pb.ApiResponseTopup
	26, // 58: pb.TopupService.RestoreTopup:output_type -> pb.ApiResponseTopup
	30, // 59: pb.TopupService.DeleteTopupPermanent:output_type -> pb.ApiResponseTopupDelete
	31, // 60: pb.TopupService.RestoreAllTopup:output_type -> pb.ApiResponseTopupAll
	31, // 61: pb.TopupService.DeleteAllTopupPermanent:output_type -> pb.ApiResponseTopupAll
	38, // [38:62] is the sub-list for method output_type
	14, // [14:38] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_topup_proto_init() }
func file_topup_proto_init() {
	if File_topup_proto != nil {
		return
	}
	file_api_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_topup_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_topup_proto_goTypes,
		DependencyIndexes: file_topup_proto_depIdxs,
		MessageInfos:      file_topup_proto_msgTypes,
	}.Build()
	File_topup_proto = out.File
	file_topup_proto_rawDesc = nil
	file_topup_proto_goTypes = nil
	file_topup_proto_depIdxs = nil
}
