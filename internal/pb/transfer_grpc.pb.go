// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: transfer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransferService_FindAllTransfer_FullMethodName            = "/pb.TransferService/FindAllTransfer"
	TransferService_FindByIdTransfer_FullMethodName           = "/pb.TransferService/FindByIdTransfer"
	TransferService_FindTransferByTransferFrom_FullMethodName = "/pb.TransferService/FindTransferByTransferFrom"
	TransferService_FindTransferByTransferTo_FullMethodName   = "/pb.TransferService/FindTransferByTransferTo"
	TransferService_FindByActiveTransfer_FullMethodName       = "/pb.TransferService/FindByActiveTransfer"
	TransferService_FindByTrashedTransfer_FullMethodName      = "/pb.TransferService/FindByTrashedTransfer"
	TransferService_CreateTransfer_FullMethodName             = "/pb.TransferService/CreateTransfer"
	TransferService_UpdateTransfer_FullMethodName             = "/pb.TransferService/UpdateTransfer"
	TransferService_TrashedTransfer_FullMethodName            = "/pb.TransferService/TrashedTransfer"
	TransferService_RestoreTransfer_FullMethodName            = "/pb.TransferService/RestoreTransfer"
	TransferService_DeleteTransferPermanent_FullMethodName    = "/pb.TransferService/DeleteTransferPermanent"
	TransferService_RestoreAllTransfer_FullMethodName         = "/pb.TransferService/RestoreAllTransfer"
	TransferService_DeleteAllTransferPermanent_FullMethodName = "/pb.TransferService/DeleteAllTransferPermanent"
)

// TransferServiceClient is the client API for TransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferServiceClient interface {
	FindAllTransfer(ctx context.Context, in *FindAllTransferRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransfer, error)
	FindByIdTransfer(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error)
	FindTransferByTransferFrom(ctx context.Context, in *FindTransferByTransferFromRequest, opts ...grpc.CallOption) (*ApiResponseTransfers, error)
	FindTransferByTransferTo(ctx context.Context, in *FindTransferByTransferToRequest, opts ...grpc.CallOption) (*ApiResponseTransfers, error)
	FindByActiveTransfer(ctx context.Context, in *FindAllTransferRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransferDeleteAt, error)
	FindByTrashedTransfer(ctx context.Context, in *FindAllTransferRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransferDeleteAt, error)
	CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error)
	UpdateTransfer(ctx context.Context, in *UpdateTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error)
	TrashedTransfer(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error)
	RestoreTransfer(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error)
	DeleteTransferPermanent(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransferDelete, error)
	RestoreAllTransfer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransferAll, error)
	DeleteAllTransferPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransferAll, error)
}

type transferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferServiceClient(cc grpc.ClientConnInterface) TransferServiceClient {
	return &transferServiceClient{cc}
}

func (c *transferServiceClient) FindAllTransfer(ctx context.Context, in *FindAllTransferRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransfer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransfer)
	err := c.cc.Invoke(ctx, TransferService_FindAllTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) FindByIdTransfer(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransfer)
	err := c.cc.Invoke(ctx, TransferService_FindByIdTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) FindTransferByTransferFrom(ctx context.Context, in *FindTransferByTransferFromRequest, opts ...grpc.CallOption) (*ApiResponseTransfers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransfers)
	err := c.cc.Invoke(ctx, TransferService_FindTransferByTransferFrom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) FindTransferByTransferTo(ctx context.Context, in *FindTransferByTransferToRequest, opts ...grpc.CallOption) (*ApiResponseTransfers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransfers)
	err := c.cc.Invoke(ctx, TransferService_FindTransferByTransferTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) FindByActiveTransfer(ctx context.Context, in *FindAllTransferRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransferDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransferDeleteAt)
	err := c.cc.Invoke(ctx, TransferService_FindByActiveTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) FindByTrashedTransfer(ctx context.Context, in *FindAllTransferRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransferDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransferDeleteAt)
	err := c.cc.Invoke(ctx, TransferService_FindByTrashedTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransfer)
	err := c.cc.Invoke(ctx, TransferService_CreateTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) UpdateTransfer(ctx context.Context, in *UpdateTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransfer)
	err := c.cc.Invoke(ctx, TransferService_UpdateTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) TrashedTransfer(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransfer)
	err := c.cc.Invoke(ctx, TransferService_TrashedTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) RestoreTransfer(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransfer)
	err := c.cc.Invoke(ctx, TransferService_RestoreTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) DeleteTransferPermanent(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransferDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferDelete)
	err := c.cc.Invoke(ctx, TransferService_DeleteTransferPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) RestoreAllTransfer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransferAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferAll)
	err := c.cc.Invoke(ctx, TransferService_RestoreAllTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) DeleteAllTransferPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransferAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferAll)
	err := c.cc.Invoke(ctx, TransferService_DeleteAllTransferPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferServiceServer is the server API for TransferService service.
// All implementations must embed UnimplementedTransferServiceServer
// for forward compatibility.
type TransferServiceServer interface {
	FindAllTransfer(context.Context, *FindAllTransferRequest) (*ApiResponsePaginationTransfer, error)
	FindByIdTransfer(context.Context, *FindByIdTransferRequest) (*ApiResponseTransfer, error)
	FindTransferByTransferFrom(context.Context, *FindTransferByTransferFromRequest) (*ApiResponseTransfers, error)
	FindTransferByTransferTo(context.Context, *FindTransferByTransferToRequest) (*ApiResponseTransfers, error)
	FindByActiveTransfer(context.Context, *FindAllTransferRequest) (*ApiResponsePaginationTransferDeleteAt, error)
	FindByTrashedTransfer(context.Context, *FindAllTransferRequest) (*ApiResponsePaginationTransferDeleteAt, error)
	CreateTransfer(context.Context, *CreateTransferRequest) (*ApiResponseTransfer, error)
	UpdateTransfer(context.Context, *UpdateTransferRequest) (*ApiResponseTransfer, error)
	TrashedTransfer(context.Context, *FindByIdTransferRequest) (*ApiResponseTransfer, error)
	RestoreTransfer(context.Context, *FindByIdTransferRequest) (*ApiResponseTransfer, error)
	DeleteTransferPermanent(context.Context, *FindByIdTransferRequest) (*ApiResponseTransferDelete, error)
	RestoreAllTransfer(context.Context, *emptypb.Empty) (*ApiResponseTransferAll, error)
	DeleteAllTransferPermanent(context.Context, *emptypb.Empty) (*ApiResponseTransferAll, error)
	mustEmbedUnimplementedTransferServiceServer()
}

// UnimplementedTransferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransferServiceServer struct{}

func (UnimplementedTransferServiceServer) FindAllTransfer(context.Context, *FindAllTransferRequest) (*ApiResponsePaginationTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTransfer not implemented")
}
func (UnimplementedTransferServiceServer) FindByIdTransfer(context.Context, *FindByIdTransferRequest) (*ApiResponseTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdTransfer not implemented")
}
func (UnimplementedTransferServiceServer) FindTransferByTransferFrom(context.Context, *FindTransferByTransferFromRequest) (*ApiResponseTransfers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTransferByTransferFrom not implemented")
}
func (UnimplementedTransferServiceServer) FindTransferByTransferTo(context.Context, *FindTransferByTransferToRequest) (*ApiResponseTransfers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTransferByTransferTo not implemented")
}
func (UnimplementedTransferServiceServer) FindByActiveTransfer(context.Context, *FindAllTransferRequest) (*ApiResponsePaginationTransferDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActiveTransfer not implemented")
}
func (UnimplementedTransferServiceServer) FindByTrashedTransfer(context.Context, *FindAllTransferRequest) (*ApiResponsePaginationTransferDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashedTransfer not implemented")
}
func (UnimplementedTransferServiceServer) CreateTransfer(context.Context, *CreateTransferRequest) (*ApiResponseTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfer not implemented")
}
func (UnimplementedTransferServiceServer) UpdateTransfer(context.Context, *UpdateTransferRequest) (*ApiResponseTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransfer not implemented")
}
func (UnimplementedTransferServiceServer) TrashedTransfer(context.Context, *FindByIdTransferRequest) (*ApiResponseTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedTransfer not implemented")
}
func (UnimplementedTransferServiceServer) RestoreTransfer(context.Context, *FindByIdTransferRequest) (*ApiResponseTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreTransfer not implemented")
}
func (UnimplementedTransferServiceServer) DeleteTransferPermanent(context.Context, *FindByIdTransferRequest) (*ApiResponseTransferDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransferPermanent not implemented")
}
func (UnimplementedTransferServiceServer) RestoreAllTransfer(context.Context, *emptypb.Empty) (*ApiResponseTransferAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllTransfer not implemented")
}
func (UnimplementedTransferServiceServer) DeleteAllTransferPermanent(context.Context, *emptypb.Empty) (*ApiResponseTransferAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllTransferPermanent not implemented")
}
func (UnimplementedTransferServiceServer) mustEmbedUnimplementedTransferServiceServer() {}
func (UnimplementedTransferServiceServer) testEmbeddedByValue()                         {}

// UnsafeTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferServiceServer will
// result in compilation errors.
type UnsafeTransferServiceServer interface {
	mustEmbedUnimplementedTransferServiceServer()
}

func RegisterTransferServiceServer(s grpc.ServiceRegistrar, srv TransferServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransferService_ServiceDesc, srv)
}

func _TransferService_FindAllTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).FindAllTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_FindAllTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).FindAllTransfer(ctx, req.(*FindAllTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_FindByIdTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).FindByIdTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_FindByIdTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).FindByIdTransfer(ctx, req.(*FindByIdTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_FindTransferByTransferFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTransferByTransferFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).FindTransferByTransferFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_FindTransferByTransferFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).FindTransferByTransferFrom(ctx, req.(*FindTransferByTransferFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_FindTransferByTransferTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTransferByTransferToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).FindTransferByTransferTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_FindTransferByTransferTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).FindTransferByTransferTo(ctx, req.(*FindTransferByTransferToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_FindByActiveTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).FindByActiveTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_FindByActiveTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).FindByActiveTransfer(ctx, req.(*FindAllTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_FindByTrashedTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).FindByTrashedTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_FindByTrashedTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).FindByTrashedTransfer(ctx, req.(*FindAllTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_CreateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).CreateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_CreateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).CreateTransfer(ctx, req.(*CreateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_UpdateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).UpdateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_UpdateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).UpdateTransfer(ctx, req.(*UpdateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_TrashedTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).TrashedTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_TrashedTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).TrashedTransfer(ctx, req.(*FindByIdTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_RestoreTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).RestoreTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_RestoreTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).RestoreTransfer(ctx, req.(*FindByIdTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_DeleteTransferPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).DeleteTransferPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_DeleteTransferPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).DeleteTransferPermanent(ctx, req.(*FindByIdTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_RestoreAllTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).RestoreAllTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_RestoreAllTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).RestoreAllTransfer(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_DeleteAllTransferPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).DeleteAllTransferPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_DeleteAllTransferPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).DeleteAllTransferPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferService_ServiceDesc is the grpc.ServiceDesc for TransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TransferService",
	HandlerType: (*TransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllTransfer",
			Handler:    _TransferService_FindAllTransfer_Handler,
		},
		{
			MethodName: "FindByIdTransfer",
			Handler:    _TransferService_FindByIdTransfer_Handler,
		},
		{
			MethodName: "FindTransferByTransferFrom",
			Handler:    _TransferService_FindTransferByTransferFrom_Handler,
		},
		{
			MethodName: "FindTransferByTransferTo",
			Handler:    _TransferService_FindTransferByTransferTo_Handler,
		},
		{
			MethodName: "FindByActiveTransfer",
			Handler:    _TransferService_FindByActiveTransfer_Handler,
		},
		{
			MethodName: "FindByTrashedTransfer",
			Handler:    _TransferService_FindByTrashedTransfer_Handler,
		},
		{
			MethodName: "CreateTransfer",
			Handler:    _TransferService_CreateTransfer_Handler,
		},
		{
			MethodName: "UpdateTransfer",
			Handler:    _TransferService_UpdateTransfer_Handler,
		},
		{
			MethodName: "TrashedTransfer",
			Handler:    _TransferService_TrashedTransfer_Handler,
		},
		{
			MethodName: "RestoreTransfer",
			Handler:    _TransferService_RestoreTransfer_Handler,
		},
		{
			MethodName: "DeleteTransferPermanent",
			Handler:    _TransferService_DeleteTransferPermanent_Handler,
		},
		{
			MethodName: "RestoreAllTransfer",
			Handler:    _TransferService_RestoreAllTransfer_Handler,
		},
		{
			MethodName: "DeleteAllTransferPermanent",
			Handler:    _TransferService_DeleteAllTransferPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}
