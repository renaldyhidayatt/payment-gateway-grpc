// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: card.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FindAllCardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Search        string                 `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindAllCardRequest) Reset() {
	*x = FindAllCardRequest{}
	mi := &file_card_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindAllCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllCardRequest) ProtoMessage() {}

func (x *FindAllCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllCardRequest.ProtoReflect.Descriptor instead.
func (*FindAllCardRequest) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{0}
}

func (x *FindAllCardRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindAllCardRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FindAllCardRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type FindByIdCardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CardId        int32                  `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindByIdCardRequest) Reset() {
	*x = FindByIdCardRequest{}
	mi := &file_card_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByIdCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByIdCardRequest) ProtoMessage() {}

func (x *FindByIdCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByIdCardRequest.ProtoReflect.Descriptor instead.
func (*FindByIdCardRequest) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{1}
}

func (x *FindByIdCardRequest) GetCardId() int32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type CreateCardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CardType      string                 `protobuf:"bytes,2,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	ExpireDate    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	Cvv           string                 `protobuf:"bytes,4,opt,name=cvv,proto3" json:"cvv,omitempty"`
	CardProvider  string                 `protobuf:"bytes,5,opt,name=card_provider,json=cardProvider,proto3" json:"card_provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCardRequest) Reset() {
	*x = CreateCardRequest{}
	mi := &file_card_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCardRequest) ProtoMessage() {}

func (x *CreateCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCardRequest.ProtoReflect.Descriptor instead.
func (*CreateCardRequest) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCardRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateCardRequest) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *CreateCardRequest) GetExpireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *CreateCardRequest) GetCvv() string {
	if x != nil {
		return x.Cvv
	}
	return ""
}

func (x *CreateCardRequest) GetCardProvider() string {
	if x != nil {
		return x.CardProvider
	}
	return ""
}

type UpdateCardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CardId        int32                  `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	UserId        int32                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CardType      string                 `protobuf:"bytes,3,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	ExpireDate    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	Cvv           string                 `protobuf:"bytes,5,opt,name=cvv,proto3" json:"cvv,omitempty"`
	CardProvider  string                 `protobuf:"bytes,6,opt,name=card_provider,json=cardProvider,proto3" json:"card_provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCardRequest) Reset() {
	*x = UpdateCardRequest{}
	mi := &file_card_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCardRequest) ProtoMessage() {}

func (x *UpdateCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCardRequest.ProtoReflect.Descriptor instead.
func (*UpdateCardRequest) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateCardRequest) GetCardId() int32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *UpdateCardRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateCardRequest) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *UpdateCardRequest) GetExpireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *UpdateCardRequest) GetCvv() string {
	if x != nil {
		return x.Cvv
	}
	return ""
}

func (x *UpdateCardRequest) GetCardProvider() string {
	if x != nil {
		return x.CardProvider
	}
	return ""
}

type CardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        int32                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CardNumber    string                 `protobuf:"bytes,3,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	CardType      string                 `protobuf:"bytes,4,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	ExpireDate    string                 `protobuf:"bytes,5,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	Cvv           string                 `protobuf:"bytes,6,opt,name=cvv,proto3" json:"cvv,omitempty"`
	CardProvider  string                 `protobuf:"bytes,7,opt,name=card_provider,json=cardProvider,proto3" json:"card_provider,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CardResponse) Reset() {
	*x = CardResponse{}
	mi := &file_card_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardResponse) ProtoMessage() {}

func (x *CardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardResponse.ProtoReflect.Descriptor instead.
func (*CardResponse) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{4}
}

func (x *CardResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardResponse) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CardResponse) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *CardResponse) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *CardResponse) GetExpireDate() string {
	if x != nil {
		return x.ExpireDate
	}
	return ""
}

func (x *CardResponse) GetCvv() string {
	if x != nil {
		return x.Cvv
	}
	return ""
}

func (x *CardResponse) GetCardProvider() string {
	if x != nil {
		return x.CardProvider
	}
	return ""
}

func (x *CardResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CardResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type CardResponseDeleteAt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        int32                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CardNumber    string                 `protobuf:"bytes,3,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	CardType      string                 `protobuf:"bytes,4,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	ExpireDate    string                 `protobuf:"bytes,5,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	Cvv           string                 `protobuf:"bytes,6,opt,name=cvv,proto3" json:"cvv,omitempty"`
	CardProvider  string                 `protobuf:"bytes,7,opt,name=card_provider,json=cardProvider,proto3" json:"card_provider,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt     string                 `protobuf:"bytes,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CardResponseDeleteAt) Reset() {
	*x = CardResponseDeleteAt{}
	mi := &file_card_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardResponseDeleteAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardResponseDeleteAt) ProtoMessage() {}

func (x *CardResponseDeleteAt) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardResponseDeleteAt.ProtoReflect.Descriptor instead.
func (*CardResponseDeleteAt) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{5}
}

func (x *CardResponseDeleteAt) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardResponseDeleteAt) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CardResponseDeleteAt) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *CardResponseDeleteAt) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *CardResponseDeleteAt) GetExpireDate() string {
	if x != nil {
		return x.ExpireDate
	}
	return ""
}

func (x *CardResponseDeleteAt) GetCvv() string {
	if x != nil {
		return x.Cvv
	}
	return ""
}

func (x *CardResponseDeleteAt) GetCardProvider() string {
	if x != nil {
		return x.CardProvider
	}
	return ""
}

func (x *CardResponseDeleteAt) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CardResponseDeleteAt) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *CardResponseDeleteAt) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type CardResponseMonthlyBalance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Month         string                 `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	TotalBalance  int64                  `protobuf:"varint,2,opt,name=total_balance,json=totalBalance,proto3" json:"total_balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CardResponseMonthlyBalance) Reset() {
	*x = CardResponseMonthlyBalance{}
	mi := &file_card_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardResponseMonthlyBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardResponseMonthlyBalance) ProtoMessage() {}

func (x *CardResponseMonthlyBalance) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardResponseMonthlyBalance.ProtoReflect.Descriptor instead.
func (*CardResponseMonthlyBalance) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{6}
}

func (x *CardResponseMonthlyBalance) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *CardResponseMonthlyBalance) GetTotalBalance() int64 {
	if x != nil {
		return x.TotalBalance
	}
	return 0
}

type CardResponseYearlyBalance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          string                 `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	TotalBalance  int64                  `protobuf:"varint,2,opt,name=total_balance,json=totalBalance,proto3" json:"total_balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CardResponseYearlyBalance) Reset() {
	*x = CardResponseYearlyBalance{}
	mi := &file_card_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardResponseYearlyBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardResponseYearlyBalance) ProtoMessage() {}

func (x *CardResponseYearlyBalance) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardResponseYearlyBalance.ProtoReflect.Descriptor instead.
func (*CardResponseYearlyBalance) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{7}
}

func (x *CardResponseYearlyBalance) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *CardResponseYearlyBalance) GetTotalBalance() int64 {
	if x != nil {
		return x.TotalBalance
	}
	return 0
}

type CardResponseMonthlyAmount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Month         string                 `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	TotalAmount   int64                  `protobuf:"varint,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CardResponseMonthlyAmount) Reset() {
	*x = CardResponseMonthlyAmount{}
	mi := &file_card_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardResponseMonthlyAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardResponseMonthlyAmount) ProtoMessage() {}

func (x *CardResponseMonthlyAmount) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardResponseMonthlyAmount.ProtoReflect.Descriptor instead.
func (*CardResponseMonthlyAmount) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{8}
}

func (x *CardResponseMonthlyAmount) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *CardResponseMonthlyAmount) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type CardResponseYearlyAmount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          string                 `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	TotalAmount   int64                  `protobuf:"varint,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CardResponseYearlyAmount) Reset() {
	*x = CardResponseYearlyAmount{}
	mi := &file_card_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardResponseYearlyAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardResponseYearlyAmount) ProtoMessage() {}

func (x *CardResponseYearlyAmount) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardResponseYearlyAmount.ProtoReflect.Descriptor instead.
func (*CardResponseYearlyAmount) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{9}
}

func (x *CardResponseYearlyAmount) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *CardResponseYearlyAmount) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type CardResponseDashboard struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TotalBalance     int64                  `protobuf:"varint,1,opt,name=total_balance,json=totalBalance,proto3" json:"total_balance,omitempty"`
	TotalTopup       int64                  `protobuf:"varint,2,opt,name=total_topup,json=totalTopup,proto3" json:"total_topup,omitempty"`
	TotalWithdraw    int64                  `protobuf:"varint,3,opt,name=total_withdraw,json=totalWithdraw,proto3" json:"total_withdraw,omitempty"`
	TotalTransaction int64                  `protobuf:"varint,4,opt,name=total_transaction,json=totalTransaction,proto3" json:"total_transaction,omitempty"`
	TotalTransfer    int64                  `protobuf:"varint,5,opt,name=total_transfer,json=totalTransfer,proto3" json:"total_transfer,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CardResponseDashboard) Reset() {
	*x = CardResponseDashboard{}
	mi := &file_card_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardResponseDashboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardResponseDashboard) ProtoMessage() {}

func (x *CardResponseDashboard) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardResponseDashboard.ProtoReflect.Descriptor instead.
func (*CardResponseDashboard) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{10}
}

func (x *CardResponseDashboard) GetTotalBalance() int64 {
	if x != nil {
		return x.TotalBalance
	}
	return 0
}

func (x *CardResponseDashboard) GetTotalTopup() int64 {
	if x != nil {
		return x.TotalTopup
	}
	return 0
}

func (x *CardResponseDashboard) GetTotalWithdraw() int64 {
	if x != nil {
		return x.TotalWithdraw
	}
	return 0
}

func (x *CardResponseDashboard) GetTotalTransaction() int64 {
	if x != nil {
		return x.TotalTransaction
	}
	return 0
}

func (x *CardResponseDashboard) GetTotalTransfer() int64 {
	if x != nil {
		return x.TotalTransfer
	}
	return 0
}

type CardResponseDashboardCardNumber struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TotalBalance          int64                  `protobuf:"varint,1,opt,name=total_balance,json=totalBalance,proto3" json:"total_balance,omitempty"`
	TotalTopup            int64                  `protobuf:"varint,2,opt,name=total_topup,json=totalTopup,proto3" json:"total_topup,omitempty"`
	TotalWithdraw         int64                  `protobuf:"varint,3,opt,name=total_withdraw,json=totalWithdraw,proto3" json:"total_withdraw,omitempty"`
	TotalTransaction      int64                  `protobuf:"varint,4,opt,name=total_transaction,json=totalTransaction,proto3" json:"total_transaction,omitempty"`
	TotalTransferSend     int64                  `protobuf:"varint,5,opt,name=total_transfer_send,json=totalTransferSend,proto3" json:"total_transfer_send,omitempty"`
	TotalTransferReceiver int64                  `protobuf:"varint,6,opt,name=total_transfer_receiver,json=totalTransferReceiver,proto3" json:"total_transfer_receiver,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CardResponseDashboardCardNumber) Reset() {
	*x = CardResponseDashboardCardNumber{}
	mi := &file_card_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardResponseDashboardCardNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardResponseDashboardCardNumber) ProtoMessage() {}

func (x *CardResponseDashboardCardNumber) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardResponseDashboardCardNumber.ProtoReflect.Descriptor instead.
func (*CardResponseDashboardCardNumber) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{11}
}

func (x *CardResponseDashboardCardNumber) GetTotalBalance() int64 {
	if x != nil {
		return x.TotalBalance
	}
	return 0
}

func (x *CardResponseDashboardCardNumber) GetTotalTopup() int64 {
	if x != nil {
		return x.TotalTopup
	}
	return 0
}

func (x *CardResponseDashboardCardNumber) GetTotalWithdraw() int64 {
	if x != nil {
		return x.TotalWithdraw
	}
	return 0
}

func (x *CardResponseDashboardCardNumber) GetTotalTransaction() int64 {
	if x != nil {
		return x.TotalTransaction
	}
	return 0
}

func (x *CardResponseDashboardCardNumber) GetTotalTransferSend() int64 {
	if x != nil {
		return x.TotalTransferSend
	}
	return 0
}

func (x *CardResponseDashboardCardNumber) GetTotalTransferReceiver() int64 {
	if x != nil {
		return x.TotalTransferReceiver
	}
	return 0
}

type ApiResponseCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          *CardResponse          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseCard) Reset() {
	*x = ApiResponseCard{}
	mi := &file_card_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseCard) ProtoMessage() {}

func (x *ApiResponseCard) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseCard.ProtoReflect.Descriptor instead.
func (*ApiResponseCard) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{12}
}

func (x *ApiResponseCard) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseCard) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseCard) GetData() *CardResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseCardDelete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseCardDelete) Reset() {
	*x = ApiResponseCardDelete{}
	mi := &file_card_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseCardDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseCardDelete) ProtoMessage() {}

func (x *ApiResponseCardDelete) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseCardDelete.ProtoReflect.Descriptor instead.
func (*ApiResponseCardDelete) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{13}
}

func (x *ApiResponseCardDelete) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseCardDelete) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ApiResponseCardAll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseCardAll) Reset() {
	*x = ApiResponseCardAll{}
	mi := &file_card_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseCardAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseCardAll) ProtoMessage() {}

func (x *ApiResponseCardAll) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseCardAll.ProtoReflect.Descriptor instead.
func (*ApiResponseCardAll) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{14}
}

func (x *ApiResponseCardAll) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseCardAll) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ApiResponsePaginationCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*CardResponse        `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Pagination    *PaginationMeta        `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponsePaginationCard) Reset() {
	*x = ApiResponsePaginationCard{}
	mi := &file_card_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponsePaginationCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponsePaginationCard) ProtoMessage() {}

func (x *ApiResponsePaginationCard) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponsePaginationCard.ProtoReflect.Descriptor instead.
func (*ApiResponsePaginationCard) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{15}
}

func (x *ApiResponsePaginationCard) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponsePaginationCard) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponsePaginationCard) GetData() []*CardResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ApiResponsePaginationCard) GetPagination() *PaginationMeta {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ApiResponsePaginationCardDeleteAt struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Status        string                  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*CardResponseDeleteAt `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Pagination    *PaginationMeta         `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponsePaginationCardDeleteAt) Reset() {
	*x = ApiResponsePaginationCardDeleteAt{}
	mi := &file_card_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponsePaginationCardDeleteAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponsePaginationCardDeleteAt) ProtoMessage() {}

func (x *ApiResponsePaginationCardDeleteAt) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponsePaginationCardDeleteAt.ProtoReflect.Descriptor instead.
func (*ApiResponsePaginationCardDeleteAt) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{16}
}

func (x *ApiResponsePaginationCardDeleteAt) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponsePaginationCardDeleteAt) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponsePaginationCardDeleteAt) GetData() []*CardResponseDeleteAt {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ApiResponsePaginationCardDeleteAt) GetPagination() *PaginationMeta {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ApiResponseMonthlyBalance struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Status        string                        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*CardResponseMonthlyBalance `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseMonthlyBalance) Reset() {
	*x = ApiResponseMonthlyBalance{}
	mi := &file_card_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseMonthlyBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseMonthlyBalance) ProtoMessage() {}

func (x *ApiResponseMonthlyBalance) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseMonthlyBalance.ProtoReflect.Descriptor instead.
func (*ApiResponseMonthlyBalance) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{17}
}

func (x *ApiResponseMonthlyBalance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseMonthlyBalance) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseMonthlyBalance) GetData() []*CardResponseMonthlyBalance {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseYearlyBalance struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Status        string                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*CardResponseYearlyBalance `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseYearlyBalance) Reset() {
	*x = ApiResponseYearlyBalance{}
	mi := &file_card_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseYearlyBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseYearlyBalance) ProtoMessage() {}

func (x *ApiResponseYearlyBalance) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseYearlyBalance.ProtoReflect.Descriptor instead.
func (*ApiResponseYearlyBalance) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{18}
}

func (x *ApiResponseYearlyBalance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseYearlyBalance) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseYearlyBalance) GetData() []*CardResponseYearlyBalance {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseMonthlyAmount struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Status        string                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*CardResponseMonthlyAmount `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseMonthlyAmount) Reset() {
	*x = ApiResponseMonthlyAmount{}
	mi := &file_card_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseMonthlyAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseMonthlyAmount) ProtoMessage() {}

func (x *ApiResponseMonthlyAmount) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseMonthlyAmount.ProtoReflect.Descriptor instead.
func (*ApiResponseMonthlyAmount) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{19}
}

func (x *ApiResponseMonthlyAmount) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseMonthlyAmount) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseMonthlyAmount) GetData() []*CardResponseMonthlyAmount {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseYearlyAmount struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Status        string                      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*CardResponseYearlyAmount `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseYearlyAmount) Reset() {
	*x = ApiResponseYearlyAmount{}
	mi := &file_card_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseYearlyAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseYearlyAmount) ProtoMessage() {}

func (x *ApiResponseYearlyAmount) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseYearlyAmount.ProtoReflect.Descriptor instead.
func (*ApiResponseYearlyAmount) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{20}
}

func (x *ApiResponseYearlyAmount) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseYearlyAmount) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseYearlyAmount) GetData() []*CardResponseYearlyAmount {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseDashboardCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          *CardResponseDashboard `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseDashboardCard) Reset() {
	*x = ApiResponseDashboardCard{}
	mi := &file_card_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseDashboardCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseDashboardCard) ProtoMessage() {}

func (x *ApiResponseDashboardCard) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseDashboardCard.ProtoReflect.Descriptor instead.
func (*ApiResponseDashboardCard) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{21}
}

func (x *ApiResponseDashboardCard) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseDashboardCard) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseDashboardCard) GetData() *CardResponseDashboard {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiResponseDashboardCardNumber struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Status        string                           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          *CardResponseDashboardCardNumber `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseDashboardCardNumber) Reset() {
	*x = ApiResponseDashboardCardNumber{}
	mi := &file_card_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseDashboardCardNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseDashboardCardNumber) ProtoMessage() {}

func (x *ApiResponseDashboardCardNumber) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseDashboardCardNumber.ProtoReflect.Descriptor instead.
func (*ApiResponseDashboardCardNumber) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{22}
}

func (x *ApiResponseDashboardCardNumber) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseDashboardCardNumber) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseDashboardCardNumber) GetData() *CardResponseDashboardCardNumber {
	if x != nil {
		return x.Data
	}
	return nil
}

type FindByUserIdCardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindByUserIdCardRequest) Reset() {
	*x = FindByUserIdCardRequest{}
	mi := &file_card_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByUserIdCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByUserIdCardRequest) ProtoMessage() {}

func (x *FindByUserIdCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByUserIdCardRequest.ProtoReflect.Descriptor instead.
func (*FindByUserIdCardRequest) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{23}
}

func (x *FindByUserIdCardRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ApiResponseCards struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          []*CardResponse        `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseCards) Reset() {
	*x = ApiResponseCards{}
	mi := &file_card_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseCards) ProtoMessage() {}

func (x *ApiResponseCards) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseCards.ProtoReflect.Descriptor instead.
func (*ApiResponseCards) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{24}
}

func (x *ApiResponseCards) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiResponseCards) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiResponseCards) GetData() []*CardResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type FindYearBalance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          int32                  `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindYearBalance) Reset() {
	*x = FindYearBalance{}
	mi := &file_card_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindYearBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindYearBalance) ProtoMessage() {}

func (x *FindYearBalance) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindYearBalance.ProtoReflect.Descriptor instead.
func (*FindYearBalance) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{25}
}

func (x *FindYearBalance) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type FindYearBalanceCardNumber struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          int32                  `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	CardNumber    string                 `protobuf:"bytes,2,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindYearBalanceCardNumber) Reset() {
	*x = FindYearBalanceCardNumber{}
	mi := &file_card_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindYearBalanceCardNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindYearBalanceCardNumber) ProtoMessage() {}

func (x *FindYearBalanceCardNumber) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindYearBalanceCardNumber.ProtoReflect.Descriptor instead.
func (*FindYearBalanceCardNumber) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{26}
}

func (x *FindYearBalanceCardNumber) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FindYearBalanceCardNumber) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

type FindYearAmount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          int32                  `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindYearAmount) Reset() {
	*x = FindYearAmount{}
	mi := &file_card_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindYearAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindYearAmount) ProtoMessage() {}

func (x *FindYearAmount) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindYearAmount.ProtoReflect.Descriptor instead.
func (*FindYearAmount) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{27}
}

func (x *FindYearAmount) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type FindYearAmountCardNumber struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          int32                  `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	CardNumber    string                 `protobuf:"bytes,2,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindYearAmountCardNumber) Reset() {
	*x = FindYearAmountCardNumber{}
	mi := &file_card_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindYearAmountCardNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindYearAmountCardNumber) ProtoMessage() {}

func (x *FindYearAmountCardNumber) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindYearAmountCardNumber.ProtoReflect.Descriptor instead.
func (*FindYearAmountCardNumber) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{28}
}

func (x *FindYearAmountCardNumber) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FindYearAmountCardNumber) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

type FindByActiveCardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SaldoId       int32                  `protobuf:"varint,1,opt,name=saldo_id,json=saldoId,proto3" json:"saldo_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindByActiveCardRequest) Reset() {
	*x = FindByActiveCardRequest{}
	mi := &file_card_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByActiveCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByActiveCardRequest) ProtoMessage() {}

func (x *FindByActiveCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByActiveCardRequest.ProtoReflect.Descriptor instead.
func (*FindByActiveCardRequest) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{29}
}

func (x *FindByActiveCardRequest) GetSaldoId() int32 {
	if x != nil {
		return x.SaldoId
	}
	return 0
}

type FindByTrashedCardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindByTrashedCardRequest) Reset() {
	*x = FindByTrashedCardRequest{}
	mi := &file_card_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByTrashedCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByTrashedCardRequest) ProtoMessage() {}

func (x *FindByTrashedCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByTrashedCardRequest.ProtoReflect.Descriptor instead.
func (*FindByTrashedCardRequest) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{30}
}

type FindByCardNumberRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CardNumber    string                 `protobuf:"bytes,1,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindByCardNumberRequest) Reset() {
	*x = FindByCardNumberRequest{}
	mi := &file_card_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByCardNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByCardNumberRequest) ProtoMessage() {}

func (x *FindByCardNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByCardNumberRequest.ProtoReflect.Descriptor instead.
func (*FindByCardNumberRequest) Descriptor() ([]byte, []int) {
	return file_card_proto_rawDescGZIP(), []int{31}
}

func (x *FindByCardNumberRequest) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

var File_card_proto protoreflect.FileDescriptor

var file_card_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x12, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x2e, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x76, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x76, 0x76, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x76,
	0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x76, 0x76, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0x8b, 0x02, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x76,
	0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x76, 0x76, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xb2, 0x02, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x76, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x76, 0x76, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x57, 0x0a, 0x1a, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x54, 0x0a,
	0x19, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x59, 0x65, 0x61,
	0x72, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x54, 0x0a, 0x19, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x18, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd8, 0x01, 0x0a,
	0x15, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0xa3, 0x02, 0x0a, 0x1f, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x70, 0x75,
	0x70, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x69, 0x0a,
	0x0f, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x15, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x19,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x21, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x81, 0x01, 0x0a, 0x19, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x18, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x18, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a, 0x17, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x18, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x32, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x10, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x25, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x50, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65,
	0x61, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x24, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64,
	0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x4f,
	0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x34, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61,
	0x6c, 0x64, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x61,
	0x6c, 0x64, 0x6f, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x54,
	0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x3a, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x32, 0xf0, 0x19,
	0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a,
	0x0b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x72, 0x64, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x53, 0x0a, 0x10, 0x46,
	0x69, 0x6e, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x16, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x54, 0x72, 0x61, 0x73, 0x68, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x0d, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x13, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x59, 0x65, 0x61, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x1d, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x11, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61,
	0x72, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61,
	0x72, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65,
	0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1c,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1c, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x20,
	0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59,
	0x65, 0x61, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61,
	0x72, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x59, 0x65, 0x61, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x21, 0x46, 0x69, 0x6e,
	0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x59, 0x65, 0x61,
	0x72, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x25, 0x46,
	0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65,
	0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x64, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x66, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x2b, 0x46, 0x69, 0x6e,
	0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65,
	0x61, 0x72, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65,
	0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x6d, 0x0a, 0x2d, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x2c, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1b,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79,
	0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x41,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x6c, 0x22, 0x00,
	0x42, 0x2b, 0x5a, 0x29, 0x4d, 0x61, 0x6d, 0x61, 0x6e, 0x67, 0x52, 0x75, 0x73, 0x74, 0x2f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_card_proto_rawDescOnce sync.Once
	file_card_proto_rawDescData = file_card_proto_rawDesc
)

func file_card_proto_rawDescGZIP() []byte {
	file_card_proto_rawDescOnce.Do(func() {
		file_card_proto_rawDescData = protoimpl.X.CompressGZIP(file_card_proto_rawDescData)
	})
	return file_card_proto_rawDescData
}

var file_card_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_card_proto_goTypes = []any{
	(*FindAllCardRequest)(nil),                // 0: pb.FindAllCardRequest
	(*FindByIdCardRequest)(nil),               // 1: pb.FindByIdCardRequest
	(*CreateCardRequest)(nil),                 // 2: pb.CreateCardRequest
	(*UpdateCardRequest)(nil),                 // 3: pb.UpdateCardRequest
	(*CardResponse)(nil),                      // 4: pb.CardResponse
	(*CardResponseDeleteAt)(nil),              // 5: pb.CardResponseDeleteAt
	(*CardResponseMonthlyBalance)(nil),        // 6: pb.CardResponseMonthlyBalance
	(*CardResponseYearlyBalance)(nil),         // 7: pb.CardResponseYearlyBalance
	(*CardResponseMonthlyAmount)(nil),         // 8: pb.CardResponseMonthlyAmount
	(*CardResponseYearlyAmount)(nil),          // 9: pb.CardResponseYearlyAmount
	(*CardResponseDashboard)(nil),             // 10: pb.CardResponseDashboard
	(*CardResponseDashboardCardNumber)(nil),   // 11: pb.CardResponseDashboardCardNumber
	(*ApiResponseCard)(nil),                   // 12: pb.ApiResponseCard
	(*ApiResponseCardDelete)(nil),             // 13: pb.ApiResponseCardDelete
	(*ApiResponseCardAll)(nil),                // 14: pb.ApiResponseCardAll
	(*ApiResponsePaginationCard)(nil),         // 15: pb.ApiResponsePaginationCard
	(*ApiResponsePaginationCardDeleteAt)(nil), // 16: pb.ApiResponsePaginationCardDeleteAt
	(*ApiResponseMonthlyBalance)(nil),         // 17: pb.ApiResponseMonthlyBalance
	(*ApiResponseYearlyBalance)(nil),          // 18: pb.ApiResponseYearlyBalance
	(*ApiResponseMonthlyAmount)(nil),          // 19: pb.ApiResponseMonthlyAmount
	(*ApiResponseYearlyAmount)(nil),           // 20: pb.ApiResponseYearlyAmount
	(*ApiResponseDashboardCard)(nil),          // 21: pb.ApiResponseDashboardCard
	(*ApiResponseDashboardCardNumber)(nil),    // 22: pb.ApiResponseDashboardCardNumber
	(*FindByUserIdCardRequest)(nil),           // 23: pb.FindByUserIdCardRequest
	(*ApiResponseCards)(nil),                  // 24: pb.ApiResponseCards
	(*FindYearBalance)(nil),                   // 25: pb.FindYearBalance
	(*FindYearBalanceCardNumber)(nil),         // 26: pb.FindYearBalanceCardNumber
	(*FindYearAmount)(nil),                    // 27: pb.FindYearAmount
	(*FindYearAmountCardNumber)(nil),          // 28: pb.FindYearAmountCardNumber
	(*FindByActiveCardRequest)(nil),           // 29: pb.FindByActiveCardRequest
	(*FindByTrashedCardRequest)(nil),          // 30: pb.FindByTrashedCardRequest
	(*FindByCardNumberRequest)(nil),           // 31: pb.FindByCardNumberRequest
	(*timestamppb.Timestamp)(nil),             // 32: google.protobuf.Timestamp
	(*PaginationMeta)(nil),                    // 33: pb.PaginationMeta
	(*emptypb.Empty)(nil),                     // 34: google.protobuf.Empty
}
var file_card_proto_depIdxs = []int32{
	32, // 0: pb.CreateCardRequest.expire_date:type_name -> google.protobuf.Timestamp
	32, // 1: pb.UpdateCardRequest.expire_date:type_name -> google.protobuf.Timestamp
	4,  // 2: pb.ApiResponseCard.data:type_name -> pb.CardResponse
	4,  // 3: pb.ApiResponsePaginationCard.data:type_name -> pb.CardResponse
	33, // 4: pb.ApiResponsePaginationCard.pagination:type_name -> pb.PaginationMeta
	5,  // 5: pb.ApiResponsePaginationCardDeleteAt.data:type_name -> pb.CardResponseDeleteAt
	33, // 6: pb.ApiResponsePaginationCardDeleteAt.pagination:type_name -> pb.PaginationMeta
	6,  // 7: pb.ApiResponseMonthlyBalance.data:type_name -> pb.CardResponseMonthlyBalance
	7,  // 8: pb.ApiResponseYearlyBalance.data:type_name -> pb.CardResponseYearlyBalance
	8,  // 9: pb.ApiResponseMonthlyAmount.data:type_name -> pb.CardResponseMonthlyAmount
	9,  // 10: pb.ApiResponseYearlyAmount.data:type_name -> pb.CardResponseYearlyAmount
	10, // 11: pb.ApiResponseDashboardCard.data:type_name -> pb.CardResponseDashboard
	11, // 12: pb.ApiResponseDashboardCardNumber.data:type_name -> pb.CardResponseDashboardCardNumber
	4,  // 13: pb.ApiResponseCards.data:type_name -> pb.CardResponse
	0,  // 14: pb.CardService.FindAllCard:input_type -> pb.FindAllCardRequest
	1,  // 15: pb.CardService.FindByIdCard:input_type -> pb.FindByIdCardRequest
	23, // 16: pb.CardService.FindByUserIdCard:input_type -> pb.FindByUserIdCardRequest
	0,  // 17: pb.CardService.FindByActiveCard:input_type -> pb.FindAllCardRequest
	0,  // 18: pb.CardService.FindByTrashedCard:input_type -> pb.FindAllCardRequest
	31, // 19: pb.CardService.FindByCardNumber:input_type -> pb.FindByCardNumberRequest
	34, // 20: pb.CardService.DashboardCard:input_type -> google.protobuf.Empty
	31, // 21: pb.CardService.DashboardCardNumber:input_type -> pb.FindByCardNumberRequest
	25, // 22: pb.CardService.FindMonthlyBalance:input_type -> pb.FindYearBalance
	25, // 23: pb.CardService.FindYearlyBalance:input_type -> pb.FindYearBalance
	27, // 24: pb.CardService.FindMonthlyTopupAmount:input_type -> pb.FindYearAmount
	27, // 25: pb.CardService.FindYearlyTopupAmount:input_type -> pb.FindYearAmount
	27, // 26: pb.CardService.FindMonthlyWithdrawAmount:input_type -> pb.FindYearAmount
	27, // 27: pb.CardService.FindYearlyWithdrawAmount:input_type -> pb.FindYearAmount
	27, // 28: pb.CardService.FindMonthlyTransactionAmount:input_type -> pb.FindYearAmount
	27, // 29: pb.CardService.FindYearlyTransactionAmount:input_type -> pb.FindYearAmount
	27, // 30: pb.CardService.FindMonthlyTransferSenderAmount:input_type -> pb.FindYearAmount
	27, // 31: pb.CardService.FindYearlyTransferSenderAmount:input_type -> pb.FindYearAmount
	27, // 32: pb.CardService.FindMonthlyTransferReceiverAmount:input_type -> pb.FindYearAmount
	27, // 33: pb.CardService.FindYearlyTransferReceiverAmount:input_type -> pb.FindYearAmount
	26, // 34: pb.CardService.FindMonthlyBalanceByCardNumber:input_type -> pb.FindYearBalanceCardNumber
	26, // 35: pb.CardService.FindYearlyBalanceByCardNumber:input_type -> pb.FindYearBalanceCardNumber
	28, // 36: pb.CardService.FindMonthlyTopupAmountByCardNumber:input_type -> pb.FindYearAmountCardNumber
	28, // 37: pb.CardService.FindYearlyTopupAmountByCardNumber:input_type -> pb.FindYearAmountCardNumber
	28, // 38: pb.CardService.FindMonthlyWithdrawAmountByCardNumber:input_type -> pb.FindYearAmountCardNumber
	28, // 39: pb.CardService.FindYearlyWithdrawAmountByCardNumber:input_type -> pb.FindYearAmountCardNumber
	28, // 40: pb.CardService.FindMonthlyTransactionAmountByCardNumber:input_type -> pb.FindYearAmountCardNumber
	28, // 41: pb.CardService.FindYearlyTransactionAmountByCardNumber:input_type -> pb.FindYearAmountCardNumber
	28, // 42: pb.CardService.FindMonthlyTransferSenderAmountByCardNumber:input_type -> pb.FindYearAmountCardNumber
	28, // 43: pb.CardService.FindYearlyTransferSenderAmountByCardNumber:input_type -> pb.FindYearAmountCardNumber
	28, // 44: pb.CardService.FindMonthlyTransferReceiverAmountByCardNumber:input_type -> pb.FindYearAmountCardNumber
	28, // 45: pb.CardService.FindYearlyTransferReceiverAmountByCardNumber:input_type -> pb.FindYearAmountCardNumber
	2,  // 46: pb.CardService.CreateCard:input_type -> pb.CreateCardRequest
	3,  // 47: pb.CardService.UpdateCard:input_type -> pb.UpdateCardRequest
	1,  // 48: pb.CardService.TrashedCard:input_type -> pb.FindByIdCardRequest
	1,  // 49: pb.CardService.RestoreCard:input_type -> pb.FindByIdCardRequest
	1,  // 50: pb.CardService.DeleteCardPermanent:input_type -> pb.FindByIdCardRequest
	34, // 51: pb.CardService.RestoreAllCard:input_type -> google.protobuf.Empty
	34, // 52: pb.CardService.DeleteAllCardPermanent:input_type -> google.protobuf.Empty
	15, // 53: pb.CardService.FindAllCard:output_type -> pb.ApiResponsePaginationCard
	12, // 54: pb.CardService.FindByIdCard:output_type -> pb.ApiResponseCard
	12, // 55: pb.CardService.FindByUserIdCard:output_type -> pb.ApiResponseCard
	16, // 56: pb.CardService.FindByActiveCard:output_type -> pb.ApiResponsePaginationCardDeleteAt
	16, // 57: pb.CardService.FindByTrashedCard:output_type -> pb.ApiResponsePaginationCardDeleteAt
	12, // 58: pb.CardService.FindByCardNumber:output_type -> pb.ApiResponseCard
	21, // 59: pb.CardService.DashboardCard:output_type -> pb.ApiResponseDashboardCard
	22, // 60: pb.CardService.DashboardCardNumber:output_type -> pb.ApiResponseDashboardCardNumber
	17, // 61: pb.CardService.FindMonthlyBalance:output_type -> pb.ApiResponseMonthlyBalance
	18, // 62: pb.CardService.FindYearlyBalance:output_type -> pb.ApiResponseYearlyBalance
	19, // 63: pb.CardService.FindMonthlyTopupAmount:output_type -> pb.ApiResponseMonthlyAmount
	20, // 64: pb.CardService.FindYearlyTopupAmount:output_type -> pb.ApiResponseYearlyAmount
	19, // 65: pb.CardService.FindMonthlyWithdrawAmount:output_type -> pb.ApiResponseMonthlyAmount
	20, // 66: pb.CardService.FindYearlyWithdrawAmount:output_type -> pb.ApiResponseYearlyAmount
	19, // 67: pb.CardService.FindMonthlyTransactionAmount:output_type -> pb.ApiResponseMonthlyAmount
	20, // 68: pb.CardService.FindYearlyTransactionAmount:output_type -> pb.ApiResponseYearlyAmount
	19, // 69: pb.CardService.FindMonthlyTransferSenderAmount:output_type -> pb.ApiResponseMonthlyAmount
	20, // 70: pb.CardService.FindYearlyTransferSenderAmount:output_type -> pb.ApiResponseYearlyAmount
	19, // 71: pb.CardService.FindMonthlyTransferReceiverAmount:output_type -> pb.ApiResponseMonthlyAmount
	20, // 72: pb.CardService.FindYearlyTransferReceiverAmount:output_type -> pb.ApiResponseYearlyAmount
	17, // 73: pb.CardService.FindMonthlyBalanceByCardNumber:output_type -> pb.ApiResponseMonthlyBalance
	18, // 74: pb.CardService.FindYearlyBalanceByCardNumber:output_type -> pb.ApiResponseYearlyBalance
	19, // 75: pb.CardService.FindMonthlyTopupAmountByCardNumber:output_type -> pb.ApiResponseMonthlyAmount
	20, // 76: pb.CardService.FindYearlyTopupAmountByCardNumber:output_type -> pb.ApiResponseYearlyAmount
	19, // 77: pb.CardService.FindMonthlyWithdrawAmountByCardNumber:output_type -> pb.ApiResponseMonthlyAmount
	20, // 78: pb.CardService.FindYearlyWithdrawAmountByCardNumber:output_type -> pb.ApiResponseYearlyAmount
	19, // 79: pb.CardService.FindMonthlyTransactionAmountByCardNumber:output_type -> pb.ApiResponseMonthlyAmount
	20, // 80: pb.CardService.FindYearlyTransactionAmountByCardNumber:output_type -> pb.ApiResponseYearlyAmount
	19, // 81: pb.CardService.FindMonthlyTransferSenderAmountByCardNumber:output_type -> pb.ApiResponseMonthlyAmount
	20, // 82: pb.CardService.FindYearlyTransferSenderAmountByCardNumber:output_type -> pb.ApiResponseYearlyAmount
	19, // 83: pb.CardService.FindMonthlyTransferReceiverAmountByCardNumber:output_type -> pb.ApiResponseMonthlyAmount
	20, // 84: pb.CardService.FindYearlyTransferReceiverAmountByCardNumber:output_type -> pb.ApiResponseYearlyAmount
	12, // 85: pb.CardService.CreateCard:output_type -> pb.ApiResponseCard
	12, // 86: pb.CardService.UpdateCard:output_type -> pb.ApiResponseCard
	12, // 87: pb.CardService.TrashedCard:output_type -> pb.ApiResponseCard
	12, // 88: pb.CardService.RestoreCard:output_type -> pb.ApiResponseCard
	13, // 89: pb.CardService.DeleteCardPermanent:output_type -> pb.ApiResponseCardDelete
	14, // 90: pb.CardService.RestoreAllCard:output_type -> pb.ApiResponseCardAll
	14, // 91: pb.CardService.DeleteAllCardPermanent:output_type -> pb.ApiResponseCardAll
	53, // [53:92] is the sub-list for method output_type
	14, // [14:53] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_card_proto_init() }
func file_card_proto_init() {
	if File_card_proto != nil {
		return
	}
	file_api_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_card_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_card_proto_goTypes,
		DependencyIndexes: file_card_proto_depIdxs,
		MessageInfos:      file_card_proto_msgTypes,
	}.Build()
	File_card_proto = out.File
	file_card_proto_rawDesc = nil
	file_card_proto_goTypes = nil
	file_card_proto_depIdxs = nil
}
