// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	requests "MamangRust/paymentgatewaygrpc/internal/domain/requests"
	response "MamangRust/paymentgatewaygrpc/internal/domain/response"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthService) Login(request *requests.AuthRequest) (*response.TokenResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", request)
	ret0, _ := ret[0].(*response.TokenResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), request)
}

// Register mocks base method.
func (m *MockAuthService) Register(request *requests.CreateUserRequest) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", request)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceMockRecorder) Register(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthService)(nil).Register), request)
}

// MockRoleService is a mock of RoleService interface.
type MockRoleService struct {
	ctrl     *gomock.Controller
	recorder *MockRoleServiceMockRecorder
	isgomock struct{}
}

// MockRoleServiceMockRecorder is the mock recorder for MockRoleService.
type MockRoleServiceMockRecorder struct {
	mock *MockRoleService
}

// NewMockRoleService creates a new mock instance.
func NewMockRoleService(ctrl *gomock.Controller) *MockRoleService {
	mock := &MockRoleService{ctrl: ctrl}
	mock.recorder = &MockRoleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleService) EXPECT() *MockRoleServiceMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleService) CreateRole(request *requests.CreateRoleRequest) (*response.RoleResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", request)
	ret0, _ := ret[0].(*response.RoleResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleServiceMockRecorder) CreateRole(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleService)(nil).CreateRole), request)
}

// DeleteRolePermanent mocks base method.
func (m *MockRoleService) DeleteRolePermanent(role_id int) (any, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRolePermanent", role_id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// DeleteRolePermanent indicates an expected call of DeleteRolePermanent.
func (mr *MockRoleServiceMockRecorder) DeleteRolePermanent(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolePermanent", reflect.TypeOf((*MockRoleService)(nil).DeleteRolePermanent), role_id)
}

// FindAll mocks base method.
func (m *MockRoleService) FindAll(page, pageSize int, search string) ([]*response.RoleResponse, int, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", page, pageSize, search)
	ret0, _ := ret[0].([]*response.RoleResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*response.ErrorResponse)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRoleServiceMockRecorder) FindAll(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRoleService)(nil).FindAll), page, pageSize, search)
}

// FindByActiveRole mocks base method.
func (m *MockRoleService) FindByActiveRole(page, pageSize int, search string) ([]*response.RoleResponse, int, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActiveRole", page, pageSize, search)
	ret0, _ := ret[0].([]*response.RoleResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*response.ErrorResponse)
	return ret0, ret1, ret2
}

// FindByActiveRole indicates an expected call of FindByActiveRole.
func (mr *MockRoleServiceMockRecorder) FindByActiveRole(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActiveRole", reflect.TypeOf((*MockRoleService)(nil).FindByActiveRole), page, pageSize, search)
}

// FindById mocks base method.
func (m *MockRoleService) FindById(role_id int) (*response.RoleResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", role_id)
	ret0, _ := ret[0].(*response.RoleResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRoleServiceMockRecorder) FindById(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRoleService)(nil).FindById), role_id)
}

// FindByTrashedRole mocks base method.
func (m *MockRoleService) FindByTrashedRole(page, pageSize int, search string) ([]*response.RoleResponse, int, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashedRole", page, pageSize, search)
	ret0, _ := ret[0].([]*response.RoleResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*response.ErrorResponse)
	return ret0, ret1, ret2
}

// FindByTrashedRole indicates an expected call of FindByTrashedRole.
func (mr *MockRoleServiceMockRecorder) FindByTrashedRole(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashedRole", reflect.TypeOf((*MockRoleService)(nil).FindByTrashedRole), page, pageSize, search)
}

// RestoreRole mocks base method.
func (m *MockRoleService) RestoreRole(role_id int) (*response.RoleResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreRole", role_id)
	ret0, _ := ret[0].(*response.RoleResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// RestoreRole indicates an expected call of RestoreRole.
func (mr *MockRoleServiceMockRecorder) RestoreRole(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreRole", reflect.TypeOf((*MockRoleService)(nil).RestoreRole), role_id)
}

// TrashedRole mocks base method.
func (m *MockRoleService) TrashedRole(role_id int) (*response.RoleResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedRole", role_id)
	ret0, _ := ret[0].(*response.RoleResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// TrashedRole indicates an expected call of TrashedRole.
func (mr *MockRoleServiceMockRecorder) TrashedRole(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedRole", reflect.TypeOf((*MockRoleService)(nil).TrashedRole), role_id)
}

// UpdateRole mocks base method.
func (m *MockRoleService) UpdateRole(request *requests.UpdateRoleRequest) (*response.RoleResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", request)
	ret0, _ := ret[0].(*response.RoleResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRoleServiceMockRecorder) UpdateRole(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleService)(nil).UpdateRole), request)
}

// MockCardService is a mock of CardService interface.
type MockCardService struct {
	ctrl     *gomock.Controller
	recorder *MockCardServiceMockRecorder
	isgomock struct{}
}

// MockCardServiceMockRecorder is the mock recorder for MockCardService.
type MockCardServiceMockRecorder struct {
	mock *MockCardService
}

// NewMockCardService creates a new mock instance.
func NewMockCardService(ctrl *gomock.Controller) *MockCardService {
	mock := &MockCardService{ctrl: ctrl}
	mock.recorder = &MockCardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardService) EXPECT() *MockCardServiceMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardService) CreateCard(request *requests.CreateCardRequest) (*response.CardResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", request)
	ret0, _ := ret[0].(*response.CardResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardServiceMockRecorder) CreateCard(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardService)(nil).CreateCard), request)
}

// DeleteCardPermanent mocks base method.
func (m *MockCardService) DeleteCardPermanent(cardId int) (any, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCardPermanent", cardId)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// DeleteCardPermanent indicates an expected call of DeleteCardPermanent.
func (mr *MockCardServiceMockRecorder) DeleteCardPermanent(cardId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCardPermanent", reflect.TypeOf((*MockCardService)(nil).DeleteCardPermanent), cardId)
}

// FindAll mocks base method.
func (m *MockCardService) FindAll(page, pageSize int, search string) ([]*response.CardResponse, int, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", page, pageSize, search)
	ret0, _ := ret[0].([]*response.CardResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*response.ErrorResponse)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCardServiceMockRecorder) FindAll(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCardService)(nil).FindAll), page, pageSize, search)
}

// FindByActive mocks base method.
func (m *MockCardService) FindByActive() ([]*response.CardResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive")
	ret0, _ := ret[0].([]*response.CardResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockCardServiceMockRecorder) FindByActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockCardService)(nil).FindByActive))
}

// FindByCardNumber mocks base method.
func (m *MockCardService) FindByCardNumber(card_number string) (*response.CardResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumber", card_number)
	ret0, _ := ret[0].(*response.CardResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockCardServiceMockRecorder) FindByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockCardService)(nil).FindByCardNumber), card_number)
}

// FindById mocks base method.
func (m *MockCardService) FindById(card_id int) (*response.CardResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", card_id)
	ret0, _ := ret[0].(*response.CardResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCardServiceMockRecorder) FindById(card_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCardService)(nil).FindById), card_id)
}

// FindByTrashed mocks base method.
func (m *MockCardService) FindByTrashed() ([]*response.CardResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed")
	ret0, _ := ret[0].([]*response.CardResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockCardServiceMockRecorder) FindByTrashed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockCardService)(nil).FindByTrashed))
}

// FindByUserID mocks base method.
func (m *MockCardService) FindByUserID(userID int) (*response.CardResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", userID)
	ret0, _ := ret[0].(*response.CardResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockCardServiceMockRecorder) FindByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockCardService)(nil).FindByUserID), userID)
}

// RestoreCard mocks base method.
func (m *MockCardService) RestoreCard(cardId int) (*response.CardResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCard", cardId)
	ret0, _ := ret[0].(*response.CardResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// RestoreCard indicates an expected call of RestoreCard.
func (mr *MockCardServiceMockRecorder) RestoreCard(cardId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCard", reflect.TypeOf((*MockCardService)(nil).RestoreCard), cardId)
}

// TrashedCard mocks base method.
func (m *MockCardService) TrashedCard(cardId int) (*response.CardResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedCard", cardId)
	ret0, _ := ret[0].(*response.CardResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// TrashedCard indicates an expected call of TrashedCard.
func (mr *MockCardServiceMockRecorder) TrashedCard(cardId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedCard", reflect.TypeOf((*MockCardService)(nil).TrashedCard), cardId)
}

// UpdateCard mocks base method.
func (m *MockCardService) UpdateCard(request *requests.UpdateCardRequest) (*response.CardResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", request)
	ret0, _ := ret[0].(*response.CardResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockCardServiceMockRecorder) UpdateCard(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockCardService)(nil).UpdateCard), request)
}

// MockMerchantService is a mock of MerchantService interface.
type MockMerchantService struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantServiceMockRecorder
	isgomock struct{}
}

// MockMerchantServiceMockRecorder is the mock recorder for MockMerchantService.
type MockMerchantServiceMockRecorder struct {
	mock *MockMerchantService
}

// NewMockMerchantService creates a new mock instance.
func NewMockMerchantService(ctrl *gomock.Controller) *MockMerchantService {
	mock := &MockMerchantService{ctrl: ctrl}
	mock.recorder = &MockMerchantServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantService) EXPECT() *MockMerchantServiceMockRecorder {
	return m.recorder
}

// CreateMerchant mocks base method.
func (m *MockMerchantService) CreateMerchant(request *requests.CreateMerchantRequest) (*response.MerchantResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMerchant", request)
	ret0, _ := ret[0].(*response.MerchantResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// CreateMerchant indicates an expected call of CreateMerchant.
func (mr *MockMerchantServiceMockRecorder) CreateMerchant(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMerchant", reflect.TypeOf((*MockMerchantService)(nil).CreateMerchant), request)
}

// DeleteMerchantPermanent mocks base method.
func (m *MockMerchantService) DeleteMerchantPermanent(merchant_id int) (any, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMerchantPermanent", merchant_id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// DeleteMerchantPermanent indicates an expected call of DeleteMerchantPermanent.
func (mr *MockMerchantServiceMockRecorder) DeleteMerchantPermanent(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMerchantPermanent", reflect.TypeOf((*MockMerchantService)(nil).DeleteMerchantPermanent), merchant_id)
}

// FindAll mocks base method.
func (m *MockMerchantService) FindAll(page, pageSize int, search string) ([]*response.MerchantResponse, int, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", page, pageSize, search)
	ret0, _ := ret[0].([]*response.MerchantResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*response.ErrorResponse)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockMerchantServiceMockRecorder) FindAll(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockMerchantService)(nil).FindAll), page, pageSize, search)
}

// FindByActive mocks base method.
func (m *MockMerchantService) FindByActive() ([]*response.MerchantResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive")
	ret0, _ := ret[0].([]*response.MerchantResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockMerchantServiceMockRecorder) FindByActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockMerchantService)(nil).FindByActive))
}

// FindByApiKey mocks base method.
func (m *MockMerchantService) FindByApiKey(api_key string) (*response.MerchantResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByApiKey", api_key)
	ret0, _ := ret[0].(*response.MerchantResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByApiKey indicates an expected call of FindByApiKey.
func (mr *MockMerchantServiceMockRecorder) FindByApiKey(api_key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByApiKey", reflect.TypeOf((*MockMerchantService)(nil).FindByApiKey), api_key)
}

// FindById mocks base method.
func (m *MockMerchantService) FindById(merchant_id int) (*response.MerchantResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", merchant_id)
	ret0, _ := ret[0].(*response.MerchantResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockMerchantServiceMockRecorder) FindById(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockMerchantService)(nil).FindById), merchant_id)
}

// FindByMerchantUserId mocks base method.
func (m *MockMerchantService) FindByMerchantUserId(user_id int) ([]*response.MerchantResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMerchantUserId", user_id)
	ret0, _ := ret[0].([]*response.MerchantResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByMerchantUserId indicates an expected call of FindByMerchantUserId.
func (mr *MockMerchantServiceMockRecorder) FindByMerchantUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMerchantUserId", reflect.TypeOf((*MockMerchantService)(nil).FindByMerchantUserId), user_id)
}

// FindByTrashed mocks base method.
func (m *MockMerchantService) FindByTrashed() ([]*response.MerchantResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed")
	ret0, _ := ret[0].([]*response.MerchantResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockMerchantServiceMockRecorder) FindByTrashed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockMerchantService)(nil).FindByTrashed))
}

// RestoreMerchant mocks base method.
func (m *MockMerchantService) RestoreMerchant(merchant_id int) (*response.MerchantResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreMerchant", merchant_id)
	ret0, _ := ret[0].(*response.MerchantResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// RestoreMerchant indicates an expected call of RestoreMerchant.
func (mr *MockMerchantServiceMockRecorder) RestoreMerchant(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreMerchant", reflect.TypeOf((*MockMerchantService)(nil).RestoreMerchant), merchant_id)
}

// TrashedMerchant mocks base method.
func (m *MockMerchantService) TrashedMerchant(merchant_id int) (*response.MerchantResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedMerchant", merchant_id)
	ret0, _ := ret[0].(*response.MerchantResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// TrashedMerchant indicates an expected call of TrashedMerchant.
func (mr *MockMerchantServiceMockRecorder) TrashedMerchant(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedMerchant", reflect.TypeOf((*MockMerchantService)(nil).TrashedMerchant), merchant_id)
}

// UpdateMerchant mocks base method.
func (m *MockMerchantService) UpdateMerchant(request *requests.UpdateMerchantRequest) (*response.MerchantResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMerchant", request)
	ret0, _ := ret[0].(*response.MerchantResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// UpdateMerchant indicates an expected call of UpdateMerchant.
func (mr *MockMerchantServiceMockRecorder) UpdateMerchant(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMerchant", reflect.TypeOf((*MockMerchantService)(nil).UpdateMerchant), request)
}

// MockSaldoService is a mock of SaldoService interface.
type MockSaldoService struct {
	ctrl     *gomock.Controller
	recorder *MockSaldoServiceMockRecorder
	isgomock struct{}
}

// MockSaldoServiceMockRecorder is the mock recorder for MockSaldoService.
type MockSaldoServiceMockRecorder struct {
	mock *MockSaldoService
}

// NewMockSaldoService creates a new mock instance.
func NewMockSaldoService(ctrl *gomock.Controller) *MockSaldoService {
	mock := &MockSaldoService{ctrl: ctrl}
	mock.recorder = &MockSaldoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaldoService) EXPECT() *MockSaldoServiceMockRecorder {
	return m.recorder
}

// CreateSaldo mocks base method.
func (m *MockSaldoService) CreateSaldo(request *requests.CreateSaldoRequest) (*response.SaldoResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSaldo", request)
	ret0, _ := ret[0].(*response.SaldoResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// CreateSaldo indicates an expected call of CreateSaldo.
func (mr *MockSaldoServiceMockRecorder) CreateSaldo(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSaldo", reflect.TypeOf((*MockSaldoService)(nil).CreateSaldo), request)
}

// DeleteSaldoPermanent mocks base method.
func (m *MockSaldoService) DeleteSaldoPermanent(saldo_id int) (any, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSaldoPermanent", saldo_id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// DeleteSaldoPermanent indicates an expected call of DeleteSaldoPermanent.
func (mr *MockSaldoServiceMockRecorder) DeleteSaldoPermanent(saldo_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSaldoPermanent", reflect.TypeOf((*MockSaldoService)(nil).DeleteSaldoPermanent), saldo_id)
}

// FindAll mocks base method.
func (m *MockSaldoService) FindAll(page, pageSize int, search string) ([]*response.SaldoResponse, int, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", page, pageSize, search)
	ret0, _ := ret[0].([]*response.SaldoResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*response.ErrorResponse)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSaldoServiceMockRecorder) FindAll(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSaldoService)(nil).FindAll), page, pageSize, search)
}

// FindByActive mocks base method.
func (m *MockSaldoService) FindByActive() ([]*response.SaldoResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive")
	ret0, _ := ret[0].([]*response.SaldoResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockSaldoServiceMockRecorder) FindByActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockSaldoService)(nil).FindByActive))
}

// FindByCardNumber mocks base method.
func (m *MockSaldoService) FindByCardNumber(card_number string) (*response.SaldoResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumber", card_number)
	ret0, _ := ret[0].(*response.SaldoResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockSaldoServiceMockRecorder) FindByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockSaldoService)(nil).FindByCardNumber), card_number)
}

// FindById mocks base method.
func (m *MockSaldoService) FindById(saldo_id int) (*response.SaldoResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", saldo_id)
	ret0, _ := ret[0].(*response.SaldoResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockSaldoServiceMockRecorder) FindById(saldo_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockSaldoService)(nil).FindById), saldo_id)
}

// FindByTrashed mocks base method.
func (m *MockSaldoService) FindByTrashed() ([]*response.SaldoResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed")
	ret0, _ := ret[0].([]*response.SaldoResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockSaldoServiceMockRecorder) FindByTrashed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockSaldoService)(nil).FindByTrashed))
}

// RestoreSaldo mocks base method.
func (m *MockSaldoService) RestoreSaldo(saldo_id int) (*response.SaldoResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSaldo", saldo_id)
	ret0, _ := ret[0].(*response.SaldoResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// RestoreSaldo indicates an expected call of RestoreSaldo.
func (mr *MockSaldoServiceMockRecorder) RestoreSaldo(saldo_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSaldo", reflect.TypeOf((*MockSaldoService)(nil).RestoreSaldo), saldo_id)
}

// TrashSaldo mocks base method.
func (m *MockSaldoService) TrashSaldo(saldo_id int) (*response.SaldoResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashSaldo", saldo_id)
	ret0, _ := ret[0].(*response.SaldoResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// TrashSaldo indicates an expected call of TrashSaldo.
func (mr *MockSaldoServiceMockRecorder) TrashSaldo(saldo_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashSaldo", reflect.TypeOf((*MockSaldoService)(nil).TrashSaldo), saldo_id)
}

// UpdateSaldo mocks base method.
func (m *MockSaldoService) UpdateSaldo(request *requests.UpdateSaldoRequest) (*response.SaldoResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSaldo", request)
	ret0, _ := ret[0].(*response.SaldoResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// UpdateSaldo indicates an expected call of UpdateSaldo.
func (mr *MockSaldoServiceMockRecorder) UpdateSaldo(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSaldo", reflect.TypeOf((*MockSaldoService)(nil).UpdateSaldo), request)
}

// MockTopupService is a mock of TopupService interface.
type MockTopupService struct {
	ctrl     *gomock.Controller
	recorder *MockTopupServiceMockRecorder
	isgomock struct{}
}

// MockTopupServiceMockRecorder is the mock recorder for MockTopupService.
type MockTopupServiceMockRecorder struct {
	mock *MockTopupService
}

// NewMockTopupService creates a new mock instance.
func NewMockTopupService(ctrl *gomock.Controller) *MockTopupService {
	mock := &MockTopupService{ctrl: ctrl}
	mock.recorder = &MockTopupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopupService) EXPECT() *MockTopupServiceMockRecorder {
	return m.recorder
}

// CreateTopup mocks base method.
func (m *MockTopupService) CreateTopup(request *requests.CreateTopupRequest) (*response.TopupResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopup", request)
	ret0, _ := ret[0].(*response.TopupResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// CreateTopup indicates an expected call of CreateTopup.
func (mr *MockTopupServiceMockRecorder) CreateTopup(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopup", reflect.TypeOf((*MockTopupService)(nil).CreateTopup), request)
}

// DeleteTopupPermanent mocks base method.
func (m *MockTopupService) DeleteTopupPermanent(topup_id int) (any, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopupPermanent", topup_id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// DeleteTopupPermanent indicates an expected call of DeleteTopupPermanent.
func (mr *MockTopupServiceMockRecorder) DeleteTopupPermanent(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopupPermanent", reflect.TypeOf((*MockTopupService)(nil).DeleteTopupPermanent), topup_id)
}

// FindAll mocks base method.
func (m *MockTopupService) FindAll(page, pageSize int, search string) ([]*response.TopupResponse, int, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", page, pageSize, search)
	ret0, _ := ret[0].([]*response.TopupResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*response.ErrorResponse)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTopupServiceMockRecorder) FindAll(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTopupService)(nil).FindAll), page, pageSize, search)
}

// FindByActive mocks base method.
func (m *MockTopupService) FindByActive() ([]*response.TopupResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive")
	ret0, _ := ret[0].([]*response.TopupResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockTopupServiceMockRecorder) FindByActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockTopupService)(nil).FindByActive))
}

// FindByCardNumber mocks base method.
func (m *MockTopupService) FindByCardNumber(card_number string) ([]*response.TopupResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumber", card_number)
	ret0, _ := ret[0].([]*response.TopupResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockTopupServiceMockRecorder) FindByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockTopupService)(nil).FindByCardNumber), card_number)
}

// FindById mocks base method.
func (m *MockTopupService) FindById(topupID int) (*response.TopupResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", topupID)
	ret0, _ := ret[0].(*response.TopupResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTopupServiceMockRecorder) FindById(topupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTopupService)(nil).FindById), topupID)
}

// FindByTrashed mocks base method.
func (m *MockTopupService) FindByTrashed() ([]*response.TopupResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed")
	ret0, _ := ret[0].([]*response.TopupResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockTopupServiceMockRecorder) FindByTrashed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockTopupService)(nil).FindByTrashed))
}

// RestoreTopup mocks base method.
func (m *MockTopupService) RestoreTopup(topup_id int) (*response.TopupResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTopup", topup_id)
	ret0, _ := ret[0].(*response.TopupResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// RestoreTopup indicates an expected call of RestoreTopup.
func (mr *MockTopupServiceMockRecorder) RestoreTopup(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTopup", reflect.TypeOf((*MockTopupService)(nil).RestoreTopup), topup_id)
}

// TrashedTopup mocks base method.
func (m *MockTopupService) TrashedTopup(topup_id int) (*response.TopupResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTopup", topup_id)
	ret0, _ := ret[0].(*response.TopupResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// TrashedTopup indicates an expected call of TrashedTopup.
func (mr *MockTopupServiceMockRecorder) TrashedTopup(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTopup", reflect.TypeOf((*MockTopupService)(nil).TrashedTopup), topup_id)
}

// UpdateTopup mocks base method.
func (m *MockTopupService) UpdateTopup(request *requests.UpdateTopupRequest) (*response.TopupResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopup", request)
	ret0, _ := ret[0].(*response.TopupResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// UpdateTopup indicates an expected call of UpdateTopup.
func (mr *MockTopupServiceMockRecorder) UpdateTopup(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopup", reflect.TypeOf((*MockTopupService)(nil).UpdateTopup), request)
}

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
	isgomock struct{}
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionService) Create(apiKey string, request *requests.CreateTransactionRequest) (*response.TransactionResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", apiKey, request)
	ret0, _ := ret[0].(*response.TransactionResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransactionServiceMockRecorder) Create(apiKey, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionService)(nil).Create), apiKey, request)
}

// DeleteTransactionPermanent mocks base method.
func (m *MockTransactionService) DeleteTransactionPermanent(transaction_id int) (any, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransactionPermanent", transaction_id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// DeleteTransactionPermanent indicates an expected call of DeleteTransactionPermanent.
func (mr *MockTransactionServiceMockRecorder) DeleteTransactionPermanent(transaction_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionPermanent", reflect.TypeOf((*MockTransactionService)(nil).DeleteTransactionPermanent), transaction_id)
}

// FindAll mocks base method.
func (m *MockTransactionService) FindAll(page, pageSize int, search string) ([]*response.TransactionResponse, int, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", page, pageSize, search)
	ret0, _ := ret[0].([]*response.TransactionResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*response.ErrorResponse)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTransactionServiceMockRecorder) FindAll(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTransactionService)(nil).FindAll), page, pageSize, search)
}

// FindByActive mocks base method.
func (m *MockTransactionService) FindByActive() ([]*response.TransactionResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive")
	ret0, _ := ret[0].([]*response.TransactionResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockTransactionServiceMockRecorder) FindByActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockTransactionService)(nil).FindByActive))
}

// FindByCardNumber mocks base method.
func (m *MockTransactionService) FindByCardNumber(card_number string) ([]*response.TransactionResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumber", card_number)
	ret0, _ := ret[0].([]*response.TransactionResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockTransactionServiceMockRecorder) FindByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockTransactionService)(nil).FindByCardNumber), card_number)
}

// FindById mocks base method.
func (m *MockTransactionService) FindById(transactionID int) (*response.TransactionResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", transactionID)
	ret0, _ := ret[0].(*response.TransactionResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTransactionServiceMockRecorder) FindById(transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTransactionService)(nil).FindById), transactionID)
}

// FindByTrashed mocks base method.
func (m *MockTransactionService) FindByTrashed() ([]*response.TransactionResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed")
	ret0, _ := ret[0].([]*response.TransactionResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockTransactionServiceMockRecorder) FindByTrashed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockTransactionService)(nil).FindByTrashed))
}

// FindTransactionByMerchantId mocks base method.
func (m *MockTransactionService) FindTransactionByMerchantId(merchant_id int) ([]*response.TransactionResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransactionByMerchantId", merchant_id)
	ret0, _ := ret[0].([]*response.TransactionResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindTransactionByMerchantId indicates an expected call of FindTransactionByMerchantId.
func (mr *MockTransactionServiceMockRecorder) FindTransactionByMerchantId(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransactionByMerchantId", reflect.TypeOf((*MockTransactionService)(nil).FindTransactionByMerchantId), merchant_id)
}

// RestoreTransaction mocks base method.
func (m *MockTransactionService) RestoreTransaction(transaction_id int) (*response.TransactionResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTransaction", transaction_id)
	ret0, _ := ret[0].(*response.TransactionResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// RestoreTransaction indicates an expected call of RestoreTransaction.
func (mr *MockTransactionServiceMockRecorder) RestoreTransaction(transaction_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTransaction", reflect.TypeOf((*MockTransactionService)(nil).RestoreTransaction), transaction_id)
}

// TrashedTransaction mocks base method.
func (m *MockTransactionService) TrashedTransaction(transaction_id int) (*response.TransactionResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTransaction", transaction_id)
	ret0, _ := ret[0].(*response.TransactionResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// TrashedTransaction indicates an expected call of TrashedTransaction.
func (mr *MockTransactionServiceMockRecorder) TrashedTransaction(transaction_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTransaction", reflect.TypeOf((*MockTransactionService)(nil).TrashedTransaction), transaction_id)
}

// Update mocks base method.
func (m *MockTransactionService) Update(apiKey string, request *requests.UpdateTransactionRequest) (*response.TransactionResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", apiKey, request)
	ret0, _ := ret[0].(*response.TransactionResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTransactionServiceMockRecorder) Update(apiKey, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionService)(nil).Update), apiKey, request)
}

// MockTransferService is a mock of TransferService interface.
type MockTransferService struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceMockRecorder
	isgomock struct{}
}

// MockTransferServiceMockRecorder is the mock recorder for MockTransferService.
type MockTransferServiceMockRecorder struct {
	mock *MockTransferService
}

// NewMockTransferService creates a new mock instance.
func NewMockTransferService(ctrl *gomock.Controller) *MockTransferService {
	mock := &MockTransferService{ctrl: ctrl}
	mock.recorder = &MockTransferServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferService) EXPECT() *MockTransferServiceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransferService) CreateTransaction(request *requests.CreateTransferRequest) (*response.TransferResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", request)
	ret0, _ := ret[0].(*response.TransferResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransferServiceMockRecorder) CreateTransaction(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransferService)(nil).CreateTransaction), request)
}

// DeleteTransferPermanent mocks base method.
func (m *MockTransferService) DeleteTransferPermanent(transfer_id int) (any, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransferPermanent", transfer_id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// DeleteTransferPermanent indicates an expected call of DeleteTransferPermanent.
func (mr *MockTransferServiceMockRecorder) DeleteTransferPermanent(transfer_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferPermanent", reflect.TypeOf((*MockTransferService)(nil).DeleteTransferPermanent), transfer_id)
}

// FindAll mocks base method.
func (m *MockTransferService) FindAll(page, pageSize int, search string) ([]*response.TransferResponse, int, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", page, pageSize, search)
	ret0, _ := ret[0].([]*response.TransferResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*response.ErrorResponse)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTransferServiceMockRecorder) FindAll(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTransferService)(nil).FindAll), page, pageSize, search)
}

// FindByActive mocks base method.
func (m *MockTransferService) FindByActive() ([]*response.TransferResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive")
	ret0, _ := ret[0].([]*response.TransferResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockTransferServiceMockRecorder) FindByActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockTransferService)(nil).FindByActive))
}

// FindById mocks base method.
func (m *MockTransferService) FindById(transferId int) (*response.TransferResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", transferId)
	ret0, _ := ret[0].(*response.TransferResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTransferServiceMockRecorder) FindById(transferId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTransferService)(nil).FindById), transferId)
}

// FindByTrashed mocks base method.
func (m *MockTransferService) FindByTrashed() ([]*response.TransferResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed")
	ret0, _ := ret[0].([]*response.TransferResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockTransferServiceMockRecorder) FindByTrashed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockTransferService)(nil).FindByTrashed))
}

// FindTransferByTransferFrom mocks base method.
func (m *MockTransferService) FindTransferByTransferFrom(transfer_from string) ([]*response.TransferResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransferByTransferFrom", transfer_from)
	ret0, _ := ret[0].([]*response.TransferResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindTransferByTransferFrom indicates an expected call of FindTransferByTransferFrom.
func (mr *MockTransferServiceMockRecorder) FindTransferByTransferFrom(transfer_from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferFrom", reflect.TypeOf((*MockTransferService)(nil).FindTransferByTransferFrom), transfer_from)
}

// FindTransferByTransferTo mocks base method.
func (m *MockTransferService) FindTransferByTransferTo(transfer_to string) ([]*response.TransferResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransferByTransferTo", transfer_to)
	ret0, _ := ret[0].([]*response.TransferResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindTransferByTransferTo indicates an expected call of FindTransferByTransferTo.
func (mr *MockTransferServiceMockRecorder) FindTransferByTransferTo(transfer_to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferTo", reflect.TypeOf((*MockTransferService)(nil).FindTransferByTransferTo), transfer_to)
}

// RestoreTransfer mocks base method.
func (m *MockTransferService) RestoreTransfer(transfer_id int) (*response.TransferResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTransfer", transfer_id)
	ret0, _ := ret[0].(*response.TransferResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// RestoreTransfer indicates an expected call of RestoreTransfer.
func (mr *MockTransferServiceMockRecorder) RestoreTransfer(transfer_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTransfer", reflect.TypeOf((*MockTransferService)(nil).RestoreTransfer), transfer_id)
}

// TrashedTransfer mocks base method.
func (m *MockTransferService) TrashedTransfer(transfer_id int) (*response.TransferResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTransfer", transfer_id)
	ret0, _ := ret[0].(*response.TransferResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// TrashedTransfer indicates an expected call of TrashedTransfer.
func (mr *MockTransferServiceMockRecorder) TrashedTransfer(transfer_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTransfer", reflect.TypeOf((*MockTransferService)(nil).TrashedTransfer), transfer_id)
}

// UpdateTransaction mocks base method.
func (m *MockTransferService) UpdateTransaction(request *requests.UpdateTransferRequest) (*response.TransferResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", request)
	ret0, _ := ret[0].(*response.TransferResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockTransferServiceMockRecorder) UpdateTransaction(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockTransferService)(nil).UpdateTransaction), request)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(request *requests.CreateUserRequest) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", request)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), request)
}

// DeleteUserPermanent mocks base method.
func (m *MockUserService) DeleteUserPermanent(user_id int) (any, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPermanent", user_id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// DeleteUserPermanent indicates an expected call of DeleteUserPermanent.
func (mr *MockUserServiceMockRecorder) DeleteUserPermanent(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPermanent", reflect.TypeOf((*MockUserService)(nil).DeleteUserPermanent), user_id)
}

// FindAll mocks base method.
func (m *MockUserService) FindAll(page, pageSize int, search string) ([]*response.UserResponse, int, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", page, pageSize, search)
	ret0, _ := ret[0].([]*response.UserResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*response.ErrorResponse)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserServiceMockRecorder) FindAll(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserService)(nil).FindAll), page, pageSize, search)
}

// FindByActive mocks base method.
func (m *MockUserService) FindByActive() ([]*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive")
	ret0, _ := ret[0].([]*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockUserServiceMockRecorder) FindByActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockUserService)(nil).FindByActive))
}

// FindByID mocks base method.
func (m *MockUserService) FindByID(id int) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserServiceMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserService)(nil).FindByID), id)
}

// FindByTrashed mocks base method.
func (m *MockUserService) FindByTrashed() ([]*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed")
	ret0, _ := ret[0].([]*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockUserServiceMockRecorder) FindByTrashed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockUserService)(nil).FindByTrashed))
}

// RestoreUser mocks base method.
func (m *MockUserService) RestoreUser(user_id int) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreUser", user_id)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// RestoreUser indicates an expected call of RestoreUser.
func (mr *MockUserServiceMockRecorder) RestoreUser(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreUser", reflect.TypeOf((*MockUserService)(nil).RestoreUser), user_id)
}

// TrashedUser mocks base method.
func (m *MockUserService) TrashedUser(user_id int) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedUser", user_id)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// TrashedUser indicates an expected call of TrashedUser.
func (mr *MockUserServiceMockRecorder) TrashedUser(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedUser", reflect.TypeOf((*MockUserService)(nil).TrashedUser), user_id)
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(request *requests.UpdateUserRequest) (*response.UserResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", request)
	ret0, _ := ret[0].(*response.UserResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), request)
}

// MockWithdrawService is a mock of WithdrawService interface.
type MockWithdrawService struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawServiceMockRecorder
	isgomock struct{}
}

// MockWithdrawServiceMockRecorder is the mock recorder for MockWithdrawService.
type MockWithdrawServiceMockRecorder struct {
	mock *MockWithdrawService
}

// NewMockWithdrawService creates a new mock instance.
func NewMockWithdrawService(ctrl *gomock.Controller) *MockWithdrawService {
	mock := &MockWithdrawService{ctrl: ctrl}
	mock.recorder = &MockWithdrawServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawService) EXPECT() *MockWithdrawServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWithdrawService) Create(request *requests.CreateWithdrawRequest) (*response.WithdrawResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request)
	ret0, _ := ret[0].(*response.WithdrawResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWithdrawServiceMockRecorder) Create(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWithdrawService)(nil).Create), request)
}

// DeleteWithdrawPermanent mocks base method.
func (m *MockWithdrawService) DeleteWithdrawPermanent(withdraw_id int) (any, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWithdrawPermanent", withdraw_id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// DeleteWithdrawPermanent indicates an expected call of DeleteWithdrawPermanent.
func (mr *MockWithdrawServiceMockRecorder) DeleteWithdrawPermanent(withdraw_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithdrawPermanent", reflect.TypeOf((*MockWithdrawService)(nil).DeleteWithdrawPermanent), withdraw_id)
}

// FindAll mocks base method.
func (m *MockWithdrawService) FindAll(page, pageSize int, search string) ([]*response.WithdrawResponse, int, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", page, pageSize, search)
	ret0, _ := ret[0].([]*response.WithdrawResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*response.ErrorResponse)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockWithdrawServiceMockRecorder) FindAll(page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockWithdrawService)(nil).FindAll), page, pageSize, search)
}

// FindByActive mocks base method.
func (m *MockWithdrawService) FindByActive() ([]*response.WithdrawResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive")
	ret0, _ := ret[0].([]*response.WithdrawResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockWithdrawServiceMockRecorder) FindByActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockWithdrawService)(nil).FindByActive))
}

// FindByCardNumber mocks base method.
func (m *MockWithdrawService) FindByCardNumber(card_number string) ([]*response.WithdrawResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumber", card_number)
	ret0, _ := ret[0].([]*response.WithdrawResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockWithdrawServiceMockRecorder) FindByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockWithdrawService)(nil).FindByCardNumber), card_number)
}

// FindById mocks base method.
func (m *MockWithdrawService) FindById(withdrawID int) (*response.WithdrawResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", withdrawID)
	ret0, _ := ret[0].(*response.WithdrawResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockWithdrawServiceMockRecorder) FindById(withdrawID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockWithdrawService)(nil).FindById), withdrawID)
}

// FindByTrashed mocks base method.
func (m *MockWithdrawService) FindByTrashed() ([]*response.WithdrawResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed")
	ret0, _ := ret[0].([]*response.WithdrawResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockWithdrawServiceMockRecorder) FindByTrashed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockWithdrawService)(nil).FindByTrashed))
}

// RestoreWithdraw mocks base method.
func (m *MockWithdrawService) RestoreWithdraw(withdraw_id int) (*response.WithdrawResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreWithdraw", withdraw_id)
	ret0, _ := ret[0].(*response.WithdrawResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// RestoreWithdraw indicates an expected call of RestoreWithdraw.
func (mr *MockWithdrawServiceMockRecorder) RestoreWithdraw(withdraw_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreWithdraw", reflect.TypeOf((*MockWithdrawService)(nil).RestoreWithdraw), withdraw_id)
}

// TrashedWithdraw mocks base method.
func (m *MockWithdrawService) TrashedWithdraw(withdraw_id int) (*response.WithdrawResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedWithdraw", withdraw_id)
	ret0, _ := ret[0].(*response.WithdrawResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// TrashedWithdraw indicates an expected call of TrashedWithdraw.
func (mr *MockWithdrawServiceMockRecorder) TrashedWithdraw(withdraw_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedWithdraw", reflect.TypeOf((*MockWithdrawService)(nil).TrashedWithdraw), withdraw_id)
}

// Update mocks base method.
func (m *MockWithdrawService) Update(request *requests.UpdateWithdrawRequest) (*response.WithdrawResponse, *response.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", request)
	ret0, _ := ret[0].(*response.WithdrawResponse)
	ret1, _ := ret[1].(*response.ErrorResponse)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWithdrawServiceMockRecorder) Update(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWithdrawService)(nil).Update), request)
}
