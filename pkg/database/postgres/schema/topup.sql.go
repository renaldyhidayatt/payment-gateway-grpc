// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: topup.sql

package db

import (
	"context"
	"time"
)

const createTopup = `-- name: CreateTopup :one
INSERT INTO topups (user_id, topup_no, topup_amount, topup_method, topup_time) VALUES ($1, $2, $3, $4, $5) RETURNING topup_id, user_id, topup_no, topup_amount, topup_method, topup_time, created_at, updated_at
`

type CreateTopupParams struct {
	UserID      int32     `json:"user_id"`
	TopupNo     string    `json:"topup_no"`
	TopupAmount int32     `json:"topup_amount"`
	TopupMethod string    `json:"topup_method"`
	TopupTime   time.Time `json:"topup_time"`
}

func (q *Queries) CreateTopup(ctx context.Context, arg CreateTopupParams) (*Topup, error) {
	row := q.db.QueryRowContext(ctx, createTopup,
		arg.UserID,
		arg.TopupNo,
		arg.TopupAmount,
		arg.TopupMethod,
		arg.TopupTime,
	)
	var i Topup
	err := row.Scan(
		&i.TopupID,
		&i.UserID,
		&i.TopupNo,
		&i.TopupAmount,
		&i.TopupMethod,
		&i.TopupTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteTopup = `-- name: DeleteTopup :exec
DELETE FROM topups WHERE user_id = $1 RETURNING topup_id, user_id, topup_no, topup_amount, topup_method, topup_time, created_at, updated_at
`

func (q *Queries) DeleteTopup(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTopup, userID)
	return err
}

const getAllTopups = `-- name: GetAllTopups :many
SELECT topup_id, user_id, topup_no, topup_amount, topup_method, topup_time, created_at, updated_at FROM topups
`

func (q *Queries) GetAllTopups(ctx context.Context) ([]*Topup, error) {
	rows, err := q.db.QueryContext(ctx, getAllTopups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Topup
	for rows.Next() {
		var i Topup
		if err := rows.Scan(
			&i.TopupID,
			&i.UserID,
			&i.TopupNo,
			&i.TopupAmount,
			&i.TopupMethod,
			&i.TopupTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopupById = `-- name: GetTopupById :one
SELECT topup_id, user_id, topup_no, topup_amount, topup_method, topup_time, created_at, updated_at FROM topups WHERE topup_id = $1
`

func (q *Queries) GetTopupById(ctx context.Context, topupID int32) (*Topup, error) {
	row := q.db.QueryRowContext(ctx, getTopupById, topupID)
	var i Topup
	err := row.Scan(
		&i.TopupID,
		&i.UserID,
		&i.TopupNo,
		&i.TopupAmount,
		&i.TopupMethod,
		&i.TopupTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getTopupByUserId = `-- name: GetTopupByUserId :one
SELECT topup_id, user_id, topup_no, topup_amount, topup_method, topup_time, created_at, updated_at FROM topups WHERE topup_id = $1 LIMIT 1
`

func (q *Queries) GetTopupByUserId(ctx context.Context, topupID int32) (*Topup, error) {
	row := q.db.QueryRowContext(ctx, getTopupByUserId, topupID)
	var i Topup
	err := row.Scan(
		&i.TopupID,
		&i.UserID,
		&i.TopupNo,
		&i.TopupAmount,
		&i.TopupMethod,
		&i.TopupTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getTopupByUsers = `-- name: GetTopupByUsers :many
SELECT topup_id, user_id, topup_no, topup_amount, topup_method, topup_time, created_at, updated_at FROM topups WHERE user_id = ANY($1)
`

func (q *Queries) GetTopupByUsers(ctx context.Context, userID int32) ([]*Topup, error) {
	rows, err := q.db.QueryContext(ctx, getTopupByUsers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Topup
	for rows.Next() {
		var i Topup
		if err := rows.Scan(
			&i.TopupID,
			&i.UserID,
			&i.TopupNo,
			&i.TopupAmount,
			&i.TopupMethod,
			&i.TopupTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTopup = `-- name: UpdateTopup :one
UPDATE topups SET topup_amount = $1, topup_method = $2, topup_time = $3 WHERE topup_id = $4 RETURNING topup_id, user_id, topup_no, topup_amount, topup_method, topup_time, created_at, updated_at
`

type UpdateTopupParams struct {
	TopupAmount int32     `json:"topup_amount"`
	TopupMethod string    `json:"topup_method"`
	TopupTime   time.Time `json:"topup_time"`
	TopupID     int32     `json:"topup_id"`
}

func (q *Queries) UpdateTopup(ctx context.Context, arg UpdateTopupParams) (*Topup, error) {
	row := q.db.QueryRowContext(ctx, updateTopup,
		arg.TopupAmount,
		arg.TopupMethod,
		arg.TopupTime,
		arg.TopupID,
	)
	var i Topup
	err := row.Scan(
		&i.TopupID,
		&i.UserID,
		&i.TopupNo,
		&i.TopupAmount,
		&i.TopupMethod,
		&i.TopupTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
