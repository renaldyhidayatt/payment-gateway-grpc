// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: withdraw.sql

package db

import (
	"context"
	"time"
)

const createWithdraw = `-- name: CreateWithdraw :one
INSERT INTO withdraws (user_id, withdraw_amount, withdraw_time) VALUES ($1, $2, $3) RETURNING withdraw_id, user_id, withdraw_amount, withdraw_time, created_at, updated_at
`

type CreateWithdrawParams struct {
	UserID         int32     `json:"user_id"`
	WithdrawAmount int32     `json:"withdraw_amount"`
	WithdrawTime   time.Time `json:"withdraw_time"`
}

func (q *Queries) CreateWithdraw(ctx context.Context, arg CreateWithdrawParams) (*Withdraw, error) {
	row := q.db.QueryRowContext(ctx, createWithdraw, arg.UserID, arg.WithdrawAmount, arg.WithdrawTime)
	var i Withdraw
	err := row.Scan(
		&i.WithdrawID,
		&i.UserID,
		&i.WithdrawAmount,
		&i.WithdrawTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteWithdraw = `-- name: DeleteWithdraw :exec
DELETE FROM withdraws WHERE user_id = $1 RETURNING withdraw_id, user_id, withdraw_amount, withdraw_time, created_at, updated_at
`

func (q *Queries) DeleteWithdraw(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteWithdraw, userID)
	return err
}

const getAllWithdraws = `-- name: GetAllWithdraws :many
SELECT withdraw_id, user_id, withdraw_amount, withdraw_time, created_at, updated_at FROM withdraws
`

func (q *Queries) GetAllWithdraws(ctx context.Context) ([]*Withdraw, error) {
	rows, err := q.db.QueryContext(ctx, getAllWithdraws)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Withdraw
	for rows.Next() {
		var i Withdraw
		if err := rows.Scan(
			&i.WithdrawID,
			&i.UserID,
			&i.WithdrawAmount,
			&i.WithdrawTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWithdrawById = `-- name: GetWithdrawById :one
SELECT withdraw_id, user_id, withdraw_amount, withdraw_time, created_at, updated_at FROM withdraws WHERE withdraw_id = $1
`

func (q *Queries) GetWithdrawById(ctx context.Context, withdrawID int32) (*Withdraw, error) {
	row := q.db.QueryRowContext(ctx, getWithdrawById, withdrawID)
	var i Withdraw
	err := row.Scan(
		&i.WithdrawID,
		&i.UserID,
		&i.WithdrawAmount,
		&i.WithdrawTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getWithdrawByUserId = `-- name: GetWithdrawByUserId :one
SELECT withdraw_id, user_id, withdraw_amount, withdraw_time, created_at, updated_at FROM withdraws WHERE user_id = $1
`

func (q *Queries) GetWithdrawByUserId(ctx context.Context, userID int32) (*Withdraw, error) {
	row := q.db.QueryRowContext(ctx, getWithdrawByUserId, userID)
	var i Withdraw
	err := row.Scan(
		&i.WithdrawID,
		&i.UserID,
		&i.WithdrawAmount,
		&i.WithdrawTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getWithdrawByUsers = `-- name: GetWithdrawByUsers :many
SELECT withdraw_id, user_id, withdraw_amount, withdraw_time, created_at, updated_at FROM withdraws WHERE user_id = $1
`

func (q *Queries) GetWithdrawByUsers(ctx context.Context, userID int32) ([]*Withdraw, error) {
	rows, err := q.db.QueryContext(ctx, getWithdrawByUsers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Withdraw
	for rows.Next() {
		var i Withdraw
		if err := rows.Scan(
			&i.WithdrawID,
			&i.UserID,
			&i.WithdrawAmount,
			&i.WithdrawTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWithdraw = `-- name: UpdateWithdraw :one
UPDATE withdraws SET withdraw_amount = $1, withdraw_time = $2 WHERE withdraw_id = $3 RETURNING withdraw_id, user_id, withdraw_amount, withdraw_time, created_at, updated_at
`

type UpdateWithdrawParams struct {
	WithdrawAmount int32     `json:"withdraw_amount"`
	WithdrawTime   time.Time `json:"withdraw_time"`
	WithdrawID     int32     `json:"withdraw_id"`
}

func (q *Queries) UpdateWithdraw(ctx context.Context, arg UpdateWithdrawParams) (*Withdraw, error) {
	row := q.db.QueryRowContext(ctx, updateWithdraw, arg.WithdrawAmount, arg.WithdrawTime, arg.WithdrawID)
	var i Withdraw
	err := row.Scan(
		&i.WithdrawID,
		&i.UserID,
		&i.WithdrawAmount,
		&i.WithdrawTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
