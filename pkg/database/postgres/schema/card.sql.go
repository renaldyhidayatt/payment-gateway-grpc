// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: card.sql

package db

import (
	"context"
	"time"
)

const createCard = `-- name: CreateCard :one
INSERT INTO
    cards (
        user_id,
        card_number,
        card_type,
        expire_date,
        cvv,
        card_provider,
        created_at,
        updated_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        current_timestamp,
        current_timestamp
    ) RETURNING card_id, user_id, card_number, card_type, expire_date, cvv, card_provider, created_at, updated_at, deleted_at
`

type CreateCardParams struct {
	UserID       int32     `json:"user_id"`
	CardNumber   string    `json:"card_number"`
	CardType     string    `json:"card_type"`
	ExpireDate   time.Time `json:"expire_date"`
	Cvv          string    `json:"cvv"`
	CardProvider string    `json:"card_provider"`
}

// Create Card
func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (*Card, error) {
	row := q.db.QueryRowContext(ctx, createCard,
		arg.UserID,
		arg.CardNumber,
		arg.CardType,
		arg.ExpireDate,
		arg.Cvv,
		arg.CardProvider,
	)
	var i Card
	err := row.Scan(
		&i.CardID,
		&i.UserID,
		&i.CardNumber,
		&i.CardType,
		&i.ExpireDate,
		&i.Cvv,
		&i.CardProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteCardPermanently = `-- name: DeleteCardPermanently :exec
DELETE FROM cards WHERE card_id = $1
`

// Delete Card Permanently
func (q *Queries) DeleteCardPermanently(ctx context.Context, cardID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCardPermanently, cardID)
	return err
}

const getActiveCards = `-- name: GetActiveCards :many
SELECT card_id, user_id, card_number, card_type, expire_date, cvv, card_provider, created_at, updated_at, deleted_at FROM cards WHERE deleted_at IS NULL ORDER BY card_id
`

// Get Active Cards
func (q *Queries) GetActiveCards(ctx context.Context) ([]*Card, error) {
	rows, err := q.db.QueryContext(ctx, getActiveCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.CardID,
			&i.UserID,
			&i.CardNumber,
			&i.CardType,
			&i.ExpireDate,
			&i.Cvv,
			&i.CardProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCardByCardNumber = `-- name: GetCardByCardNumber :one
SELECT card_id, user_id, card_number, card_type, expire_date, cvv, card_provider, created_at, updated_at, deleted_at FROM cards WHERE card_number = $1 AND deleted_at IS NULL
`

// Get Card by Card Number
func (q *Queries) GetCardByCardNumber(ctx context.Context, cardNumber string) (*Card, error) {
	row := q.db.QueryRowContext(ctx, getCardByCardNumber, cardNumber)
	var i Card
	err := row.Scan(
		&i.CardID,
		&i.UserID,
		&i.CardNumber,
		&i.CardType,
		&i.ExpireDate,
		&i.Cvv,
		&i.CardProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getCardByID = `-- name: GetCardByID :one
SELECT card_id, user_id, card_number, card_type, expire_date, cvv, card_provider, created_at, updated_at, deleted_at FROM cards WHERE card_id = $1 AND deleted_at IS NULL
`

// Get Card by ID
func (q *Queries) GetCardByID(ctx context.Context, cardID int32) (*Card, error) {
	row := q.db.QueryRowContext(ctx, getCardByID, cardID)
	var i Card
	err := row.Scan(
		&i.CardID,
		&i.UserID,
		&i.CardNumber,
		&i.CardType,
		&i.ExpireDate,
		&i.Cvv,
		&i.CardProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getCardByUserID = `-- name: GetCardByUserID :one
SELECT card_id, user_id, card_number, card_type, expire_date, cvv, card_provider, created_at, updated_at, deleted_at
FROM cards
WHERE
    user_id = $1
    AND deleted_at IS NULL
LIMIT 1
`

// Get a single Card by User ID
func (q *Queries) GetCardByUserID(ctx context.Context, userID int32) (*Card, error) {
	row := q.db.QueryRowContext(ctx, getCardByUserID, userID)
	var i Card
	err := row.Scan(
		&i.CardID,
		&i.UserID,
		&i.CardNumber,
		&i.CardType,
		&i.ExpireDate,
		&i.Cvv,
		&i.CardProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getCards = `-- name: GetCards :many
SELECT card_id, user_id, card_number, card_type, expire_date, cvv, card_provider, created_at, updated_at, deleted_at
FROM cards
WHERE deleted_at IS NULL
  AND ($1::TEXT IS NULL OR card_number ILIKE '%' || $1 || '%' OR card_type ILIKE '%' || $1 || '%' OR card_provider ILIKE '%' || $1 || '%')
ORDER BY card_id
LIMIT $2 OFFSET $3
`

type GetCardsParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

// Search Cards with Pagination
func (q *Queries) GetCards(ctx context.Context, arg GetCardsParams) ([]*Card, error) {
	rows, err := q.db.QueryContext(ctx, getCards, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.CardID,
			&i.UserID,
			&i.CardNumber,
			&i.CardType,
			&i.ExpireDate,
			&i.Cvv,
			&i.CardProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrashedCardByID = `-- name: GetTrashedCardByID :one
SELECT card_id, user_id, card_number, card_type, expire_date, cvv, card_provider, created_at, updated_at, deleted_at FROM cards WHERE card_id = $1 AND deleted_at IS NOT NULL
`

// Get Trashed By Card ID
func (q *Queries) GetTrashedCardByID(ctx context.Context, cardID int32) (*Card, error) {
	row := q.db.QueryRowContext(ctx, getTrashedCardByID, cardID)
	var i Card
	err := row.Scan(
		&i.CardID,
		&i.UserID,
		&i.CardNumber,
		&i.CardType,
		&i.ExpireDate,
		&i.Cvv,
		&i.CardProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getTrashedCards = `-- name: GetTrashedCards :many
SELECT card_id, user_id, card_number, card_type, expire_date, cvv, card_provider, created_at, updated_at, deleted_at FROM cards WHERE deleted_at IS NOT NULL ORDER BY card_id
`

// Get Trashed Cards
func (q *Queries) GetTrashedCards(ctx context.Context) ([]*Card, error) {
	rows, err := q.db.QueryContext(ctx, getTrashedCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.CardID,
			&i.UserID,
			&i.CardNumber,
			&i.CardType,
			&i.ExpireDate,
			&i.Cvv,
			&i.CardProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreCard = `-- name: RestoreCard :exec
UPDATE cards
SET
    deleted_at = NULL
WHERE
    card_id = $1
    AND deleted_at IS NOT NULL
`

// Restore Trashed Card
func (q *Queries) RestoreCard(ctx context.Context, cardID int32) error {
	_, err := q.db.ExecContext(ctx, restoreCard, cardID)
	return err
}

const trashCard = `-- name: TrashCard :exec
UPDATE cards
SET
    deleted_at = current_timestamp
WHERE
    card_id = $1
    AND deleted_at IS NULL
`

// Trash Card
func (q *Queries) TrashCard(ctx context.Context, cardID int32) error {
	_, err := q.db.ExecContext(ctx, trashCard, cardID)
	return err
}

const updateCard = `-- name: UpdateCard :exec
UPDATE cards
SET
    card_type = $2,
    expire_date = $3,
    cvv = $4,
    card_provider = $5,
    updated_at = current_timestamp
WHERE
    card_id = $1
    AND deleted_at IS NULL
`

type UpdateCardParams struct {
	CardID       int32     `json:"card_id"`
	CardType     string    `json:"card_type"`
	ExpireDate   time.Time `json:"expire_date"`
	Cvv          string    `json:"cvv"`
	CardProvider string    `json:"card_provider"`
}

// Update Card
func (q *Queries) UpdateCard(ctx context.Context, arg UpdateCardParams) error {
	_, err := q.db.ExecContext(ctx, updateCard,
		arg.CardID,
		arg.CardType,
		arg.ExpireDate,
		arg.Cvv,
		arg.CardProvider,
	)
	return err
}
