// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: saldo.sql

package db

import (
	"context"
	"database/sql"
)

const createSaldo = `-- name: CreateSaldo :one
INSERT INTO saldo (user_id, total_balance, withdraw_amount, withdraw_time)VALUES ($1, $2, $3, $4)RETURNING saldo_id, user_id, total_balance, withdraw_amount, withdraw_time, created_at, updated_at
`

type CreateSaldoParams struct {
	UserID         int32         `json:"user_id"`
	TotalBalance   int32         `json:"total_balance"`
	WithdrawAmount sql.NullInt32 `json:"withdraw_amount"`
	WithdrawTime   sql.NullTime  `json:"withdraw_time"`
}

func (q *Queries) CreateSaldo(ctx context.Context, arg CreateSaldoParams) (*Saldo, error) {
	row := q.db.QueryRowContext(ctx, createSaldo,
		arg.UserID,
		arg.TotalBalance,
		arg.WithdrawAmount,
		arg.WithdrawTime,
	)
	var i Saldo
	err := row.Scan(
		&i.SaldoID,
		&i.UserID,
		&i.TotalBalance,
		&i.WithdrawAmount,
		&i.WithdrawTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteSaldo = `-- name: DeleteSaldo :exec
DELETE FROM saldo WHERE user_id = $1 RETURNING saldo_id, user_id, total_balance, withdraw_amount, withdraw_time, created_at, updated_at
`

func (q *Queries) DeleteSaldo(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSaldo, userID)
	return err
}

const getAllSaldo = `-- name: GetAllSaldo :many
SELECT saldo_id, user_id, total_balance, withdraw_amount, withdraw_time, created_at, updated_at FROM saldo
`

func (q *Queries) GetAllSaldo(ctx context.Context) ([]*Saldo, error) {
	rows, err := q.db.QueryContext(ctx, getAllSaldo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Saldo
	for rows.Next() {
		var i Saldo
		if err := rows.Scan(
			&i.SaldoID,
			&i.UserID,
			&i.TotalBalance,
			&i.WithdrawAmount,
			&i.WithdrawTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSaldoById = `-- name: GetSaldoById :one
SELECT saldo_id, user_id, total_balance, withdraw_amount, withdraw_time, created_at, updated_at FROM saldo WHERE saldo_id = $1 LIMIT 1
`

func (q *Queries) GetSaldoById(ctx context.Context, saldoID int32) (*Saldo, error) {
	row := q.db.QueryRowContext(ctx, getSaldoById, saldoID)
	var i Saldo
	err := row.Scan(
		&i.SaldoID,
		&i.UserID,
		&i.TotalBalance,
		&i.WithdrawAmount,
		&i.WithdrawTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getSaldoByUserId = `-- name: GetSaldoByUserId :one
SELECT saldo_id, user_id, total_balance, withdraw_amount, withdraw_time, created_at, updated_at FROM saldo WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetSaldoByUserId(ctx context.Context, userID int32) (*Saldo, error) {
	row := q.db.QueryRowContext(ctx, getSaldoByUserId, userID)
	var i Saldo
	err := row.Scan(
		&i.SaldoID,
		&i.UserID,
		&i.TotalBalance,
		&i.WithdrawAmount,
		&i.WithdrawTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getSaldoByUsers = `-- name: GetSaldoByUsers :many
SELECT saldo_id, user_id, total_balance, withdraw_amount, withdraw_time, created_at, updated_at FROM saldo WHERE user_id = $1
`

func (q *Queries) GetSaldoByUsers(ctx context.Context, userID int32) ([]*Saldo, error) {
	rows, err := q.db.QueryContext(ctx, getSaldoByUsers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Saldo
	for rows.Next() {
		var i Saldo
		if err := rows.Scan(
			&i.SaldoID,
			&i.UserID,
			&i.TotalBalance,
			&i.WithdrawAmount,
			&i.WithdrawTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSaldo = `-- name: UpdateSaldo :one
UPDATE saldo SET total_balance = $1, withdraw_amount = $2, withdraw_time = $3 WHERE user_id = $4 RETURNING saldo_id, user_id, total_balance, withdraw_amount, withdraw_time, created_at, updated_at
`

type UpdateSaldoParams struct {
	TotalBalance   int32         `json:"total_balance"`
	WithdrawAmount sql.NullInt32 `json:"withdraw_amount"`
	WithdrawTime   sql.NullTime  `json:"withdraw_time"`
	UserID         int32         `json:"user_id"`
}

func (q *Queries) UpdateSaldo(ctx context.Context, arg UpdateSaldoParams) (*Saldo, error) {
	row := q.db.QueryRowContext(ctx, updateSaldo,
		arg.TotalBalance,
		arg.WithdrawAmount,
		arg.WithdrawTime,
		arg.UserID,
	)
	var i Saldo
	err := row.Scan(
		&i.SaldoID,
		&i.UserID,
		&i.TotalBalance,
		&i.WithdrawAmount,
		&i.WithdrawTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateSaldoBalance = `-- name: UpdateSaldoBalance :one
UPDATE saldo SET total_balance = $1 WHERE user_id = $2 RETURNING saldo_id, user_id, total_balance, withdraw_amount, withdraw_time, created_at, updated_at
`

type UpdateSaldoBalanceParams struct {
	TotalBalance int32 `json:"total_balance"`
	UserID       int32 `json:"user_id"`
}

func (q *Queries) UpdateSaldoBalance(ctx context.Context, arg UpdateSaldoBalanceParams) (*Saldo, error) {
	row := q.db.QueryRowContext(ctx, updateSaldoBalance, arg.TotalBalance, arg.UserID)
	var i Saldo
	err := row.Scan(
		&i.SaldoID,
		&i.UserID,
		&i.TotalBalance,
		&i.WithdrawAmount,
		&i.WithdrawTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
