// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transfer.sql

package db

import (
	"context"
	"time"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (transfer_from, transfer_to, transfer_amount, transfer_time) VALUES ($1, $2, $3, $4) RETURNING transfer_id, transfer_from, transfer_to, transfer_amount, transfer_time, created_at, updated_at
`

type CreateTransferParams struct {
	TransferFrom   int32     `json:"transfer_from"`
	TransferTo     int32     `json:"transfer_to"`
	TransferAmount int32     `json:"transfer_amount"`
	TransferTime   time.Time `json:"transfer_time"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (*Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer,
		arg.TransferFrom,
		arg.TransferTo,
		arg.TransferAmount,
		arg.TransferTime,
	)
	var i Transfer
	err := row.Scan(
		&i.TransferID,
		&i.TransferFrom,
		&i.TransferTo,
		&i.TransferAmount,
		&i.TransferTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteTransfer = `-- name: DeleteTransfer :exec
DELETE FROM transfers WHERE transfer_from = $1 OR transfer_to = $1 RETURNING transfer_id, transfer_from, transfer_to, transfer_amount, transfer_time, created_at, updated_at
`

func (q *Queries) DeleteTransfer(ctx context.Context, transferFrom int32) error {
	_, err := q.db.ExecContext(ctx, deleteTransfer, transferFrom)
	return err
}

const getAllTransfers = `-- name: GetAllTransfers :many
SELECT transfer_id, transfer_from, transfer_to, transfer_amount, transfer_time, created_at, updated_at FROM transfers
`

func (q *Queries) GetAllTransfers(ctx context.Context) ([]*Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransfers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.TransferID,
			&i.TransferFrom,
			&i.TransferTo,
			&i.TransferAmount,
			&i.TransferTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransferById = `-- name: GetTransferById :one
SELECT transfer_id, transfer_from, transfer_to, transfer_amount, transfer_time, created_at, updated_at FROM transfers WHERE transfer_id = $1
`

func (q *Queries) GetTransferById(ctx context.Context, transferID int32) (*Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransferById, transferID)
	var i Transfer
	err := row.Scan(
		&i.TransferID,
		&i.TransferFrom,
		&i.TransferTo,
		&i.TransferAmount,
		&i.TransferTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getTransferByUserId = `-- name: GetTransferByUserId :one
SELECT transfer_id, transfer_from, transfer_to, transfer_amount, transfer_time, created_at, updated_at FROM transfers WHERE transfer_from = $1 OR transfer_to = $1
`

func (q *Queries) GetTransferByUserId(ctx context.Context, transferFrom int32) (*Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransferByUserId, transferFrom)
	var i Transfer
	err := row.Scan(
		&i.TransferID,
		&i.TransferFrom,
		&i.TransferTo,
		&i.TransferAmount,
		&i.TransferTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getTransferByUsers = `-- name: GetTransferByUsers :many
SELECT transfer_id, transfer_from, transfer_to, transfer_amount, transfer_time, created_at, updated_at FROM transfers WHERE transfer_from = $1 OR transfer_to = $1
`

func (q *Queries) GetTransferByUsers(ctx context.Context, transferFrom int32) ([]*Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransferByUsers, transferFrom)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.TransferID,
			&i.TransferFrom,
			&i.TransferTo,
			&i.TransferAmount,
			&i.TransferTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransfer = `-- name: UpdateTransfer :one
UPDATE transfers SET transfer_amount = $1, transfer_time = $2 WHERE transfer_id = $3 RETURNING transfer_id, transfer_from, transfer_to, transfer_amount, transfer_time, created_at, updated_at
`

type UpdateTransferParams struct {
	TransferAmount int32     `json:"transfer_amount"`
	TransferTime   time.Time `json:"transfer_time"`
	TransferID     int32     `json:"transfer_id"`
}

func (q *Queries) UpdateTransfer(ctx context.Context, arg UpdateTransferParams) (*Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTransfer, arg.TransferAmount, arg.TransferTime, arg.TransferID)
	var i Transfer
	err := row.Scan(
		&i.TransferID,
		&i.TransferFrom,
		&i.TransferTo,
		&i.TransferAmount,
		&i.TransferTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
