// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (firstname, lastname,email, password, noc_transfer) VALUES ($1, $2, $3, $4, $5) RETURNING user_id, firstname, lastname, email, password, noc_transfer, created_at, updated_at
`

type CreateUserParams struct {
	Firstname   string `json:"firstname"`
	Lastname    string `json:"lastname"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	NocTransfer string `json:"noc_transfer"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
		arg.NocTransfer,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.NocTransfer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = $1 RETURNING user_id, firstname, lastname, email, password, noc_transfer, created_at, updated_at
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, firstname, lastname, email, password, noc_transfer, created_at, updated_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.Password,
			&i.NocTransfer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, firstname, lastname, email, password, noc_transfer, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.NocTransfer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, firstname, lastname, email, password, noc_transfer, created_at, updated_at FROM users WHERE user_id = $1
`

func (q *Queries) GetUserById(ctx context.Context, userID int32) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.NocTransfer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET noc_transfer = $1, firstname = $2, lastname = $3, email = $4, password = $5 WHERE user_id = $6 RETURNING user_id, firstname, lastname, email, password, noc_transfer, created_at, updated_at
`

type UpdateUserParams struct {
	NocTransfer string `json:"noc_transfer"`
	Firstname   string `json:"firstname"`
	Lastname    string `json:"lastname"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	UserID      int32  `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.NocTransfer,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.NocTransfer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
