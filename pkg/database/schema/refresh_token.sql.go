// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_token.sql

package db

import (
	"context"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (user_id, token, expiration, created_at, updated_at)
VALUES ($1, $2, $3, current_timestamp, current_timestamp)
RETURNING refresh_token_id, user_id, token, expiration, created_at, updated_at, deleted_at
`

type CreateRefreshTokenParams struct {
	UserID     int32     `json:"user_id"`
	Token      string    `json:"token"`
	Expiration time.Time `json:"expiration"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (*RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.UserID, arg.Token, arg.Expiration)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshTokenID,
		&i.UserID,
		&i.Token,
		&i.Expiration,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshToken, token)
	return err
}

const deleteRefreshTokenByUserId = `-- name: DeleteRefreshTokenByUserId :exec
DELETE FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteRefreshTokenByUserId(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshTokenByUserId, userID)
	return err
}

const findRefreshTokenByToken = `-- name: FindRefreshTokenByToken :one
SELECT refresh_token_id, user_id, token, expiration, created_at, updated_at, deleted_at
FROM refresh_tokens
WHERE token = $1 AND deleted_at IS NULL
`

func (q *Queries) FindRefreshTokenByToken(ctx context.Context, token string) (*RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, findRefreshTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshTokenID,
		&i.UserID,
		&i.Token,
		&i.Expiration,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const findRefreshTokenByUserId = `-- name: FindRefreshTokenByUserId :one
SELECT 
    refresh_token_id, 
    user_id, 
    token, 
    expiration, 
    created_at, 
    updated_at, 
    deleted_at
FROM 
    refresh_tokens
WHERE 
    user_id = $1 AND deleted_at IS NULL
ORDER BY 
    created_at DESC
LIMIT 1
`

func (q *Queries) FindRefreshTokenByUserId(ctx context.Context, userID int32) (*RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, findRefreshTokenByUserId, userID)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshTokenID,
		&i.UserID,
		&i.Token,
		&i.Expiration,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateRefreshTokenByUserId = `-- name: UpdateRefreshTokenByUserId :exec
UPDATE refresh_tokens
SET token = $2, expiration = $3, updated_at = current_timestamp
WHERE user_id = $1 AND deleted_at IS NULL
`

type UpdateRefreshTokenByUserIdParams struct {
	UserID     int32     `json:"user_id"`
	Token      string    `json:"token"`
	Expiration time.Time `json:"expiration"`
}

func (q *Queries) UpdateRefreshTokenByUserId(ctx context.Context, arg UpdateRefreshTokenByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateRefreshTokenByUserId, arg.UserID, arg.Token, arg.Expiration)
	return err
}
